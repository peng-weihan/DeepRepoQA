{"docstore/metadata": {"/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/docs/conf.py_packaging.version_gettext_compact": {"doc_hash": "716e6c0a7f00653157d77cd13148b9a4bcaf08e7f6c7d4aca23c641227d9bb7a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/docs/conf.py__Local_Extensions__": {"doc_hash": "35850a4832341fc831240612547239193590b98c1decdac5b1f1d2164e2fff40"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/make_celery.py__": {"doc_hash": "62c61d1d0293aabffad13e94acb49a49e23b5957d3f5818fb6facf34278f00fe"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/__init__.py_from_celery_import_Celery_create_app": {"doc_hash": "7eb5864f3685e73ca15bece2098bdc3ce36cf46ef86621b6fd00f575b2a77250"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/__init__.py_celery_init_app_": {"doc_hash": "65aa03ca3d10949b7a6d775d3eeae532bafc2cf510eb72af45521b121a844ca2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/tasks.py_time_": {"doc_hash": "a5b6063dd6869865f0be0cbd8503afa7e7dbfced7ba151bf702d8543a9efee01"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/views.py_from_celery_result_import_": {"doc_hash": "acae6cb910cd0ce0bdb30b3f19bfd60513c673fa6131a49cc17835ce4300c45b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/js_example/__init__.py__": {"doc_hash": "1037a491369d1245f0454e117d1c0fbdbbf276b471519ce9f875d5fcc11d5408"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/js_example/views.py_from_flask_import_jsonify_": {"doc_hash": "4d525e3c227ddf31aee5feaf161a4d7ae374be82968c189ea883be5896dd4f45"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/tests/conftest.py__": {"doc_hash": "66fad34990a89ca33d6e47316153c10a0af859cf1500bd302c125c7e2ac9e68d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/tests/test_js_example.py_pytest_": {"doc_hash": "ebe594ff23f16945c3f62c814ad752ee8bbe4705430fc3b2d902e474358fe65c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/__init__.py_os_": {"doc_hash": "df4d25ad324343a104bf4a133e1f8b7d2cdc09e52b32aff4b434f88405caad3d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_functools_load_logged_in_user": {"doc_hash": "45afc931682a2b487652cc1233291b793fe08fa1c34f485a1d1d927c52a0dbab"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_register_register.return_render_template_a": {"doc_hash": "c7686334091013e371822f01088ae284404b795751f84b4750688f71e8539b6e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_login_": {"doc_hash": "73d160fbba50c88521198f2a409a4b4e6a1c6249fd5cd4b0f60a0a51ed37006b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_from_flask_import_Bluepri_index": {"doc_hash": "074b8e1370c9c1deed086c388bbeccce037aa4690e3ffc39479dbad536773933"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_get_post_get_post.return_post": {"doc_hash": "13b1a4e03fff84e55b99222bae5a6d95a0efdb55424780ada0b21875ff71930a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_create_create": {"doc_hash": "32fd1d268703b87811939d8f5e45dc7aed02a2351bda0ce07100c28ccea377dc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_update_": {"doc_hash": "64c8f9dd03fac89d7f127643030d620d963acc72d63b60ebbc2f29fbe9e14939"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/db.py_sqlite3_": {"doc_hash": "56d0c19a822ac87147fdbf3e865f1bbde4a780ba5e6839126334cfd847bd4d39"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/conftest.py_os_app": {"doc_hash": "9e9136fcf6c70a3e29de7cc615e2e60f983c88bd2c1b6f87996a8e2dc2e06692"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/conftest.py_client_": {"doc_hash": "497913943a73c6e79d911c2338451fa2307ad0aa6f1c19f0ef85caedd392be46"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_auth.py_pytest_test_register_validate_input": {"doc_hash": "110b621c3b0f97a2af21f75da76cc9d2f0bd875ab40e8d22617bdb318a862b5d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_auth.py_test_login_": {"doc_hash": "00d8a97f46da8ee75638708801d0e6889466ef295b6ea5158d58ba5f2ab32e8a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_pytest_test_login_required": {"doc_hash": "e5c9b389bf79b8421bb4eac3e144516f9e6cac090d58e140a22dfe0713b706be"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_test_author_required_test_author_required": {"doc_hash": "b270e033b35476a86507d69307b1d562cef30ef0029d5e57f87e708f15a0571c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_test_exists_required_": {"doc_hash": "d81d38a68c5058a66931d045fab2a7addddb602da3cf2a4115b2d8a6a4b0179a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_db.py_sqlite3_": {"doc_hash": "89ce8cfbba0afa9df71595abf0af76ad2f30431e6e7f014a4f748fd7da456cda"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_factory.py__": {"doc_hash": "91ce61e1b2d8c6ed7b9ee979acea1a1ed88dc9d7b62cb155467cc84ccc3aa50d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/__init__.py_from_import_json_as_jso_": {"doc_hash": "9c7e90abc9d6a3154e48f9f409448354a65b3684037b9ae9f0f22297f3d8a9ac"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/__main__.py__": {"doc_hash": "d583f884d9292b3206a1862ee153544685a2d057615f2cc7f83672144a034de1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_from___future___import_an__make_timedelta": {"doc_hash": "146d949a375aafed2a0fe5dd574eeab0184ac46017ce89f0b40fc586acf0bee3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask_Flask._The_flask_object_imple": {"doc_hash": "dbe9197113897df9e010c0e7f1685413712e26feca0b550db8d772fffe0c412d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.default_config_Flask.session_interface": {"doc_hash": "044d7dd13212948809810f1b95ba4a7b0b11772a2752756393e20bf90470a3cc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.__init___Flask.__init__.if_self_has_static_folder": {"doc_hash": "1ab254d65d55eb6b8e29e2de3918f8c54e5fb1e054d76aadb323fbfbb311a554"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.get_send_file_max_age_Flask.get_send_file_max_age._type_ignore_no_any_ret": {"doc_hash": "7544cd558fde5cb7fbea7e45887edbbc09887f618e3e6b5e2f2224c88e8e408f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.send_static_file_Flask.send_static_file": {"doc_hash": "100afdd7ac6f24f8dc5d6b707ba73f94c1a64a5a2b75e4533f43fdc51ae76e2b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.open_resource_Flask.open_resource.return_open_path_mode_e": {"doc_hash": "0cfcb52fc1c86b49a656a1ccca0b41a711c8ce11f0272ac9f206ff77efdbb0fa"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.open_instance_resource_Flask.open_instance_resource": {"doc_hash": "9e6e5a8ba68e601c66b66977bf918a7acd57fd7abd3f6e6c5a61f2aa1439997a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.create_jinja_environment_Flask.create_jinja_environment.return_rv": {"doc_hash": "720e8deba27ae558d434c2cec3db489e58bba0994eb528b84dc2e29e093218e1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.create_url_adapter_Flask.create_url_adapter.return_None": {"doc_hash": "2402abe5c7e3e778556c5841d8b8975dd0505c7630a5d375df982ffbe4980acb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.raise_routing_exception_Flask.raise_routing_exception.raise_FormDataRoutingRedi": {"doc_hash": "1bb4f1398c529eda18d350a2e24985557855690b7f0de256f2d3016c29093fd2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.update_template_context_Flask.make_shell_context": {"doc_hash": "f544f17565bc52415decbb4b1d476e7f1332ef58e51c8813f93a2c40f1812972"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.run_Flask.run._the_flask_run_command": {"doc_hash": "b3e82e47bee717b86272ebc48bc54fc4b4f41008d2f9ece2d35f2494310d2ad1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.run.if_os_environ_get_FLASK__Flask.run.try_": {"doc_hash": "02e19811ed49aadb9f911fd2132a9d59712ee5925cc5047ed699369ef6627a4b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_client_Flask.test_client.return_cls_type_igno": {"doc_hash": "87b1ed94e3318a0db722b246c2da2de1de0912f9a427da06af8c0e459eb7b7fc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_cli_runner_Flask.test_cli_runner": {"doc_hash": "21cf65b13f1aaf88369722d9dfa78747f53aa4cd375089d5d47a7ef695d2fce3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_http_exception_Flask.handle_http_exception._type_ignore_no_any_ret": {"doc_hash": "847f9d2926546cc35b95d1c6c8612ffb98e48e4b3e3a0f2b6344f4d5ac1ecf0e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_user_exception_Flask.handle_user_exception._type_ignore_no_any_ret": {"doc_hash": "eea6b7cdb86c17e3944118700fedd4570372f5687ce4fb39401b6af91b450024"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_exception_Flask.handle_exception.return_self_finalize_requ": {"doc_hash": "92a7de3f33cf3fb5638160a421aa369f5221a2c968b05eac70ad17a98656ac7d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.log_exception_Flask.log_exception": {"doc_hash": "5331de719e86a92733c9fc8b9b4283ba9c60b82a5a902311df7cd30918971b23"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.dispatch_request_Flask.dispatch_request": {"doc_hash": "7ac8916241daaf557de852f3dacc4ce2c20ec8699402294e8b9cd608236359d8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.full_dispatch_request_Flask.full_dispatch_request": {"doc_hash": "0296a89c3fdab9ffe738fe89db21942ad32e4f435713d3caebf322efc42775f7"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.finalize_request_Flask.finalize_request.return_response": {"doc_hash": "cbc38b72da42b9de63185caff72eba270de66ab2c8e8dbba21cf84b0199e7469"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_default_options_response_Flask.make_default_options_response": {"doc_hash": "7a4f346aba1d26897c7c89a790e69e30851959332c704056a89d9346429a74c6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.ensure_sync_Flask.ensure_sync": {"doc_hash": "95dc5a353451fba234081cdbc564a1cb93453a10ad544ac8d8f030fd0e66fa93"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.async_to_sync_Flask.async_to_sync": {"doc_hash": "5c7ae8665a82b2aa5fdf7bc1508f7b61af9b9d6452b1a4732ec07ceff196afac"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.url_for_Flask.url_for._Generate_a_URL_to_the_": {"doc_hash": "f19599c63c57aa13be4941edb310518799f4485dc832d829652fb7656d78dea5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.url_for.if_ctx__cv_app_get_No_Flask.url_for.return_rv": {"doc_hash": "a5fbc11890cbc4ef630ebde1cad3020d52a8179f621187156910f0a0d1485a27"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_response_Flask.make_response._make_sure_the_body_is_a": {"doc_hash": "b09257f952bae691ef8f1a19906fc6cc59cc1f8afe42310d749ca51a74d8225d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_response.if_not_isinstance_rv_sel_Flask.make_response.return_rv": {"doc_hash": "a01f9423527ab56fc13728e90542a90c22f819289128636e63f41aa65cc523c5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.preprocess_request_Flask.preprocess_request.return_None": {"doc_hash": "7c57b7b74d06cf78878b5ff1debdea6245983951118fd4485a05b65e82115fcc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.process_response_Flask.process_response.return_response": {"doc_hash": "7678025ae244d49dc2678062d3d16b8cbe18936b126b0f918bd581171a284d1a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.do_teardown_request_Flask.do_teardown_request": {"doc_hash": "b44f70b087699968a9cb1adc4d4022f2ddf353848fefb1c8a2274f5d296d9aac"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.do_teardown_appcontext_Flask.do_teardown_appcontext": {"doc_hash": "0798f42de81b61d83e2508ad3806cbadd31deba0ceee696ee642ed2fe98432d1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.app_context_Flask.app_context": {"doc_hash": "8adbce494350f75c7425885860fb20dfaf00e695fa44675b9035283383b9d6f0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.request_context_Flask.request_context": {"doc_hash": "0b1a834e080f9ccde70517b18ab21caba21ba5f2f3c5e57003ec2f97b24c8c48"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_request_context_Flask.test_request_context.return_self_request_conte": {"doc_hash": "d6b2f0a1b79c59699d2c97154bcdfd031b73c5fefc9ada6b1ac8ceea02d8fb18"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.wsgi_app_": {"doc_hash": "76d6280e3e2b403998ffb8466e3acf88ae5b6538506565365e5fa9adaece114d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_from___future___import_an_Blueprint.__init__.self.cli.name": {"doc_hash": "54975f57a0b4417ff4078f0352c1a84134935d7c82be63f9baa7f3c6de7967fd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.get_send_file_max_age_Blueprint.get_send_file_max_age._type_ignore_no_any_ret": {"doc_hash": "7011aaf0890a280e36db2204c51e971ff56f26f18a0742f1853320f320a17832"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.send_static_file_Blueprint.send_static_file": {"doc_hash": "bd259ff29597dd62bb9baf4855e2d02bd08aed045883dcd3af0f9b4d321bf340"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.open_resource_": {"doc_hash": "f7cc49ea7879f0577853e1393a2a1c887b19c7c8c4f1711c572d0cb7a59e8515"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_from___future___import_an_NoAppException._Raised_if_an_applicati": {"doc_hash": "e2279677a682df209a5b4ac9c4c9f52c3f59557d3c5e9ae2faac2aee21ebfafc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_find_best_app_find_best_app.raise_NoAppException_": {"doc_hash": "276006a95e983c1b1d4afb1d475170a34fd750b1d175fd3ac9af3eee75f72750"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__called_with_wrong_args__called_with_wrong_args": {"doc_hash": "d405f38862272f21709f465146e2b46de2d505db477c9ca9fd49eea2166483e8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_find_app_by_string_find_app_by_string.raise_NoAppException_": {"doc_hash": "e6e3b21bf52f02ddf0d9438307b8482c462bf63263920412b9946b1c954dd066"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_prepare_import_locate_app_5": {"doc_hash": "c7f5aa2fe418646c596c48b60921e2fadc71ee5baa04156e924ad7a470a45f8a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_locate_app_6_locate_app_6": {"doc_hash": "9990fdce8c2359f694a1ae3b4a3c1d9a9c560357e29ae420ddc9874100d5bb5d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_get_version_version_option": {"doc_hash": "08029fc99188c70d9dc467579975cf6327878dcfa422e324ba3db35736373de6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_ScriptInfo_ScriptInfo.__init__.self._loaded_app": {"doc_hash": "3e9a3de97fa5c07ed7fdc5c7227ba64ef37c16850eaa98048de49de17604980c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_ScriptInfo.load_app_ScriptInfo.load_app.return_app": {"doc_hash": "7826d115a9ee1f00361da814d7b2369011479632da0b5b73aaf0296b960527e7"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_pass_script_info_with_appcontext": {"doc_hash": "be0982970977dd14705812a256bf9a4e70014de446764dc9f9c172edb130740e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_AppGroup_AppGroup.command": {"doc_hash": "7b323fb50a3ffa504a1abe9e24806f88eef1c3ed16db0127dec307adbdc5f4da"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_AppGroup.group_AppGroup.group": {"doc_hash": "2fc75025e56e7f4051221e562bc1d2cd57c48b584fd4be9e97aa9088e20ac48e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__set_app__app_option": {"doc_hash": "7aa5b0243a56de11da25e74b0bfec869d3af2cb555b2e1d21de7ca204b83f6b2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__set_debug__debug_option": {"doc_hash": "3f63eb3f4822675ff03c10abb39ece6c5fabad48988c216d276574bcc6a23d1e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__env_file_callback__env_file_callback": {"doc_hash": "6f62f82c20e9d150dc420d733b8ac4040ec9e52bc70e19cc0a5228511ffdf5f2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__This_option_is_eager_so_4__env_file_option": {"doc_hash": "7d629ea45fc25962fee99959cfacc2009826f0df334d16940ba9aa7d73e7bc91"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup_FlaskGroup._load_plugin_commands": {"doc_hash": "e4ef0002051410fd5f219475c4fe48af2b6bc617b45a1d8a438d858ddf413660"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.get_command_FlaskGroup.get_command.return_app_cli_get_comman": {"doc_hash": "20933f2d6e78ee15f7cd36237ca10f9e71d2c2b852eebb53f3b2b9a6a65ed9b9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.list_commands_FlaskGroup.list_commands": {"doc_hash": "9888da4cfa0734c020d69c9ddb15f1daeac75d3118edade17ab4d12cfcbc77a3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.make_context_FlaskGroup.make_context": {"doc_hash": "9daa94582fc2b90805f8ad6911a04860ddc1de0bd0b54bac1ececc4ef9e9281e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.parse_args__path_is_ancestor": {"doc_hash": "89540face44a8dc78109c4b31a40154ead6d2b727d50eb32d211bddee49a0dd8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_load_dotenv_load_dotenv._True_if_at_least_one_en": {"doc_hash": "79542a9c0f440cda42719b622a1c3c7bb38a18ecba560d24431b69a0b633f10f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_show_server_banner_show_server_banner": {"doc_hash": "f406d9d3cf1072b605e8a647f3bc4cffde18a5e369895820d6bd566260ce2198"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_CertParamType_CertParamType.convert.try__1": {"doc_hash": "e7777e62420f698564b1184d76eebc4d3e537e37b5bd3293a2fcc1aba296ad8f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__validate_key__validate_key.return_value": {"doc_hash": "6e491d563acc3dd7ac82ecfefab00fe7b9376031ad40a60e517c9c124dd3db74"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_SeparatedPathType_SeparatedPathType.convert": {"doc_hash": "caf586f4dcbf0a59f443ff9b6324ffd3941b87b0e5fb22e20930ed4f7098f485"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_run_command_run_command.run_simple_": {"doc_hash": "375211d775b092b6bb7e2b958d323deb4cdb4d7f3042f29a98d7871505bce5cb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_run_command_params_insert_shell_command.code_interact_banner_bann": {"doc_hash": "da8e7d13e3413cca6eceff3208929189b17af3726e3f00bdd7d079c744c9779a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_routes_command_": {"doc_hash": "4948ad66e3e0b6c62d630ac5eeba72dcf1b106c013d208b198a6560279777a86"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_from___future___import_an_ConfigAttribute.__set__": {"doc_hash": "00aa92daca4b43c07648cb5f4426ef6506ffe6b650f67f4bd09318df6d4dc9fe"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config_Config.__init__": {"doc_hash": "874ddd681c2da8ae7ba8b66489a0a8710aef165d7994d3d28c29862f7ef49b45"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_envvar_Config.from_envvar": {"doc_hash": "31d3c65ccc182e8295b7e2a332b847dd02b2efdfe362574d405f9b26a7905db9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_prefixed_env_Config.from_prefixed_env.return_True": {"doc_hash": "d297145ff60a44e314265b124a4c0c9e28edcc868670a203bba92249e0c8a8fd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_pyfile_Config.from_pyfile.return_True": {"doc_hash": "3b6c449d5dbcc6ba38df70a0f1705fefc87682ca3e0dfdd0e925798ceff5a689"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_object_Config.from_object.for_key_in_dir_obj_": {"doc_hash": "01fb825135878cad14639db3a82380bd59e4fd6f0c6fa637782459046d01ac19"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_file_Config.from_file.return_self_from_mapping_": {"doc_hash": "54c0faa1d6aba5e2426b97aa3f0d2183db5f4d8fddc917045d5739ea8df80bd0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_mapping_Config.from_mapping": {"doc_hash": "93a8c9bad76cbec1b13a119be2c74f47fde02fd430280729cdcc51a3463b8915"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.get_namespace_": {"doc_hash": "bda9dfe1dc564252d2e709cee89d844677258551deeff2ae9a491c0f843eb626"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_from___future___import_an__sentinel": {"doc_hash": "87fd3c48a1237aa21903b44ed986bf66ad622b88144e834b5d5fb88f14e03483"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals__AppCtxGlobals.get": {"doc_hash": "30b208740efa549cdffdbea90bb09c68d4ede4b0fd42c0ece3dfa3d9f24fb7bc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals.pop__AppCtxGlobals.pop": {"doc_hash": "5316c3403ddd49d774c7f518c44f009f9f2dbe4e2e6cb4ef38cf801caa9b3659"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals.setdefault__AppCtxGlobals.__repr__": {"doc_hash": "19e10a2fe09ed320d8f08ab2db428cadbc751778fc1a6100ccc07ea572f2b61c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_after_this_request_F": {"doc_hash": "b3a3cbb28a589917f24603d10c1b036d44acb4491e52fdab1df59cb9b1e24a69"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_copy_current_request_context_copy_current_request_context._type_ignore_return_val": {"doc_hash": "99ac0b64a95abc322a8be4abfec7889563281f4cba429c1d0369318f77f210be"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_has_request_context_has_request_context": {"doc_hash": "a395a253a7a23b669fccd8142d53571b209d16a011e605b9f7d81f321b59757f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_has_app_context_has_app_context": {"doc_hash": "6e2784af5efbcb6da81d8bace49e4b234e0d4b22efca0dfd155a05a876c84ea8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext_AppContext.__init__._Track_nested_pushes_of": {"doc_hash": "cd549968e1af63b5db1cd26e4dc09d6024a8e9c435e8a53f094b899a6099974d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.from_environ_AppContext.request": {"doc_hash": "177481ac85a83244cfaf513bfd93324eb0d64922633fd3d2b13ed1e7ce591f2a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.session_AppContext.session": {"doc_hash": "d2a7697985debc0e1578e2c5cb33ac2ae9f8ae50b86b6159990ddd0529873ce3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.match_request_AppContext.match_request": {"doc_hash": "24eb1a5d34dd5b943b6d1bb03a8ebf33dd49e0041eeccb0c8fdaadf387d5f7be"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.push_AppContext.push": {"doc_hash": "6b7a4712ba49f183b6e16d9fbe0b788ba9f74f4e6de52760b318c38f6b1c7f77"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.pop_AppContext.pop.try_": {"doc_hash": "dbc6b92a74a12c93c9cb71046f1b975355f037e4ae30cd79ee68ac2a92c6d84d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.__enter___": {"doc_hash": "7aa64b2a2293da175b7959e2d6716a92f349b843629dbb722eb4d7b0e5d1a3be"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_from___future___import_an_UnexpectedUnicodeError._Raised_in_places_where": {"doc_hash": "6a07a9f0807bfcb095ec1ec0125748db9453624126e8bb44814500c789bdfdad"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_DebugFilesKeyError_DebugFilesKeyError.__str__": {"doc_hash": "9e1e9d6264e5c07e038b645f0cd6621a4422d19ae0e0bce8d7d95454faffc38f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_FormDataRoutingRedirect_FormDataRoutingRedirect.__init__": {"doc_hash": "9736cd02a28f6e754a9b4e19940c54fc688dea1fabe5642b8512da907079273b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_attach_enctype_error_multidict_attach_enctype_error_multidict": {"doc_hash": "1d5b13ed425f314a191c1f88594778cca47445d07f21a755599bd396e0282156"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py__dump_loader_info__dump_loader_info": {"doc_hash": "3d2de41487a8aa87570cdc467344006a38004a810b578b7f87302e6cd7eda83d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_explain_template_loading_attempts_": {"doc_hash": "e86aa1224667151a02dba24e56dc94077f74dee9eeb32e66e242bc242639594c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/globals.py_from___future___import_an_": {"doc_hash": "4261f8aa8387f414679616e4ea396e618c3931b5b1768ee01c16cae5219e7ae5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_from___future___import_an_get_debug_flag": {"doc_hash": "6043fcde57776c060beefea9ef8fab23671c28d9a12d11f9d88ec34b06ea8bfb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_load_dotenv_stream_with_context_3": {"doc_hash": "c08ea674ecfb4273e7746cd4208fc1e5af950300d23f47b6bed561635cd68deb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_stream_with_context_4_stream_with_context_4.try_": {"doc_hash": "08c55b016f82871b2f023866cd322cdd415e89a45aa1b38c31fb3b3d628bf58d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_stream_with_context_4.generator_stream_with_context_4.return_wrapped_g": {"doc_hash": "53dd2bef05ab14092e153830bdb123a2dd36e6de066e27942ae89120468b23b0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_make_response_make_response.return_current_app_make_r": {"doc_hash": "a3e1ea8226d2c692f33ae19d9ccfe89851b828f545ba629240673b0f3f2214fc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_url_for_url_for.return_current_app_url_fo": {"doc_hash": "b23b09d3dd96daae40ab411a1aea3117a5933a05d1c5a7aacea2723f8d20687d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_redirect_redirect": {"doc_hash": "452a58fe96b135b09cd14030463c77adce7df39587c7a52cce58fb0edabcf3ed"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_abort_abort": {"doc_hash": "4878288ac17c00f92f3b4475c4d1c0b0760d61bfdefcab0798cf8f81e234f681"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_template_attribute_get_template_attribute": {"doc_hash": "c2277210ee48e33721619baae311521d01369ea54596577a5b48928a2c456580"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_flash_flash.message_flashed_send_": {"doc_hash": "75d2b6116940036f9eac5992eff2b644ff1d0ef70f3a8347e0a44498b2911298"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_flashed_messages_get_flashed_messages.return_flashes": {"doc_hash": "a555daf25e2efdd3427d413aa3985bb0f76239efb33a8401035b61a8043c60f3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py__prepare_send_file_kwargs__prepare_send_file_kwargs": {"doc_hash": "a8ef38fcbb64a6f93c54584c2ede9d80c5503149a598ad33ad2addee52c0a0a3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_send_file_send_file.return_werkzeug_utils_sen": {"doc_hash": "6b4531df584da20b9f777b69ebce0aa86c88dbef5a1b8fd68747dc070315b821"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_send_from_directory_send_from_directory.return_werkzeug_utils_sen": {"doc_hash": "f1a7dd956fd55733d941735497315404a6ae2bef4fca6da37f81c5ed08dea9b1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_root_path_": {"doc_hash": "2b5f8f4edb94d2ebf6319019ee45c7278d87d81b76d75f0cae4ce7cd1582590b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_from___future___import_an_dumps.return__json_dumps_obj_": {"doc_hash": "5668f9556cf7f7359090a66f8d012c1300f8a49b7ecfcc542918e9781069f1dc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_dump_dump.if_current_app_": {"doc_hash": "e9782806c1802ffbbc91c5c2453969901843947f69d2f1a664d31fc79f00a244"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_loads_loads.return__json_loads_s_k": {"doc_hash": "7a14f525b5993d4281a60cfe6bbcbf7489048a4529c8c9831f6579b824a6fb3e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_load_load.return__json_load_fp_k": {"doc_hash": "21125a6dafcead34eb639d2c56b8e7df51cc8137cec50cbcff87663022797b1e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_jsonify_": {"doc_hash": "1492d9a282bf43d4232298e9f21e93fafd95a2dac07b5f8388ae04be47c80f73"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_from___future___import_an_JSONProvider._prepare_response_obj": {"doc_hash": "262a71b6a2f0c02eafc15d36f13e0c7a33370e27e8aa702ff0e757913b86111c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_JSONProvider.response_JSONProvider.response": {"doc_hash": "9d38b7906a9cd72f171b8fe2127904846bb5510cb3c35a0c771ac1a094ae22cc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py__default__default": {"doc_hash": "c01461efa329cce387af5be77fbb706f6e55076942117e04f241c8902c077e79"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider_DefaultJSONProvider._The_mimetype_set_in_m": {"doc_hash": "865bf06ee32656b94111c1103393ebbbc95aaeb37ea57ce698941e1c6b26d101"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider.dumps_DefaultJSONProvider.loads": {"doc_hash": "a0427b45fd242cd113b0470906d675a462be6ab1b406677157f039cd257d7aa9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider.response_": {"doc_hash": "2b2677dd9375087087e60ad7af8a5b007fff9933bb4af283205084332b462af4"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py___loads": {"doc_hash": "e8a84d67ab340d7f53c6fa687a7e6a8cba01d057aa691f132b84b7cd70b345b3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_JSONTag_JSONTag.tag": {"doc_hash": "4a9ec6a5464e60a14bbc58e1c9cc614b86b7b6101c8ccfcac4a01db66607ebec"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagDict_TagDict.to_python": {"doc_hash": "d84cb8ada277181c75ab39c6bed9c2a49eb3318ee1347f88f93143cba8ff1f61"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_PassDict_TagBytes.to_python": {"doc_hash": "82074297bc06fe75cf3798c25e057c35d30aa4f15024ad9c1b599b6404b6465e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagMarkup_TagMarkup.to_python": {"doc_hash": "13c594faa4fa2e0b6d05df9ba5e6dcf6fdeb3238e4fa10eb5502247709cfff82"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagUUID_TagDateTime.to_python": {"doc_hash": "1a1cbcbb1e9850a41417d466039bf9c64193e3d3cae93c6eef66c71ff70ec186"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer_TaggedJSONSerializer.__init__": {"doc_hash": "445ad7e909126131fd569b6f9587437e805b8b6e01f4f44af419f699f1d327e5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer.register_TaggedJSONSerializer.register.if_index_is_None_": {"doc_hash": "9d80ddbbea3aa818ef85461e146e2538dac9d5b1d486e8e94dde387e715c0a95"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer.tag_TaggedJSONSerializer.untag": {"doc_hash": "b6b66db829529edf881c2744b8f254dfab7aaa558a9ffb167282b7a21930f2ad"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer._untag_scan_": {"doc_hash": "d821a9dbb3d1be7cfedcce2982e6055a81174a64e93d5a474736d5defdd11e79"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_from___future___import_an_wsgi_errors_stream": {"doc_hash": "89ec3d6dfd95f3ac49aafbaef645d37130e40f01fb9eef443379aec505e35113"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_has_level_handler_default_handler_setFormat": {"doc_hash": "0ae860be6aa20ea4b05e89885630e05193a13ae91a0de4ab5cf03372bf155453"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_create_logger_": {"doc_hash": "34e893197fc20777c390050c58cb70dddddcd04fdea637e2162928c8c1e5288a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_from___future___import_an__make_timedelta": {"doc_hash": "89767fc5b413fc36552dac68964f6da07b5c466a111f44eae8e1482718644f49"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App_App._The_flask_object_imple": {"doc_hash": "ea02c8cc32bd33d6e4d9966cfbaa68c22f10a95a63da5d48c6d7885712f5da72"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._The_class_of_the_objec_App._meth_create_jinja_en": {"doc_hash": "9c3adec84b81b276e914025c888ae42ed84d7aa195175591f569f970eb10954e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._the_environment_is_cre_App.response_class": {"doc_hash": "505c2885d8835c5db7810bc3794aaaf106bf26074a2b2c00528904b0dbc03cbb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.__init___App.__init__.self._got_first_request": {"doc_hash": "d9b32ab266cffea38179cc02274950b35479a02426f161168d89e894c6260b42"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._check_setup_finished_App._check_setup_finished": {"doc_hash": "0e88325c8a63437eda289c1d59c5097e26354a485eab4853c5d39b0cff690bde"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.name_App.name": {"doc_hash": "0ab0b6f8e5c5469523ccd2886bbf0041f62287736272a4c032df00485886d542"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.logger_App.logger.return_create_logger_self": {"doc_hash": "0cbf1edca2c5d76e95bc84e51ca1311ffd2528bffb73c9992c6785afece7fb66"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.jinja_env_App.make_config": {"doc_hash": "a944807a540814a0936e315aa0d540c668f0213b4975b0583414d74ab8cc7429"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.make_aborter_App.make_aborter": {"doc_hash": "373e06cf81fe17a96d781c5d37ede6346e207236cce6da8ab36a6487e76cc344"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.auto_find_instance_path_App.auto_find_instance_path": {"doc_hash": "498e18f4fd0f400ea3b970763eff0b744fbd467a7d69ce61bc7fd5d14791f46d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.create_global_jinja_loader_App.create_global_jinja_loader": {"doc_hash": "911ac3fc877c410169c957ba6487720bd6e6464844a3d5eeb01080f54414dd42"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.select_jinja_autoescape_App.select_jinja_autoescape": {"doc_hash": "a8eeed12cf482df802afa50a6a52f3490b561ac827ffc1f9abd75a9153517653"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.debug_App.debug_11": {"doc_hash": "866bb55621c219352738ccf7996c0a8e298cd2a0a595ac1ce07476dfc9c3c2e9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.register_blueprint_App.iter_blueprints": {"doc_hash": "a51359048a8df809b312c92524d69282c283e1341e971908946a65fa9222031e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_url_rule_App.add_url_rule.if_view_func_is_not_None_": {"doc_hash": "780e546f45697a49e3d04162b556bd036e6a26b2ca6f6c28ea16f3470c6a7000"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_filter_App.template_filter_17.return_decorator": {"doc_hash": "ac865fa5c3b118d3e18b1c189508393814cbe79fccec79eba3ec21ba5d5e6a9f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_filter_App.template_test_20": {"doc_hash": "f43e46d6f5897d9658fcecc0367454917278948f52237d13516d53035a0ba65b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_test_21_App.template_test_21.return_decorator": {"doc_hash": "0b84984bb95b526b0c970b649de0e0ac3778dba7aeb9e07e518d81571574fe6f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_test_App.template_global_24": {"doc_hash": "bfac324986f60484689c2d427f2af1e1774d88489c6f666a0ffafae85f05637b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_global_25_App.template_global_25.return_decorator": {"doc_hash": "297f999d0e61a0909fd2fe50efe1e05f3400f495554db6a488927b2c0018d269"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_global_App.add_template_global": {"doc_hash": "de4a81e73ae42d2bce624d0d8e5a4708b03d971d116366c6747697af148a7576"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.teardown_appcontext_App.teardown_appcontext.return_f": {"doc_hash": "2ebcf2b7c679e72418edf6995008c29afc1a56bc49d7974439a62a787f6adbab"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.shell_context_processor_App._find_error_handler": {"doc_hash": "b6252ee997f0f3a0e704e10d43a1faefdb458c985eddf2eae5ffc8a5a3255a10"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.trap_http_exception_App.trap_http_exception.return_False": {"doc_hash": "9397c44acd050465274907df688d110467b5e648b1c24a89bb4f0ee62fccc7f1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.should_ignore_error_App.redirect": {"doc_hash": "eab396e2992948c555f93f96603ffe567b55337c5c88eca15d39a8b5aa58b78d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.inject_url_defaults_App.inject_url_defaults": {"doc_hash": "d56aab8971e69b9e3d4b5c99afb70fa4392a43221cfb0f2b90244d8874c93187"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.handle_url_build_error_": {"doc_hash": "42c7e3744f598fff18cea81e477c801ad54830f92cc845636075166bf6ebcbe3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_from___future___import_an_T_url_value_preprocessor": {"doc_hash": "24e95a22e092bb9ceb2cee18774858199edd86b4fe6c967ab7f46ae1a61c5c78"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_BlueprintSetupState_BlueprintSetupState.__init__.self_url_defaults_update_": {"doc_hash": "78f1d9ff8f115d3f39c07526d29b31207b4ecfb62a780ca41a6307da78b6f32d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_BlueprintSetupState.add_url_rule_BlueprintSetupState.add_url_rule.self_app_add_url_rule_": {"doc_hash": "c4185a769a46363a2a9c45f035667a554a8b89cbf6a437d8e1931c869db53ba6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint_Blueprint._got_registered_once": {"doc_hash": "63bfa3f1a44f6e199dd97328171b8fdb8bc279f457a629bdb6f218252f7101f2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.__init___Blueprint.__init__.self._blueprints": {"doc_hash": "7400afa53b1bebedaa535e211f61ce5386c2d0a4cc9bb2f7f576e06b9b5c706f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint._check_setup_finished_Blueprint._check_setup_finished": {"doc_hash": "ac35c7940eed8db52a517efcc14ff5776250d40692ee6edb87a172b2d60cbd9d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.record_Blueprint.record_once": {"doc_hash": "a3e04095f0f2c67803a176d829d54d78f3e05b9f9151a7659ea767c9ab005286"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.make_setup_state_Blueprint.register_blueprint": {"doc_hash": "006d56f31346f7cda77b13541f15b7bb3b6feabfab26025960269dbeb3c35745"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.register_Blueprint.register.if_self_cli_commands_": {"doc_hash": "b1b3fc6fcea53b219a4f9f060494a04519caa1318dd747c09ccb6eae37cc70d4"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.register.for_blueprint_bp_options_Blueprint.register.for_blueprint_bp_options.blueprint_register_app_b": {"doc_hash": "a9ff51e10e839f76d7a2c7a1c66e7f86b5c22558ec1f6331c994ec3d83a6d7d1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint._merge_blueprint_funcs_Blueprint._merge_blueprint_funcs.extend_self_template_cont": {"doc_hash": "0f0f2884aa412dd6a1f5d0a74ccec4c629c963e22a1e8c3ea6bbf200f7f6b8f3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_url_rule_Blueprint.add_url_rule.self_record_": {"doc_hash": "8eb8d2da65ff445cdd87438a8f3d6a61a29a1dfcf6ed7ed4985051bb60b5a11c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_filter_Blueprint.app_template_filter_10": {"doc_hash": "d83fa18ea6ae26488f8d8128ba0d0968deb398be3be15ac80dee81b97d3e07cb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_filter_Blueprint.app_template_test_13": {"doc_hash": "fd35c1fc3b365bc01cc2939f9dff6a08646289fb43884c95807a87d68991a0dd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_test_14_Blueprint.app_template_test_14.return_decorator": {"doc_hash": "473a2f19e477bfff4e9ffab90433c7ffed39ddaa4173d450c637b3e6df94c95b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_test_Blueprint.app_template_global_17": {"doc_hash": "1125a18a3f319f15abb798840a9c78f4fc12501f81e9f361ade5e38fb5ae70a2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_global_18_Blueprint.app_template_global_18.return_decorator": {"doc_hash": "fcf671694a64e324616fd2b56c7e38043fe23c4be17c6d5f2dfd4219b6b5bce0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_global_Blueprint.add_app_template_global": {"doc_hash": "7d3df5f815cac2a580a5ba637414a53abcc02d96d61991d69932f7206033f92d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.before_app_request_Blueprint.app_context_processor": {"doc_hash": "fa1d052c0ead947038d4c910d2707469d2d5c4c5fc4c6c4679dcbd597b893f1c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_errorhandler_Blueprint.app_errorhandler": {"doc_hash": "9886916ce2e594d595ee8b75e607a1769593aa4cc03abd117f82099d5c0d8177"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_url_value_preprocessor_": {"doc_hash": "67f12eadb4775f2dccb471535208c24aa3fcc6ba667874207f5dc2d6e535b1aa"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_from___future___import_an_setupmethod": {"doc_hash": "a4f237a68a8043dfed7c6e247f716826bf9894d0c44ec5b517a9ddb6812a8f40"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold_Scaffold._static_url_path": {"doc_hash": "7cc97c2c19697991bb544a8228bf555607b8bb35588b789a5f88b5b701d257cf"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.__init___Scaffold.__init__.self.url_default_functions": {"doc_hash": "108662645532d17dddb382503fe756e281d2ccd85d46fafe336a556fe67ee1e0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.__repr___Scaffold.has_static_folder": {"doc_hash": "2bbf467465fac5fadbe2004ca96b8d682d1163d48e62a2e02d6fed46cfd58609"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.static_url_path_Scaffold.static_url_path_6": {"doc_hash": "f863f978c4b7a7d52e5f2e0017888027e805db5fc37eacab3da4a8d6371e4dce"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.jinja_loader_Scaffold.jinja_loader": {"doc_hash": "25c329df6b93496ac9a63097e4eadcf95eb8a7c6b90ac982f6fe8dc9f898a23b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold._method_route_Scaffold.patch": {"doc_hash": "0a8a40ebce3df5f909cbaf95193ac1216eeb9b312b87a1520cf3a893207b84df"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.route_Scaffold.route.return_decorator": {"doc_hash": "4a59f9e78d617d8e25a0773c4cc5da605781cfd5ead7f65d1ffe4acf3a6520de"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.add_url_rule_Scaffold.add_url_rule.raise_NotImplementedError": {"doc_hash": "b9e4b828b164fc88b1c0677623aefec53ef024ad01e01f1b1cb49df07b51c630"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.endpoint_Scaffold.endpoint": {"doc_hash": "4a75215db3d4b3f3ad1c98a36c77dbc81f67409ea8eb1e118cfe8a46c50dc3c9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.before_request_Scaffold.before_request.return_f": {"doc_hash": "f06f4be85f4c6a4de3083046aa552ecd2ccddcf50aee1b2a885e6a2958e9a15c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.after_request_Scaffold.after_request": {"doc_hash": "ab2357d771adde3aea3feb076f53cf7369f10329f2f4ead01d1fc23bf0f13820"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.teardown_request_Scaffold.teardown_request.return_f": {"doc_hash": "bd27c1486a1ad31fc0ebe0f961590bda43374ae5a6c775ec83c3dbeb7d27ac23"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.context_processor_Scaffold.context_processor": {"doc_hash": "40208c40d567ab933fdf4a9ed77195c293b1a0caadb554aaad468cfebfbb9bce"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.url_value_preprocessor_Scaffold.url_value_preprocessor": {"doc_hash": "8ae0464c346a91503b9a627681a9d1dc1ada8366066049559ea876c511150454"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.url_defaults_Scaffold.url_defaults": {"doc_hash": "b858896ebfdf1f9cb899c10e8fe407d8149cec70c04ac4e027ca34363258c9d5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.errorhandler_Scaffold.errorhandler.return_decorator": {"doc_hash": "3148160ad4c73cdefa40adca41ebd4913ecc9a6e8091b851b274554760ce4bd2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.register_error_handler_Scaffold.register_error_handler": {"doc_hash": "a802347231abea04ab8211d6fecdcf40bb821ff856dbd8def6fd1db4524a5cbd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold._get_exc_class_and_code__endpoint_from_view_func": {"doc_hash": "955421e76388cfe41bd687605798c37606dfa812023223bf722c33488b33b839"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py__find_package_path__find_package_path.if_root_spec_submodule_se.else_": {"doc_hash": "02f40208e8fe769b4f4d80f87cc5b0a0abaa0ed0dfa4f2c838c55a794abbace0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_find_package_": {"doc_hash": "45fc902181d80ef31f638470720d31d2974bc66fc66486b1d3412f1401085f13"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_from___future___import_an_if_t_TYPE_CHECKING_pr": {"doc_hash": "d6b20a42c8be2d20afca817166494fff606ece9bf04560fd4c07ec3f7f508790"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionMixin_SessionMixin.accessed": {"doc_hash": "f2f56f32abd3a745af0312b384d0f5923312fe9472ae553a846cd6660d8b291e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSession_SecureCookieSession.setdefault": {"doc_hash": "2056caedcb078bb2f366ab2619f6334a7532f3f062a331b5e70f16af3cac0a0c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_NullSession_NullSession.del__fail": {"doc_hash": "b700839a97f8c1f9755a1e40f168aa95dc8b4468a971fefeb05f1adcab0ab6af"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface_SessionInterface.pickle_based": {"doc_hash": "945d77566f5b295877d2b6e5163fe352748b2d39aaa55e2ea6c3abbaccbe241f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.make_null_session_SessionInterface.make_null_session": {"doc_hash": "55dbcbef2a09d0ef66d9889d5c54cd3c212d769039a971f032304d50ab979740"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.is_null_session_SessionInterface.get_cookie_name": {"doc_hash": "1582fdbdc67ffdc084ffc5ec2b035d00cf09b63ef71efb747ae09fe67c09dd3c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.get_cookie_domain_SessionInterface.get_cookie_domain": {"doc_hash": "2a0d21a62ff3db0fa649060c40ce1798b46a4584279a7e176b3bc958b135c80c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.get_cookie_path_SessionInterface.get_expiration_time": {"doc_hash": "ccdd6e94a93c47b6a628bb7dc25d72f45b1ddd7a48548a6326d5d6e9e614231c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.should_set_cookie_SessionInterface.should_set_cookie": {"doc_hash": "fc75588ab2bf52c453ebc141570b7d2d5d15630cfd09b8130c6088aa62042d04"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.open_session_SessionInterface.save_session": {"doc_hash": "87950a91d6bbd68982ed4095d96a291c273e2eca5938d966817f5118a8a5cb9d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_session_json_serializer_SecureCookieSessionInterface.session_class": {"doc_hash": "a978e5a2127d4a9f09f9fc9fe8ef1ff2530815d4cf6a919e9dff0e5344656d9f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.get_signing_serializer_SecureCookieSessionInterface.get_signing_serializer": {"doc_hash": "15967891b79ede546602ecf57b3e5069ff05fa2104a7495897d0ae3c49608c23"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.open_session_SecureCookieSessionInterface.open_session": {"doc_hash": "89de4f38761e034f75081de6e54f322d50fe2d9bbdc92954f8db174311345e6b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.save_session_": {"doc_hash": "c7d756010835b11d0f2ec139a8c371c765e299cfd6f948992fbd5a64862f05fd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/signals.py_from___future___import_an_": {"doc_hash": "663e8e95c794394b7eda047c6b2757b284de7e7538dfbd39b038f93ade964f82"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_from___future___import_an__default_template_ctx_processor": {"doc_hash": "b2eb37309c0b4e43ee1136d6e730f41a113ceac9ffb1bcdcc74b4f7b9c448961"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_Environment_Environment.__init__": {"doc_hash": "019a6f5b30fd3c7bfd65b65683912c83df3ed1493e9313257c98c42eb3d732ee"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader_DispatchingJinjaLoader.get_source": {"doc_hash": "97563dbaaa18c2d92d96feb102ae3dd0b600a08bb89a03d07fe130e389b7ff0c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader._get_source_explained_DispatchingJinjaLoader._get_source_explained": {"doc_hash": "833e05f136183631ba3632e299aa737608b5f8dfdb85c1faaf5565a85582ca75"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader._get_source_fast_DispatchingJinjaLoader.list_templates": {"doc_hash": "0931cd2ae82521ab3ac9904d290dde38e14c3ca45cca577aed144146860f68c3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py__render_render_template": {"doc_hash": "06726cf07678cb94bcdc579f14aae595f20d63c069d597027cee4a8adf1ef6e6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_render_template_string__stream": {"doc_hash": "5faf456635baa30990659febd2f0d8f896f2221541f03ae9902cdfc515b11796"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_stream_template_stream_template": {"doc_hash": "81e65035a211807541bb07d7058bf874f89a240e47432d88a68b71ceb8fafe2b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_stream_template_string_": {"doc_hash": "d3913fdb57538f110b33ebb1415cd3e3cae14648f648c97f075c1f71d5e6506f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_from___future___import_an_if_t_TYPE_CHECKING_pr": {"doc_hash": "856e731012068042fdf131a3a7b4b599ca64e6cc72f19843379f1be392dc50d7"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_EnvironBuilder_EnvironBuilder.json_dumps": {"doc_hash": "cde38cce31922ff90903982a57b5ba28200b9e72bfb97a9bae5ea3a17e6aac2d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py__werkzeug_version_FlaskClient.__init__": {"doc_hash": "2bee994e8afd292477f7bce2b12ba9fb45463218120ce1e66647da09c6c6a375"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient.session_transaction_FlaskClient.session_transaction.self__update_cookies_from": {"doc_hash": "a69051b93ca652495702b5dee9cdfc5c857ff15597c3c42750f67001f7e766d3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient._copy_environ_FlaskClient._request_from_builder_args": {"doc_hash": "3fae5eef702ce35d79231e06655f4b341deb581fed51e36247072fdae14ecec2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient.open_FlaskClient.__exit__": {"doc_hash": "fdc1436ea1de5fae9376868885797bab33b8df996521e968b96a3d5aeda4cb90"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskCliRunner_": {"doc_hash": "1f68912cefe56c98ff4f026e1af0918bcb1e5f737fe1dbb6070fe2675763dfe9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/typing.py_from___future___import_an_": {"doc_hash": "02e3a7401a4090e2b09aedcb62fd3ec1c6fa85efd1aa1131e8c27761d492f52b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_from___future___import_an_View.dispatch_request": {"doc_hash": "a1967c4e90452786ebcfbb280767fbe3e95a7b399266704851cdef45300dfcaa"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_View.as_view_View.as_view.return_view": {"doc_hash": "c285a1c3352b644c6c1c08d9c8c8e196df0784b0f9a87a91bd31a92d75446474"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView_MethodView._Dispatches_request_met": {"doc_hash": "f4f7afed4344ad2decb2abd02e12e61fd02686f4baa409ab317e8c474e936e6d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView.__init_subclass___MethodView.__init_subclass__": {"doc_hash": "a255eafebd715ecd149f5ac43352af8c8b86af0a76a6ad37982ffa3b3bf3d73a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView.dispatch_request_": {"doc_hash": "abd156012561903efb3b474855c3e1240d9a529b20b18efc73b370351dcdb9ef"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_from___future___import_an_Request._max_form_parts": {"doc_hash": "1d3d07ed535f8918d4ffe65eb5d9d63a2d2be8dd542dd57cecfa109f72f1c1f4"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_content_length_Request.max_content_length._type_ignore_no_any_ret": {"doc_hash": "ddfe3a7534dcbeaa87ea0ce2063a4ba21bcf562f4f8587dddab950c26d5febf3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_content_length_1_Request.max_form_memory_size": {"doc_hash": "4f98732ed747011bb428af23c3163faf17d9042a610b7fc02b78e98b4c65f856"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_form_memory_size_3_Request.max_form_parts": {"doc_hash": "22f3f06a4b800457e3df13560f8b6e6d374f06f9e6fb5f7d70123431a432e38c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_form_parts_5_Request.endpoint": {"doc_hash": "5f676210628bf97d97643c3ab07f64237c5c8f5b0b157cd4cb0bbb39b32c79c9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.blueprint_Request.blueprints": {"doc_hash": "b2b58f2ed07fe0f7a3a5d36320f674a741e85c066b67c35482e0d5aa983d86a5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request._load_form_data_Request.on_json_loading_failed": {"doc_hash": "6a7c34a0115c1aa89037327d7537a9a93b5c1e2959916cdfcf4a8823d2aaee89"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Response_Response.autocorrect_location_header": {"doc_hash": "0d695dfba8119c6323bbea0e54e19a95cd51fa996ebdba6328e9d6a9f962b9c9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Response.max_cookie_size_": {"doc_hash": "e32f2d11fd07a106de4a646c628db94349e0b887ad7d8491edd79bcbf79086d0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/conftest.py_os__standard_os_environ": {"doc_hash": "d9bd285d061e0a85e17016acb939691f62cea8c07afa80edfadf95c27bf8a7c6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/conftest.py__reset_os_environ_": {"doc_hash": "93db597a81f8f302b3617e06b533a31bc6dbc51230c1232fefb7205c4bf4a860"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_pytest_test_app_tearing_down_with_handled_exception_by_except_block": {"doc_hash": "86b2050176f5bf316187170641a8d982245905dc4bf6badd25dcaddbd01c9331"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_tearing_down_with_handled_exception_by_app_handler_test_app_tearing_down_with_handled_exception_by_app_handler": {"doc_hash": "bafc8e573bcd46eb142aa288c7736929e629d82fcb3c5e9e76243d7246badde9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_tearing_down_with_unhandled_exception_test_app_tearing_down_with_unhandled_exception": {"doc_hash": "ac60042eda62c3afddc8f7d0a2529597e1a8927f3d9ee01b30f7081c2556dfba"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_ctx_globals_methods_test_custom_app_ctx_globals_class": {"doc_hash": "a46359376727ebe53fbea5c9f19dde81a6795411fd9842e0d8f1c67b75e58e77"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_context_refcounts_": {"doc_hash": "28f088f005859d8a46071f705b133d922640036960f912918e41bb78103de0b8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/__init__.py__": {"doc_hash": "f5db59ffe953e70aa66322a35845717185e6b32e5c39800a19c66fd290274939"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/apps/admin/__init__.py__": {"doc_hash": "3c9ae5b4cfa05450ed242f3bc3a8bda587aade4bad9993a15819b59b6b252ec2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/apps/frontend/__init__.py__": {"doc_hash": "ebdff88e20b6e63a7f2cc04849056502a55bf06a4df0d794d536cde173249c3e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/app.py__": {"doc_hash": "0bacf44100f5e9e9f4f8cfa011a87cb1e180fcb74871d4b784d3abb5efadeff6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/factory.py__": {"doc_hash": "a3eb1574f47f3f86b5b678d79acb8bd95a3a0d5895d7903416cd6980715a3e34"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/importerrorapp.py__": {"doc_hash": "c82f2a1ac8cb488d25b172de5523de41427933478bd2940dbef82896618a6d50"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/inner1/__init__.py__": {"doc_hash": "4ffbfa1c1bbc69d440ed7128b9ca4c1ff68cb103d1fc14c33d8d70360dc8d8a3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/inner1/inner2/flask.py__": {"doc_hash": "7aa913e76e22415d6dee1b80d2f650646dc8ee2db324aab7e5a6336094c37aae"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/multiapp.py__": {"doc_hash": "03e281574b7605639d84accc5613909e5d03ae7c19602528697f118858937e80"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/helloworld/hello.py__": {"doc_hash": "59088e9a75f64b0a2f19b2f3907e98a8c60f066419b34f44425446a9141da75d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/helloworld/wsgi.py__": {"doc_hash": "3295f438c0b891f44b2a32996b5406bdae95cdac8cdd84807bf1e175d1e890dd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/subdomaintestmodule/__init__.py__": {"doc_hash": "f8a6271b52c00f0901bfc3cd00b52bf32b93afff92975e1fa53adfd4cbae72c7"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_asyncio_AsyncMethodView.post": {"doc_hash": "4abaf37332e643b60ca5a38252bafb91131b3fe2c7fe6f052f40167b34ae7f20"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_handle_handle.return_app": {"doc_hash": "8a9ba2182b0be7cbe5148439002afeac9d4ab8f94ccbfadfd8d814b9fa2ffb90"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_test_async_route_test_async_error_handler": {"doc_hash": "25cb6dc4962fac446043372cecfc9752207d63e4ec718124af3e0df53fdfd388"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_before_": {"doc_hash": "3bd9a8bba958b52a6412b813389abbd2ada6b5695495b87c2694b3f496b1bd1d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_gc_test_method_route_no_methods": {"doc_hash": "226efbf1f1d731d9355a8e4b75d4589ce5e6686305956e2fa3f617e162b815bd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_provide_automatic_options_attr_test_provide_automatic_options_attr": {"doc_hash": "5ae0cc4343dfcc6bf4b0b71ec67249e630ab8974932f88a2ef3969c61a4a5455"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_provide_automatic_options_kwarg_test_provide_automatic_options_kwarg.assert_rv_status_code__10": {"doc_hash": "a536ea0ccc6376d3881f80adf0f7e0b17f029ff7f45021fd9e879814c43afa50"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_dispatching_test_disallow_string_for_allowed_methods": {"doc_hash": "eb17270f3bae5c11b5d802e2844d6b942e97b3d7cc5b31d39fc23a15757830ca"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_url_mapping_test_url_mapping.assert_random_uuid4_in_rv": {"doc_hash": "40cded1d17fdbc48099f5e97d1caabde10df02a2842250291844d348525c7e78"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_werkzeug_routing_test_werkzeug_routing": {"doc_hash": "644046934a5ac539d2e25178064e7e97618b5f229f61bcaa0d53c38dc09b5f99"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_endpoint_decorator_test_endpoint_decorator": {"doc_hash": "d169cb97a33c9ec8db2117797177d5ab0b1bd0305f4e146fdeabd626753ee87b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_test_session": {"doc_hash": "871fc9b90517a2073c7c1e34187748ff28844224fb7730abe944c24945ee2830"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_path_test_session_using_application_root": {"doc_hash": "7af9afa8d7c35eb342cfdc38315b2ef8e6aa39bf7a7708447a4103e9331d58a4"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_using_session_settings_test_session_using_session_settings.assert_partitioned_in_c_11": {"doc_hash": "61c360b9cfa8201382de46343f61e75cc43e7df8245e1cae2bc2eb29cb78912d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_using_samesite_attribute_test_session_using_samesite_attribute": {"doc_hash": "a35a7273a91d604bb48cb09c0f51dd363c2df21a78e9451c52d03e7b08d10f22"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_missing_session_test_missing_session": {"doc_hash": "3eeddabbc8986660373232157a1bd197badc839de83759a5f96613079aa3ee56"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_secret_key_fallbacks_test_session_secret_key_fallbacks.assert_client_get_json__4": {"doc_hash": "e17128a5323a79740a255204f677dd107b0f46fe50f5e5abd2d8e5f39efee86b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_expiration_test_session_expiration.assert_match_is_None": {"doc_hash": "1aa47409305e40f5460111e1f584b7b36234b490ce3dd8ddb693d5a9e4b3c7a9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_stored_last_test_session_special_types.dump_session_contents": {"doc_hash": "53e9a9bdc2e6ab26432033b408bd93a37f968eada678342945567960e214300f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_special_types.with_client__test_session_special_types.with_client_": {"doc_hash": "9bfa6e2a4937ba28cbb9deb777b292728f8c59d1779c6ccd628da6c8a2a505b8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_cookie_setting_test_session_cookie_setting.run_test_expect_header_Fa_3": {"doc_hash": "807aa4bdcf48fa53759c0883fdd535e50860c05802d9259a77dd3b55697b0cd7"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_vary_cookie_test_session_vary_cookie.expect_no_vary_header_": {"doc_hash": "c81cbca3eb3b253bfd9ac736f34db544a5e967080c3ea135aa444f381d8df59c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_refresh_vary_test_flashes": {"doc_hash": "3273f857335592d98edcddf4fa2336320740bb7c5f0abb8ce85e0007c961274e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_test.client_get_test_filters_7": {"doc_hash": "520639b04932c6b0996eb3f446a533b12097558cda85d97a21559a8d435a4041"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_processing_test_request_processing": {"doc_hash": "0d7eda43f841bbb9ec8bf03652f60f4c666a11b0a86a6d144b0046e74f96cecf"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_preprocessing_early_return_test_request_preprocessing_early_return": {"doc_hash": "da586e3d0cb983f39d4bc07da121ebe8d93b8561c80217dfaf3c0d25815ce8a6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_after_request_processing_test_teardown_request_handler_debug_mode": {"doc_hash": "5cd6e531907d6b9ca22a1150a8815414b7b8a26b9884c31c79c30f59ac47a404"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_teardown_request_handler_error_test_teardown_request_handler_error.assert_len_called_2": {"doc_hash": "e2c947a73db5db1f080981414c777ecc7e39c9095159fa022d509dc253a23b9a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_before_after_request_order_test_before_after_request_order.assert_called_1_2_3": {"doc_hash": "7d442102fc8709e342657de5055a2cd1a1bac3cb0767fa18a96dac1e1846fc79"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_error_handling_test_error_handling.assert_b_forbidden_rv": {"doc_hash": "b8f0710faa7ae44b22e6f3fc3535b989757caaf96fe018509d96b5fc7155f79e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_error_handling_processing_test_error_handling_processing": {"doc_hash": "6df4130e3633ce6eaacc2bbd0761f0f932c570b0da4d95cf6cc779fdcaa17385"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_baseexception_error_handling_test_user_error_handling": {"doc_hash": "29fc29427ee7c3a69ecb41a069883f9fef6da9980886acb2ff11c0d0ba45a0a1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_http_error_subclass_handling_test_http_error_subclass_handling.assert_client_get_3_d": {"doc_hash": "f10abba30cbcce94c183d68b2ad182d00818d4ad330477de64d85d0952bd6988"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_errorhandler_precedence_test_errorhandler_precedence.assert_rv_data_b_E2_": {"doc_hash": "f602acfe32488955113a8ec7327f2f2f0e4d43f6073b7841936cc1a87beb78ea"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_trap_bad_request_key_error_test_trap_bad_request_key_error.if_expect_abort_": {"doc_hash": "e5d69cb0b4a1777f53274b4e3f37083669dfb64ff3382fd13f391070a3b6fb36"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_trapping_of_all_http_exceptions_test_error_handler_after_processor_error.for__trigger_in_before_": {"doc_hash": "8e0c6eb780e47d464176b3d8b9d450b010260e7b616fed61c196595dee3d28eb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_enctype_debug_helper_test_enctype_debug_helper": {"doc_hash": "eb06abe4d9ff298973415b24e6910fc442f813d6bf638b3f21614c2d96c13bff"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_response_types_test_response_types.assert_rv_status_code__25": {"doc_hash": "004abd0d363a87b406ad0443b0c5dc2b64182ed1470d08963eeb9be0fc93015a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_response_type_errors_test_response_type_errors.with_pytest_raises_TypeEr_4": {"doc_hash": "f399e7eb4ed8d1f561c9c1f135eb912a3ba9715079642bb90ce2146e9a6b0699"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_make_response_test_make_response": {"doc_hash": "edec91b9491184142a09181e95d540d6633aa76ec8d3a9754e4585f941d878e6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_make_response_with_response_instance_test_make_response_with_response_instance": {"doc_hash": "64894c9c094b5329b4ac6f1643c96ba252303e193485b8bd6155a18125df1380"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_jsonify_no_prettyprint_test_url_generation": {"doc_hash": "c6a099c204213179d034708cd264aeba1c52a7a7e87ed3817a8c75f23156e4d5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_build_error_handler_test_build_error_handler": {"doc_hash": "86ad1aa2e2f11344371fb6fb71965ff842b05ac0a32b183ccce3768be80e6e36"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_build_error_handler_reraise_test_static_folder_with_ending_slash": {"doc_hash": "228798bca9f4c8405c6f86c6253bc894154358c50c27b5189f1e2182cad1930b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_static_route_with_host_matching_test_request_locals": {"doc_hash": "4a8d74d630e6671615f94bbab07372333f0959f756eb41602310d6634ffd3920"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_server_name_matching_test_server_name_matching.assert_r_text_expect_x": {"doc_hash": "3b9a011b4d91aedae332d41b971b9e8110b33fb1cd53125d2a9c05b09ba0f39a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_server_name_subdomain_test_server_name_subdomain.assert_rv_data_b_subdo": {"doc_hash": "31eff5191a4dfcb2ea5a53df5ce08c8143087f0455965f256242f33ffe347607"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_exception_propagation_test_werkzeug_passthrough_errors": {"doc_hash": "6f5af8e719965e69bd83f48bef36eecff107330290bb2a778a4a62779971e434"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_url_processors_test_url_processors.assert_client_get_foo_": {"doc_hash": "b50ad507f370d9b9f146dd8e9f9ee946aeb22ab88331edcd5335195f2f4446df"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_inject_blueprint_url_defaults_test_inject_blueprint_url_defaults": {"doc_hash": "90b1a05625a56fc7839e0b4383989ad997d6fb0dc17d29d6b43da6f3fb90ae2c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_nonascii_pathinfo_test_no_setup_after_first_request": {"doc_hash": "186255c39ff78e0acfcdf4d3e6804f5b1c25a234d06e716b12153a30db4f1edf"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_routing_redirect_debugging_test_routing_redirect_debugging": {"doc_hash": "57279112749fe21d8309d143b64b007bfe240e284456b6cb3f083ff997119af9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_route_decorator_custom_endpoint_test_route_decorator_custom_endpoint": {"doc_hash": "7fa55d916bfa536607884b760563bdd72abcbe9757af607d414a39bedce98277"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_get_method_on_g_test_g_iteration_protocol": {"doc_hash": "7f60898cfd4371027a9fb043a385f9f37529c437c2dbca53748d74501fcb7cbf"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_basic_support_test_subdomain_basic_support": {"doc_hash": "86c7eb592b96f0873b2cd02c8fe9b0f9c23e0a94c7ac62fd60d96a4ba17adda1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_matching_test_subdomain_matching_with_ports": {"doc_hash": "ce1dcf21bd60481d68dd82eef57b498c8b9ffe9f8595e9f27ae4b9288135d7b0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_matching_other_name_test_subdomain_matching_other_name": {"doc_hash": "f08de62fb36963feeaff8e9f78544089996e629dcbf468ebde4aa0391c91d21d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_multi_route_rules_test_multi_route_class_views": {"doc_hash": "73de2c35dd5e2207fe84c128caeea9aa4933349010c8cb06c065775e97769a57"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_run_defaults_test_run_server_port": {"doc_hash": "c15b247bb4878fc4c87be75fc915231b7eb44843ad43f357a28ca88fec791799"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_run_from_config_test_run_from_config": {"doc_hash": "e5d12158522f5b13059802b9b002a960f6333165387975f3c72adc018361268f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_max_cookie_size_test_max_cookie_size.assert_len_recwarn_0": {"doc_hash": "40bea1a7dfdb5697d0a2edc90133c8128341c29919d11f31c4a27fc1384c903b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_app_freed_on_zero_refcount_": {"doc_hash": "cc911470b2ff1f47ceeeb78a8f4fa478faf0249e757f73090dec27c26f85b605"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_pytest_test_blueprint_specific_error_handling.assert_client_get_what_": {"doc_hash": "06faddf6034ec3c48c5d45d4a0cfcd23d55757a1578d8781e4a3dbbfe327ee6c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_specific_user_error_handling_test_blueprint_specific_user_error_handling.assert_client_get_funct": {"doc_hash": "181aaf2fe63884e41f5a868dde1722aa8604da13fd56fa509db2bb0985aa3e4d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_app_error_handling_test_blueprint_app_error_handling": {"doc_hash": "f74313b021c4a182f8e63f2c01cd50bd8ae57be1e313fca3c32a2ede8ab11716"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_prefix_slash_test_blueprint_prefix_slash": {"doc_hash": "7fd428c50234df4240f067964aaac01a20782120480b4aeec8518c5679e5ab46"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_url_defaults_test_blueprint_url_defaults": {"doc_hash": "935e6eb71eccf4d724b1a42c8d49e9912b66abc762204f6ed2301570875d4fa5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_url_processors_test_blueprint_url_processors": {"doc_hash": "02813bb3708d93f60c732891414e7dd6e5e6972b4a9aa052e71062f8ad5bc4fa"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_templates_and_static_test_templates_and_static.with_flask_Flask___name__": {"doc_hash": "79d03d5e389aae64bf106ed1e074581c34d4589698edcb27e54651faf56dedbe"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_default_static_max_age_test_default_static_max_age": {"doc_hash": "0533f4845960f510ac53fa697d0821d15e2f40b7465b8a4835b2de93247d061f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_templates_list_test_empty_url_defaults": {"doc_hash": "97aa52b7e61ec2aecf0bf55e84afdbb5753bdb3675a20be202a5fe4a5147c1f8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_route_decorator_custom_endpoint_test_route_decorator_custom_endpoint.assert_client_get_py_ba_4": {"doc_hash": "cc7e5a849e05617fd9bf3f346868da403757f8f2ac7b6d744606f3236bb7e10c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_route_decorator_custom_endpoint_with_dots_test_endpoint_decorator": {"doc_hash": "ef18c8774fc5603454ebac7c23cc3be0ed5af6ca914315473e7a5ac1a4d10d39"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_filter_test_template_filter.assert_app_jinja_env_filt_11": {"doc_hash": "d131dfa162fd3be45b176d152fdf29a2f0c9aef3876cdb25b3ff36aacafe2c77"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_filter_test_template_filter_with_name": {"doc_hash": "ec33150e9050bfca9ee1aacb821ece6191e3763653df8c8440b71332ec5b7be0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_filter_with_name_test_add_template_filter_with_name": {"doc_hash": "81957b9ab521c8e80220c91509742d2233419e16b2778d032518cfafaa13d467"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_filter_with_template_test_add_template_filter_with_name_and_template": {"doc_hash": "b4aa1591b0701e2afa65e9815d4a102a81ffefbfdd6be0dc4c599fb61b4bd5aa"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_test_test_template_test.assert_app_jinja_env_test_11": {"doc_hash": "3d23376df72374100fee42afdc6be15d9b18c3f041de4de1c5ca8eaf62e57ebf"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_test_test_add_template_test_with_name_and_template": {"doc_hash": "2c692486894f610805c1cfdfac58813c93009efb2a6ecdd447e88c40e07e6134"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_context_processing_test_context_processing.assert_b_43_in_answer_pa": {"doc_hash": "93d8d636d8d50508a7f98549a243cf25f5d27bf53de5ddf69abcf5178fd35625"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_global_test_template_global.with_app_app_context_": {"doc_hash": "06f1e0be380cd4d544c25bacbf85e1d3f0d09ab097793aed6e035c6fee51ca4d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_request_processing_test_request_processing.assert_evts_before_": {"doc_hash": "06fddc12f6368e126649de1e5c6f85ea2494f693b5e04590e35b674754269993"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_app_request_processing_test_app_request_processing.assert_evts_before__4": {"doc_hash": "c80e92f754881b88dcc39f70004ae5703bd90ce2a53e571f53cb5993af1a7ffc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_app_url_processors_test_app_url_processors": {"doc_hash": "9099077b4faa509f6d18237ec2d123af69cdbb51a177c6f2d878b039cf88ae43"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nested_blueprint_test_nested_blueprint.assert_client_get_paren_5": {"doc_hash": "e1b6c7b3fcf207f29769d2d83b67714e0c9b6c0015cf1a5f0ef6d0dd8a9058b4"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_child_before1_child_before1.assert_client_get_b_d": {"doc_hash": "7a8ac8dd96798df262a235337460f70f0d8950917bc6f163533d221aa1df13cf"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nesting_url_prefixes_test_nesting_url_prefixes.assert_response_status_co": {"doc_hash": "d428674f5dd601143c632c3b4d45ace060663b1bd4288fa9ce27ef714ff8c397"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nesting_subdomains_test_nesting_subdomains": {"doc_hash": "c1291239647975511af22d32a8e17540a2c7970b35d6d8166b65598f13a11be6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_child_and_parent_subdomain_test_child_and_parent_subdomain": {"doc_hash": "aee2eb07316737c472f40db08fe61b527687d64484fbbbfb4e7b4be9fe8095f5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_unique_blueprint_names_test_self_registration": {"doc_hash": "1057aef20ecb7d67d8fef4ddc852634f9077177ad4ff0efe8862c6f16e702e12"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_renaming_": {"doc_hash": "8780421edefd76cfba6682a065cb32c6e8b01728a6bc546fc4082b8f1cd106bc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py__This_file_was_part_of_F_test_cli_name": {"doc_hash": "9d81078fa6efd50d40824760f98fce3f2436bbee436d3e736c9f15f8ef8793fa"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_find_best_app_test_find_best_app.pytest_raises_TypeError_": {"doc_hash": "233487a3f828e2b16593a3a075ba3dfa17146ad3496f62c2ee7c1f2c342bf75a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_prepare_import_test_prepare_import.assert_sys_path_0_str": {"doc_hash": "acb4ffb86b1a9be3e7b50bd875d6e785264da7572a36f66ec147dfcedeec3c7a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_test_locate_app": {"doc_hash": "462f721222635eff63365a4ab4fc5acde6f3ed4a640bf855c702e9a6d73dd087"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_raises_test_locate_app_raises": {"doc_hash": "82bc84cf30e47ab4ecf8b264a1ad44e1c54d4f6bc06e9ec91e87b166af3ae73a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_suppress_raise_test_get_version": {"doc_hash": "bd5044f5d84e82cc02e8aebdd94fb5767597f746c273739d87ca85b76f729a3c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_scriptinfo_test_scriptinfo.assert_app_name_testa_9": {"doc_hash": "8e9abb456ec3c67f648996ef1aab35843c4685f39ea2ed2c2e91c6069ae80120"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_app_cli_has_app_context_test_app_cli_has_app_context": {"doc_hash": "e3c3dabdf49c7b42996d8f62668e63d1b89f57f74bcad4f043a06826adee5edc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_with_appcontext_test_appgroup_app_context.assert_result_output__3": {"doc_hash": "ce521ae8d35446040d85fb840b9232f89bb8c160fd2a40f286827f9b6aa81992"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_flaskgroup_app_context_test_flaskgroup_debug": {"doc_hash": "9481e09f4fa0b9440f52a72377a4e88ccd4a29b1174429fafae4ecea1c42ca21"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_flaskgroup_nested_test_help_echo_loading_error": {"doc_hash": "cbe3f93577739ef91cca99e350d132e1ec3af48e78247ed0727f89e0b5c41b1c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_help_echo_exception_test_help_echo_exception": {"doc_hash": "9aef7249234526d077a4f8eaf60fdd01a868d421f23d793fc6f8273e1dc8b45a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes_TestRoutes.test_simple": {"doc_hash": "7811a940ae661146b50b232c84d6c1e28e0fd79dd19f74cfed4bbc100b9257e5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes.test_sort_TestRoutes.test_sort": {"doc_hash": "44ccbc095a74a0c63adbb3a7032740e377488121debaaff97248407b357d4f8d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes.test_all_methods_TestRoutes.test_host": {"doc_hash": "ef03ac252cb667623acf94b91f9881da364af82d7b968e5c4555a14130b3fbd4"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_dotenv_not_available_test_load_dotenv": {"doc_hash": "a153aaae46bac9c948c7d503fad96e54dcbfaf9fa7786db436fb2b676ffc7b3d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_dotenv_path_test_disable_dotenv_from_env": {"doc_hash": "47033e860c475f55abdf409aea454d4452356618430e412d3776d2999a3f9ffa"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_path_test_run_cert_path": {"doc_hash": "81b1d36509ae4d13b5a7ecc12b5637193b708a0104cdce5f8a4605313aae9e3e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_adhoc_test_run_cert_adhoc": {"doc_hash": "cad15f588b88fcb954d488b8159e9f0e80b83c914837fba1ddc13eac1f9cb300"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_import_test_run_cert_no_ssl": {"doc_hash": "f5f791e7e4e73b68393dddbd4b9fb324f68f984eb9b302b0be6d73ad51d9326b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_cli_blueprints_test_cli_blueprints.assert_late_result_in_r": {"doc_hash": "9e1a084ddbec4e85fc15be260a90c763d1680efe8fb7183d5fa808f5937c5938"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_cli_empty_": {"doc_hash": "291ce22247a0e1e73d1ecc08fc0cfe7736f132ab66868ba2fb5c3d5e3147f7d8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_json_test_config_from_file_toml": {"doc_hash": "548602354e12e305e3fc53e57e34c33aa1f12d4836222760fb84f853f2f9a3dc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_prefixed_env_test_from_prefixed_env_custom_prefix": {"doc_hash": "45b109e25123a4788e88669d508a57250b25f99638e4f8ebf19d61775cf3f73f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_prefixed_env_nested_test_from_prefixed_env_nested.assert_app_config_NEW_": {"doc_hash": "a486fee6fffc4682ab316fadb76fd618a89c81d0bd6149d3b1f0320171012f18"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_mapping_test_config_from_mapping": {"doc_hash": "bb32ee208eb6577b8990fd0f350911f11675a871cd233a323a4ac8f71f8901bd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_class_test_config_from_envvar": {"doc_hash": "24e93a879483a9ea834ba27dd78bed3facb96ec858640f4a09d08fec8009c996"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_envvar_missing_test_config_from_envvar_missing": {"doc_hash": "6010145d3dbd3da782180c726de86f7ac7e1b161476cdba5137e076c8d040e9c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_missing_test_session_lifetime": {"doc_hash": "3350d426e3834a62de12f4abbcd86ff2ad0354d185c03121b97028fab56e08f8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_get_namespace_test_get_namespace": {"doc_hash": "887beeadeecb3855c7e3029580ed8e4b0061ebd3512b33afc553556c264ddd00"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_pyfile_weird_encoding_": {"doc_hash": "6a1a290154c1e0dde5219b7967d94def4838ef74bc841a5c7209c839510d25e6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_converters.py_from_werkzeug_routing_imp_": {"doc_hash": "07ac1fe60dff0fa34ff37ac30249f59c8a1c22729bf304b5b71d624d297c6f72"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_io_PyBytesIO.__getattr__": {"doc_hash": "fcf3de1126f499bdf2b2b84672e3180e4349226542d79009a3b0f4937f234aff"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestSendfile_TestSendfile.test_send_from_directory": {"doc_hash": "25ef3817890484ea4a2dca3c5a686f616aefb67ea497a447e301ee59598e1f49"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestUrlFor_TestUrlFor.test_url_for_with_alternating_schemes": {"doc_hash": "ccda0917906281ad27e89fe841fc812f594026c9bd19ad44751c1e2dc101162f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestUrlFor.test_url_with_method_TestUrlFor.test_url_for_with_self": {"doc_hash": "709959f474a2e0e1c2fa9c725c53d63d408fbab1b4e27dba6defc6616671fed8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_test_redirect_no_app_test_abort_with_app": {"doc_hash": "666991539ae9edade2f85f491fe7a810be09fd20dd324e04f9795099a9a9edb8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestNoImports_TestNoImports.test_name_with_import_error": {"doc_hash": "1451030708a834b93d6edc899d11fe2ea5472e8006d102bb1d2be6f9375a9844"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming_TestStreaming.test_streaming_with_context_as_decorator": {"doc_hash": "9731eadd1399e25ad6efa3ca14b79e2da6222912c484cf0b1b05138c649cd439"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming.test_streaming_with_context_and_custom_close_TestStreaming.test_streaming_with_context_and_custom_close.assert_called_42_": {"doc_hash": "205e8cea5deaf6b40bf7bb93baba2c1bd92823c210885996347da89c127df2f9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming.test_stream_keeps_session_TestStreaming.test_async_view": {"doc_hash": "89362c61fdb1fe0bb156d2d408db2873f10541a562b8e2c193b6b427d8bb1abd"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestHelpers_TestHelpers.test_make_response": {"doc_hash": "7b08bbf69b546dbcc43912cf2ed4c5b3183e66166ae05af53dc2c5d74cd310b5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_test_open_resource_": {"doc_hash": "1d1092abeda46900838accbe8ed41fc47b101859eecb865fe4985a873e5d550e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_os_test_uninstalled_module_paths": {"doc_hash": "8b780ae4ba1420aa6f953f40c1e26d0d75c61b5452d733234db0c2364e54b7ef"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_uninstalled_package_paths_test_uninstalled_package_paths": {"doc_hash": "8fbf01d8a4bf89d16dc615e92d8ad2feb4f733dd2497b1469c070a4943eef58b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_uninstalled_namespace_paths_test_uninstalled_namespace_paths": {"doc_hash": "c678219c576595317438770b6a00bed821545f4524476fba7f0a2b4964ae17e2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_installed_module_paths_test_installed_package_paths": {"doc_hash": "467b7e2e4eb48d13d017fd008401be41fbd119856cf17862df2f6440460eac09"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_prefix_package_paths_": {"doc_hash": "0e7fe207c0789a648892af86467ec71c9f10485f44cdab50fe82607b693a414b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_datetime_test_bad_request_debug_message": {"doc_hash": "338ef446a59d5eb1290a3f916cc3e4f67fe4a3c7efd064be638049f076f2446d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_bad_requests_test_json_dump_to_file": {"doc_hash": "dd47516fac3731a5934fc2684306dfd035f6ac5efa2ade60ce1f45930f83099b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_basic_types_test_jsonify_basic_types": {"doc_hash": "691751c5c21dcbd8dc3e5e649409b67cfec4c6999c9db39a28e7b73547a161de"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_dicts_test_jsonify_dicts": {"doc_hash": "d5d07d3a6c63e80fce42c05a525819d2f1984184c1bf72ddc06fd6cc55fb719b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_arrays_test_jsonify_arrays.for_url_in_args_unpack_": {"doc_hash": "47a0a4e6f57c93ea1b0bd2ffbba5589fed08bd9611f953406dbf91c7988b772b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_datetime_FixedOffset.dst": {"doc_hash": "fd9ef45d9f387309b8d52aebfb146c4a73fdb74372f7a475c0e6ea54e6c1f2ea"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_aware_datetimes_test_jsonify_aware_datetimes": {"doc_hash": "49c757c6a12409253c343c57aad527952a740b44a866d445afde998d21f4886b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_uuid_types_test_jsonify_uuid_types": {"doc_hash": "dc9d94b3bd2ae5ec42daaeeeb32cde3806abd7dcc88830324bd691d4db7bb6a2"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_decimal_test_json_attr": {"doc_hash": "e6d5b0c13a57fdbadef045e101dea92accd053f1728cfd66d60d15ce992b4aef"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_tojson_filter_test_tojson_filter": {"doc_hash": "a397e4156e6df0ace0112f81ac47e95eedaa0f0778c664d1917a0e3f95c4b6af"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_customization__has_encoding": {"doc_hash": "46e0c807c5cbd01933855d8495d875851060a957c72ff4cc1025365f23b6f629"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_key_sorting_": {"doc_hash": "6222cbb42c0743935a84435b97315f88f7d90f7f5908d49a8193179f88800175"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_from_datetime_import_date_test_dump_load_unchanged": {"doc_hash": "71d18517b4bd55ce6d2fecf57206e2159af52064d7059e05d5606a0448a33d4f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_test_duplicate_tag_test_custom_tag": {"doc_hash": "de9cbc9acc252a069d635033672af8936e14633ea403884ba2023552f2556644"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_test_tag_interface_": {"doc_hash": "7add6c89444b1e3826dfe7f283f97519e40c7955b0c039104bb33542c2a2e4f8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_logging.py_logging_reset_logging": {"doc_hash": "717de30a07216630a390b2ede7ddc31a020e7e6842ecf1ff16de447d19918ee6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_logging.py_test_logger_": {"doc_hash": "fdf24861b364606ca020ad1cbe4e470fff25a82cc7aaae5d7fb730389ece0f20"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_regression.py_flask_": {"doc_hash": "f879d33e83776d3e98f1e6037b2d07ac5e6f0bbdf438c30bf1398b7aa52e9831"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_warnings_test_teardown_with_handled_exception": {"doc_hash": "d44a1f5525449bc2577b36fbca86dca9130dc2b74fdb85fd322046ea73c77b7c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_proper_test_request_context_test_proper_test_request_context.with_app_test_request_con_4": {"doc_hash": "58e9bda999b90db5505613e0c9a0102ee7371053fabe78be9407479b63477969"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_context_binding_test_manual_context_binding": {"doc_hash": "58aa8e3f0a0323ced85431bc46b52092618b73f45f97bdf37f5d26c8fdda8398"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_TestGreenletContextCopying_TestGreenletContextCopying.test_greenlet_context_copying.assert_result_42": {"doc_hash": "05f6845679aa0cef45e3caeb89ce9322e74c3c9051725022b0bc2ef55879aeb8"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_TestGreenletContextCopying.test_greenlet_context_copying_api_TestGreenletContextCopying.test_greenlet_context_copying_api": {"doc_hash": "2e14cfaf36934c9f22390b848fda94f11ca1c491d4e5f60be5cbdd8d20dbfc58"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_session_error_pops_context_test_session_error_pops_context": {"doc_hash": "634b5a456d2a267aa938c8ee47aad39d9b82aa5a141e7e8a60cdb2c866644353"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_session_dynamic_cookie_name_test_session_dynamic_cookie_name.assert_test_client_get__4": {"doc_hash": "aff035da97723d21e1ae8cb9635cc57a2164bb96699215abd47831ee3786150c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_bad_environ_raises_bad_request_": {"doc_hash": "62ea19622d5e44c82601bc35afd83d55532f0b5039ed0fe1ac70bbf77d23ab82"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_from___future___import_an_test_max_content_length": {"doc_hash": "7d441f7121b2dfbb3bf8089f29750a9433c0e75158e0359ac1594cd6843e5810"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_test_limit_config_test_limit_config.with_app_app_context__1": {"doc_hash": "a06ba7050082c65f5174b242c9af0146b927ffd9da3bfbc23a5031773ff05a88"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_test_trusted_hosts_config_": {"doc_hash": "3f32a23afc1bd06c62324034d2770adb11aad44ef1eb984781c9e73f42becce5"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_session_interface.py_flask_": {"doc_hash": "18e6d7af89326e96c553206916bd1fbfbfa58a6006607115d47f6f46b59d2dbe"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_flask_test_template_rendered": {"doc_hash": "59bab56ae323f872b5df75b4c6b7cbb033dd6fe7fdc5fddecf401c98fe4f676a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_before_render_template_test_before_render_template": {"doc_hash": "95fa5d178ebc9d444197b974e343af8bd0d01b30cc2ba9fbe03e5a423b22d118"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_request_signals_test_request_signals.try_": {"doc_hash": "a2bedddd8031dfcd02813d35ad43d6f1b6a72cf6bab89f7970e701ab9b3ddba9"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_request_exception_signal_test_request_exception_signal": {"doc_hash": "379a0d45c89d6634836715072cd236ba1f48e1e264ab292074954edbfccad3ba"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_appcontext_signals_test_appcontext_signals": {"doc_hash": "7c03a05dcd65af8452056d2d6b58ec1f79fcb5e5a4e0bd1272d08b6615033c5a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_flash_signal_test_flash_signal": {"doc_hash": "877de8fd666d89350cf78a2cece7011d4bc07a10d3f64a4d1d66ba5fe87495d7"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_appcontext_tearing_down_signal_": {"doc_hash": "e180fcac4ee369fcd8b836cafa3d21464d933f7a1050e292170faa4c99b90209"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_subclassing.py_from_io_import_StringIO_": {"doc_hash": "d393d8b6bd70199588312d58dc138cb3788e68584d03c9bd06ed336592c7c2e1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_logging_test_request_less_rendering": {"doc_hash": "36aabc71de5c9a97ea5240210592c2052688c5c7153a5816b7d112f11222a588"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_standard_context_test_standard_context": {"doc_hash": "375536db563596eeb4596deb238ad6297a86b78c3be68d7e51a3e52f9db291e3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_escaping_test_escaping": {"doc_hash": "d139c064c64107b17ef0d80daee5cb8c9f8dfa8c81f06ff2c9faeaa7367d5886"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_no_escaping_test_macros": {"doc_hash": "75f378668cae895301de9b424e9bc6b6788d8b5f7ec5ae227f3d6aee13daf861"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_filter_test_template_filter.assert_app_jinja_env_filt_11": {"doc_hash": "b39a4d2c143fdcca5d5c304bfac118d4845921eb010f8ce38990d28a6ff7f3bb"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_filter_test_add_template_filter_with_name_and_template": {"doc_hash": "e0bee7dadbf65c2cd745d722f36ca009a519a3b5201a91c834b6b42f99b0a641"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_test_test_template_test.assert_app_jinja_env_test_11": {"doc_hash": "6c6c03ba0f326e8b31a419de88a1f73d5f01ee4c3a6670f0b331bba3eb798c7e"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_test_test_add_template_test_with_name_and_template": {"doc_hash": "a2daef61bb2ff1aa33d677738176f77a2b22a9241266c2240423e31bbabb264c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_global_test_add_template_global.assert_rv_get_stuff_3": {"doc_hash": "b1451e6711107c22e4b72ad0d3632906c6b7c4efb96303953dd3cf0a3721f762"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_custom_template_loader_test_custom_template_loader": {"doc_hash": "d9645f089a7899c1963d3ad05f6acc7ab663eaf07f8833dc2354d0e9aa058f26"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_iterable_loader_test_iterable_loader": {"doc_hash": "4d524126d64c9f530c544809f91f9119311b2a4643622ca3147f7e1cbc713b9a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_templates_auto_reload_test_templates_auto_reload_debug_run": {"doc_hash": "7538c4c68b92553b85b0af1078fe8a266e81bfe762d30437848ad4ef8585abb4"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_loader_debugging_": {"doc_hash": "6d56e5281b2449ec9f5e87af35088683cd5e45f37b54fcdf4964d87edae07238"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_importlib.metadata_test_environ_base_default": {"doc_hash": "cb757ded9455e6123a95c2bde748b3a1424c5ea029e5b02a1ffd5c9917111f01"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_environ_base_modified_test_environ_base_modified": {"doc_hash": "dad49fdddf410aaa3ac278713e57e25db7155e26a34382daa27936078e809008"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_open_environ_test_client_open_environ": {"doc_hash": "461cc53b6049182bffaff782f1b926a708a429b8637c859fe02df51f0ec4f8ac"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_specify_url_scheme_test_environbuilder_json_dumps": {"doc_hash": "176f8308b0d314e783856e8abe804d860a6b12cecf108b9ecf15bcda2409933a"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_blueprint_with_subdomain_test_blueprint_with_subdomain": {"doc_hash": "bd2952aaf61471f2051453d5ecfa0d6a71cae94c8e5e20ebec559f48f7ce831b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_redirect_session_test_session_transactions": {"doc_hash": "2c0d8834d77c61a26410c2585df9daaaf296b0bc2d3fb6a4187ff53c60984ee3"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_session_transactions_no_null_sessions_test_session_transaction_needs_cookies": {"doc_hash": "b8e31761e9486ac7d6eb763da0683de7aee17de7840bb3d3c225007a67312226"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_test_client_context_binding_test_test_client_context_binding.with_pytest_raises_Runtim": {"doc_hash": "43afb8612b6dd417c769da01ae39652ecba3bf873ce81db1a157e571da579c43"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_reuse_client_test_full_url_request": {"doc_hash": "bc8c07545fb21c97b95af6bde39b368bb2fec94c9209bf86885e6f64e92e657f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_json_request_and_response_test_json_request_and_response": {"doc_hash": "27c74dcbb396efe1d49402bfb36dfdb0ce2f501626755190915b1745f4cce25b"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_json_no_app_context_test_client_json_no_app_context": {"doc_hash": "894e5ed5998b1fca7847e19ebf317e9c012da8fec5d7406756609031b5a2772c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_subdomain_test_subdomain": {"doc_hash": "c3118945f1b610cbca35d6083e4e205d7e9b7e4d319e8d0efc91b020765d8312"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_nosubdomain_test_cli_custom_obj": {"doc_hash": "90c576c0460a25efb6c50f90c9e77c5d84d60799017cc11088114e2ea8ab67c6"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_pop_all_preserved_": {"doc_hash": "183228781028ecf1d6ce3c1d433dba64fc8e6afc82235f927812fad1a7a51a1f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_pytest_test_error_handler_no_match.assert_client_get_abort": {"doc_hash": "66368e83e97f47638df22c16cdcbbc8fc5e8a7ae1ed065a5c42c1a09e5897d19"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_subclass_test_error_handler_subclass.assert_c_get_child_regi": {"doc_hash": "ca0fd290f12b97f584149d0b44aeb8551b195dbf8a4b69c310d9f2a31fbd99ee"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_http_subclass_test_error_handler_http_subclass.assert_c_get_forbidden__2": {"doc_hash": "cf8c4afe1ccca97ccdabc049c1aa8628de9b5f918cb867c0a1e24d959f9f571c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_blueprint_test_error_handler_blueprint": {"doc_hash": "24b34ad477d6987b8af97672ca1a69ba2accd25276298f74f95d8780f10c562f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_default_error_handler_test_default_error_handler.assert_c_get_slash_fo": {"doc_hash": "83c2a5307c9a80a0ec9ff0332590e206d80c9ab5edcf2eb50f1e6eb2d8931459"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers_TestGenericHandlers.report_error": {"doc_hash": "00d3bb6d5cecfe7e1588e4e32327b56a5f2002375610067441be214dd7822e70"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_class_or_code_TestGenericHandlers.test_handle_class_or_code": {"doc_hash": "bfc60a7dc657ef3bb94fbc99745cdfdb6cb9f1d53a2cda70653ae0f49bcd7e34"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_generic_http_TestGenericHandlers.test_handle_generic_http": {"doc_hash": "9d7987d260e402101af2cb5eb28a0ca08089f3a67c5a9083e98c76b1b2548b6f"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_generic_": {"doc_hash": "a78185cacd8d728243e984f220487c41b0c53e9e70126c037a1aaaa2bdf1a2bc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_pytest_test_view_patching": {"doc_hash": "546affd5cc00d5e8828fed30de5992f2cdb0fa7f3040ca929275db746a792fd0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_inheritance_test_view_inheritance": {"doc_hash": "a9e00f562b38211d4804876a8c6756e23865e6fc24f03c2db7278681bb4bf441"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_decorators_test_view_decorators": {"doc_hash": "87b4fc1bab55cb973de6c47a8820ba995ca530e62f3375fb26f6d90b39b169cc"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_provide_automatic_options_attr_test_view_provide_automatic_options_attr.assert_OPTIONS_in_rv_al": {"doc_hash": "12c4bad145d8fac7ef7e0e6f27196cec7f1c5603172d151a7a3240b408033066"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_implicit_head_test_implicit_head": {"doc_hash": "615bef2f62a7732740312b6e4e2b2d96dd17b2d1a62237415301e641b514eebe"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_explicit_head_test_explicit_head": {"doc_hash": "8d846f5f68c1ad603ea0fc207abffceb17c807a3a5a6896dc136fdb547622c86"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_endpoint_override_test_endpoint_override": {"doc_hash": "67c27a0e31c27844da5e8e72df1ab5be70bf945f1b696ccf4e128c1904f60cb7"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_methods_var_inheritance_test_methods_var_inheritance": {"doc_hash": "ea09dbdf02edeb2685e5091d4e0336274ca489986f40d668c57c11714e33032c"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_multiple_inheritance_test_multiple_inheritance": {"doc_hash": "2a35b8284505deab236f719fc4d24370839a81bd5cc0da7d7543ce7c7706eee1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_remove_method_from_parent_": {"doc_hash": "d0d0020a0434cf946fc22bcd3cba1b26532a404c8a027a6ad444349fd1365bca"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_app_decorators.py_from___future___import_an_": {"doc_hash": "113165ece968e47ac514507fb89bf71f7479188af37fab957620db3f29ad96d0"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_error_handler.py_from___future___import_an_": {"doc_hash": "8c7795c56b79cd4b9a49a19fd0e0476b31d22ba11f0e153836bc3c463783dc5d"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_route.py_from___future___import_an_": {"doc_hash": "1146234f8d58c356c752fd75a4146d88b056c37dc45acc07091276d5630d5e4d"}}, "docstore/data": {"/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/docs/conf.py_packaging.version_gettext_compact": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/docs/conf.py_packaging.version_gettext_compact", "embedding": null, "metadata": {"file_path": "docs/conf.py", "file_name": "conf.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 67, "span_ids": ["impl:14", "imports"], "tokens": 634}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import packaging.version\nfrom pallets_sphinx_themes import get_version\nfrom pallets_sphinx_themes import ProjectLink\n\n# Project --------------------------------------------------------------\n\nproject = \"Flask\"\ncopyright = \"2010 Pallets\"\nauthor = \"Pallets\"\nrelease, version = get_version(\"Flask\")\n\n# General --------------------------------------------------------------\n\ndefault_role = \"code\"\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.extlinks\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinxcontrib.log_cabinet\",\n    \"sphinx_tabs.tabs\",\n    \"pallets_sphinx_themes\",\n]\nautodoc_member_order = \"bysource\"\nautodoc_typehints = \"description\"\nautodoc_preserve_defaults = True\nextlinks = {\n    \"issue\": (\"https://github.com/pallets/flask/issues/%s\", \"#%s\"),\n    \"pr\": (\"https://github.com/pallets/flask/pull/%s\", \"#%s\"),\n    \"ghsa\": (\"https://github.com/pallets/flask/security/advisories/GHSA-%s\", \"GHSA-%s\"),\n}\nintersphinx_mapping = {\n    \"python\": (\"https://docs.python.org/3/\", None),\n    \"werkzeug\": (\"https://werkzeug.palletsprojects.com/\", None),\n    \"click\": (\"https://click.palletsprojects.com/\", None),\n    \"jinja\": (\"https://jinja.palletsprojects.com/\", None),\n    \"itsdangerous\": (\"https://itsdangerous.palletsprojects.com/\", None),\n    \"sqlalchemy\": (\"https://docs.sqlalchemy.org/\", None),\n    \"wtforms\": (\"https://wtforms.readthedocs.io/\", None),\n    \"blinker\": (\"https://blinker.readthedocs.io/\", None),\n}\n\n# HTML -----------------------------------------------------------------\n\nhtml_theme = \"flask\"\nhtml_theme_options = {\"index_sidebar_logo\": False}\nhtml_context = {\n    \"project_links\": [\n        ProjectLink(\"Donate\", \"https://palletsprojects.com/donate\"),\n        ProjectLink(\"PyPI Releases\", \"https://pypi.org/project/Flask/\"),\n        ProjectLink(\"Source Code\", \"https://github.com/pallets/flask/\"),\n        ProjectLink(\"Issue Tracker\", \"https://github.com/pallets/flask/issues/\"),\n        ProjectLink(\"Chat\", \"https://discord.gg/pallets\"),\n    ]\n}\nhtml_sidebars = {\n    \"index\": [\"project.html\", \"localtoc.html\", \"searchbox.html\", \"ethicalads.html\"],\n    \"**\": [\"localtoc.html\", \"relations.html\", \"searchbox.html\", \"ethicalads.html\"],\n}\nsinglehtml_sidebars = {\"index\": [\"project.html\", \"localtoc.html\", \"ethicalads.html\"]}\nhtml_static_path = [\"_static\"]\nhtml_favicon = \"_static/flask-icon.svg\"\nhtml_logo = \"_static/flask-logo.svg\"\nhtml_title = f\"Flask Documentation ({version})\"\nhtml_show_sourcelink = False\n\ngettext_uuid = True\ngettext_compact = False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/docs/conf.py__Local_Extensions__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/docs/conf.py__Local_Extensions__", "embedding": null, "metadata": {"file_path": "docs/conf.py", "file_name": "conf.py", "file_type": "text/x-python", "category": "implementation", "start_line": 69, "end_line": 102, "span_ids": ["github_link", "impl:14", "setup"], "tokens": 194}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "# Local Extensions -----------------------------------------------------\n\n\ndef github_link(name, rawtext, text, lineno, inliner, options=None, content=None):\n    app = inliner.document.settings.env.app\n    release = app.config.release\n    base_url = \"https://github.com/pallets/flask/tree/\"\n\n    if text.endswith(\">\"):\n        words, text = text[:-1].rsplit(\"<\", 1)\n        words = words.strip()\n    else:\n        words = None\n\n    if packaging.version.parse(release).is_devrelease:\n        url = f\"{base_url}main/{text}\"\n    else:\n        url = f\"{base_url}{release}/{text}\"\n\n    if words is None:\n        words = url\n\n    from docutils.nodes import reference\n    from docutils.parsers.rst.roles import set_classes\n\n    options = options or {}\n    set_classes(options)\n    node = reference(rawtext, words, refuri=url, **options)\n    return [node], []\n\n\ndef setup(app):\n    app.add_role(\"gh\", github_link)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/make_celery.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/make_celery.py__", "embedding": null, "metadata": {"file_path": "examples/celery/make_celery.py", "file_name": "make_celery.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 5, "span_ids": ["imports"], "tokens": 24}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from task_app import create_app\n\nflask_app = create_app()\ncelery_app = flask_app.extensions[\"celery\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/__init__.py_from_celery_import_Celery_create_app": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/__init__.py_from_celery_import_Celery_create_app", "embedding": null, "metadata": {"file_path": "examples/celery/src/task_app/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 26, "span_ids": ["create_app", "imports"], "tokens": 120}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from celery import Celery\nfrom celery import Task\nfrom flask import Flask\nfrom flask import render_template\n\n\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    app.config.from_mapping(\n        CELERY=dict(\n            broker_url=\"redis://localhost\",\n            result_backend=\"redis://localhost\",\n            task_ignore_result=True,\n        ),\n    )\n    app.config.from_prefixed_env()\n    celery_init_app(app)\n\n    @app.route(\"/\")\n    def index() -> str:\n        return render_template(\"index.html\")\n\n    from . import views\n\n    app.register_blueprint(views.bp)\n    return app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/__init__.py_celery_init_app_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/__init__.py_celery_init_app_", "embedding": null, "metadata": {"file_path": "examples/celery/src/task_app/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 29, "end_line": 40, "span_ids": ["celery_init_app"], "tokens": 103}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def celery_init_app(app: Flask) -> Celery:\n    class FlaskTask(Task):\n        def __call__(self, *args: object, **kwargs: object) -> object:\n            with app.app_context():\n                return self.run(*args, **kwargs)\n\n    celery_app = Celery(app.name, task_cls=FlaskTask)\n    celery_app.config_from_object(app.config[\"CELERY\"])\n    celery_app.set_default()\n    app.extensions[\"celery\"] = celery_app\n    return celery_app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/tasks.py_time_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/tasks.py_time_", "embedding": null, "metadata": {"file_path": "examples/celery/src/task_app/tasks.py", "file_name": "tasks.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 24, "span_ids": ["add", "block", "imports", "process"], "tokens": 123}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import time\n\nfrom celery import shared_task\nfrom celery import Task\n\n\n@shared_task(ignore_result=False)\ndef add(a: int, b: int) -> int:\n    return a + b\n\n\n@shared_task()\ndef block() -> None:\n    time.sleep(5)\n\n\n@shared_task(bind=True, ignore_result=False)\ndef process(self: Task, total: int) -> object:\n    for i in range(total):\n        self.update_state(state=\"PROGRESS\", meta={\"current\": i + 1, \"total\": total})\n        time.sleep(1)\n\n    return {\"current\": total, \"total\": total}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/views.py_from_celery_result_import_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/celery/src/task_app/views.py_from_celery_result_import_", "embedding": null, "metadata": {"file_path": "examples/celery/src/task_app/views.py", "file_name": "views.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 39, "span_ids": ["add", "block", "imports", "process", "result"], "tokens": 231}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from celery.result import AsyncResult\nfrom flask import Blueprint\nfrom flask import request\n\nfrom . import tasks\n\nbp = Blueprint(\"tasks\", __name__, url_prefix=\"/tasks\")\n\n\n@bp.get(\"/result/<id>\")\ndef result(id: str) -> dict[str, object]:\n    result = AsyncResult(id)\n    ready = result.ready()\n    return {\n        \"ready\": ready,\n        \"successful\": result.successful() if ready else None,\n        \"value\": result.get() if ready else result.result,\n    }\n\n\n@bp.post(\"/add\")\ndef add() -> dict[str, object]:\n    a = request.form.get(\"a\", type=int)\n    b = request.form.get(\"b\", type=int)\n    result = tasks.add.delay(a, b)\n    return {\"result_id\": result.id}\n\n\n@bp.post(\"/block\")\ndef block() -> dict[str, object]:\n    result = tasks.block.delay()\n    return {\"result_id\": result.id}\n\n\n@bp.post(\"/process\")\ndef process() -> dict[str, object]:\n    result = tasks.process.delay(total=request.form.get(\"total\", type=int))\n    return {\"result_id\": result.id}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/js_example/__init__.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/js_example/__init__.py__", "embedding": null, "metadata": {"file_path": "examples/javascript/js_example/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 6, "span_ids": ["imports"], "tokens": 23}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\napp = Flask(__name__)\n\nfrom js_example import views  # noqa: E402, F401", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/js_example/views.py_from_flask_import_jsonify_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/js_example/views.py_from_flask_import_jsonify_", "embedding": null, "metadata": {"file_path": "examples/javascript/js_example/views.py", "file_name": "views.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 19, "span_ids": ["add", "imports", "index"], "tokens": 108}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import jsonify\nfrom flask import render_template\nfrom flask import request\n\nfrom . import app\n\n\n@app.route(\"/\", defaults={\"js\": \"fetch\"})\n@app.route(\"/<any(xhr, jquery, fetch):js>\")\ndef index(js):\n    return render_template(f\"{js}.html\", js=js)\n\n\n@app.route(\"/add\", methods=[\"POST\"])\ndef add():\n    a = request.form.get(\"a\", 0, type=float)\n    b = request.form.get(\"b\", 0, type=float)\n    return jsonify(result=a + b)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/tests/conftest.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/tests/conftest.py__", "embedding": null, "metadata": {"file_path": "examples/javascript/tests/conftest.py", "file_name": "conftest.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 16, "span_ids": ["client", "fixture_app", "imports"], "tokens": 45}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\n\nfrom js_example import app\n\n\n@pytest.fixture(name=\"app\")\ndef fixture_app():\n    app.testing = True\n    yield app\n    app.testing = False\n\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/tests/test_js_example.py_pytest_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/javascript/tests/test_js_example.py_pytest_", "embedding": null, "metadata": {"file_path": "examples/javascript/tests/test_js_example.py", "file_name": "test_js_example.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 28, "span_ids": ["imports", "test_add", "test_index"], "tokens": 195}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\nfrom flask import template_rendered\n\n\n@pytest.mark.parametrize(\n    (\"path\", \"template_name\"),\n    (\n        (\"/\", \"fetch.html\"),\n        (\"/plain\", \"xhr.html\"),\n        (\"/fetch\", \"fetch.html\"),\n        (\"/jquery\", \"jquery.html\"),\n    ),\n)\ndef test_index(app, client, path, template_name):\n    def check(sender, template, context):\n        assert template.name == template_name\n\n    with template_rendered.connected_to(check, app):\n        client.get(path)\n\n\n@pytest.mark.parametrize(\n    (\"a\", \"b\", \"result\"), ((2, 3, 5), (2.5, 3, 5.5), (2, None, 2), (2, \"b\", 2))\n)\ndef test_add(client, a, b, result):\n    response = client.post(\"/add\", data={\"a\": a, \"b\": b})\n    assert response.get_json()[\"result\"] == result", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/__init__.py_os_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/__init__.py_os_", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 52, "span_ids": ["create_app", "imports"], "tokens": 283}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import os\n\nfrom flask import Flask\n\n\ndef create_app(test_config=None):\n    \"\"\"Create and configure an instance of the Flask application.\"\"\"\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        # a default secret that should be overridden by instance config\n        SECRET_KEY=\"dev\",\n        # store the database in the instance folder\n        DATABASE=os.path.join(app.instance_path, \"flaskr.sqlite\"),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile(\"config.py\", silent=True)\n    else:\n        # load the test config if passed in\n        app.config.update(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    @app.route(\"/hello\")\n    def hello():\n        return \"Hello, World!\"\n\n    # register the database commands\n    from . import db\n\n    db.init_app(app)\n\n    # apply the blueprints to the app\n    from . import auth\n    from . import blog\n\n    app.register_blueprint(auth.bp)\n    app.register_blueprint(blog.bp)\n\n    # make url_for('index') == url_for('blog.index')\n    # in another app, you might define a separate main index here with\n    # app.route, while giving the blog blueprint a url_prefix, but for\n    # the tutorial the blog will be the main index\n    app.add_url_rule(\"/\", endpoint=\"index\")\n\n    return app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_functools_load_logged_in_user": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_functools_load_logged_in_user", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/auth.py", "file_name": "auth.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 43, "span_ids": ["imports", "load_logged_in_user", "login_required"], "tokens": 226}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import functools\n\nfrom flask import Blueprint\nfrom flask import flash\nfrom flask import g\nfrom flask import redirect\nfrom flask import render_template\nfrom flask import request\nfrom flask import session\nfrom flask import url_for\nfrom werkzeug.security import check_password_hash\nfrom werkzeug.security import generate_password_hash\n\nfrom .db import get_db\n\nbp = Blueprint(\"auth\", __name__, url_prefix=\"/auth\")\n\n\ndef login_required(view):\n    \"\"\"View decorator that redirects anonymous users to the login page.\"\"\"\n\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for(\"auth.login\"))\n\n        return view(**kwargs)\n\n    return wrapped_view\n\n\n@bp.before_app_request\ndef load_logged_in_user():\n    \"\"\"If a user id is stored in the session, load the user object from\n    the database into ``g.user``.\"\"\"\n    user_id = session.get(\"user_id\")\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = (\n            get_db().execute(\"SELECT * FROM user WHERE id = ?\", (user_id,)).fetchone()\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_register_register.return_render_template_a": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_register_register.return_render_template_a", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/auth.py", "file_name": "auth.py", "file_type": "text/x-python", "category": "implementation", "start_line": 46, "end_line": 81, "span_ids": ["register"], "tokens": 214}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@bp.route(\"/register\", methods=(\"GET\", \"POST\"))\ndef register():\n    \"\"\"Register a new user.\n\n    Validates that the username is not already taken. Hashes the\n    password for security.\n    \"\"\"\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n        db = get_db()\n        error = None\n\n        if not username:\n            error = \"Username is required.\"\n        elif not password:\n            error = \"Password is required.\"\n\n        if error is None:\n            try:\n                db.execute(\n                    \"INSERT INTO user (username, password) VALUES (?, ?)\",\n                    (username, generate_password_hash(password)),\n                )\n                db.commit()\n            except db.IntegrityError:\n                # The username was already taken, which caused the\n                # commit to fail. Show a validation error.\n                error = f\"User {username} is already registered.\"\n            else:\n                # Success, go to the login page.\n                return redirect(url_for(\"auth.login\"))\n\n        flash(error)\n\n    return render_template(\"auth/register.html\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_login_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/auth.py_login_", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/auth.py", "file_name": "auth.py", "file_type": "text/x-python", "category": "implementation", "start_line": 84, "end_line": 117, "span_ids": ["login", "logout"], "tokens": 212}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@bp.route(\"/login\", methods=(\"GET\", \"POST\"))\ndef login():\n    \"\"\"Log in a registered user by adding the user id to the session.\"\"\"\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n        db = get_db()\n        error = None\n        user = db.execute(\n            \"SELECT * FROM user WHERE username = ?\", (username,)\n        ).fetchone()\n\n        if user is None:\n            error = \"Incorrect username.\"\n        elif not check_password_hash(user[\"password\"], password):\n            error = \"Incorrect password.\"\n\n        if error is None:\n            # store the user id in a new session and return to the index\n            session.clear()\n            session[\"user_id\"] = user[\"id\"]\n            return redirect(url_for(\"index\"))\n\n        flash(error)\n\n    return render_template(\"auth/login.html\")\n\n\n@bp.route(\"/logout\")\ndef logout():\n    \"\"\"Clear the current session, including the stored user id.\"\"\"\n    session.clear()\n    return redirect(url_for(\"index\"))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_from_flask_import_Bluepri_index": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_from_flask_import_Bluepri_index", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/blog.py", "file_name": "blog.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 25, "span_ids": ["imports", "index"], "tokens": 145}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Blueprint\nfrom flask import flash\nfrom flask import g\nfrom flask import redirect\nfrom flask import render_template\nfrom flask import request\nfrom flask import url_for\nfrom werkzeug.exceptions import abort\n\nfrom .auth import login_required\nfrom .db import get_db\n\nbp = Blueprint(\"blog\", __name__)\n\n\n@bp.route(\"/\")\ndef index():\n    \"\"\"Show all the posts, most recent first.\"\"\"\n    db = get_db()\n    posts = db.execute(\n        \"SELECT p.id, title, body, created, author_id, username\"\n        \" FROM post p JOIN user u ON p.author_id = u.id\"\n        \" ORDER BY created DESC\"\n    ).fetchall()\n    return render_template(\"blog/index.html\", posts=posts)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_get_post_get_post.return_post": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_get_post_get_post.return_post", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/blog.py", "file_name": "blog.py", "file_type": "text/x-python", "category": "implementation", "start_line": 28, "end_line": 57, "span_ids": ["get_post"], "tokens": 117}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def get_post(id, check_author=True):\n    post = (\n        get_db()\n        .execute(\n            \"SELECT p.id, title, body, created, author_id, username\"\n            \" FROM post p JOIN user u ON p.author_id = u.id\"\n            \" WHERE p.id = ?\",\n            (id,),\n        )\n        .fetchone()\n    )\n\n    if post is None:\n        abort(404, f\"Post id {id} doesn't exist.\")\n\n    if check_author and post[\"author_id\"] != g.user[\"id\"]:\n        abort(403)\n\n    return post", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_create_create": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_create_create", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/blog.py", "file_name": "blog.py", "file_type": "text/x-python", "category": "implementation", "start_line": 60, "end_line": 83, "span_ids": ["create"], "tokens": 149}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@bp.route(\"/create\", methods=(\"GET\", \"POST\"))\n@login_required\ndef create():\n    \"\"\"Create a new post for the current user.\"\"\"\n    if request.method == \"POST\":\n        title = request.form[\"title\"]\n        body = request.form[\"body\"]\n        error = None\n\n        if not title:\n            error = \"Title is required.\"\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                \"INSERT INTO post (title, body, author_id) VALUES (?, ?, ?)\",\n                (title, body, g.user[\"id\"]),\n            )\n            db.commit()\n            return redirect(url_for(\"blog.index\"))\n\n    return render_template(\"blog/create.html\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_update_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/blog.py_update_", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/blog.py", "file_name": "blog.py", "file_type": "text/x-python", "category": "implementation", "start_line": 86, "end_line": 126, "span_ids": ["delete", "update"], "tokens": 249}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@bp.route(\"/<int:id>/update\", methods=(\"GET\", \"POST\"))\n@login_required\ndef update(id):\n    \"\"\"Update a post if the current user is the author.\"\"\"\n    post = get_post(id)\n\n    if request.method == \"POST\":\n        title = request.form[\"title\"]\n        body = request.form[\"body\"]\n        error = None\n\n        if not title:\n            error = \"Title is required.\"\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                \"UPDATE post SET title = ?, body = ? WHERE id = ?\", (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for(\"blog.index\"))\n\n    return render_template(\"blog/update.html\", post=post)\n\n\n@bp.route(\"/<int:id>/delete\", methods=(\"POST\",))\n@login_required\ndef delete(id):\n    \"\"\"Delete a post.\n\n    Ensures that the post exists and that the logged in user is the\n    author of the post.\n    \"\"\"\n    get_post(id)\n    db = get_db()\n    db.execute(\"DELETE FROM post WHERE id = ?\", (id,))\n    db.commit()\n    return redirect(url_for(\"blog.index\"))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/db.py_sqlite3_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/flaskr/db.py_sqlite3_", "embedding": null, "metadata": {"file_path": "examples/tutorial/flaskr/db.py", "file_name": "db.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 57, "span_ids": ["close_db", "get_db", "impl", "imports", "init_app", "init_db", "init_db_command"], "tokens": 291}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import sqlite3\nfrom datetime import datetime\n\nimport click\nfrom flask import current_app\nfrom flask import g\n\n\ndef get_db():\n    \"\"\"Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    \"\"\"\n    if \"db\" not in g:\n        g.db = sqlite3.connect(\n            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\n\ndef close_db(e=None):\n    \"\"\"If this request connected to the database, close the\n    connection.\n    \"\"\"\n    db = g.pop(\"db\", None)\n\n    if db is not None:\n        db.close()\n\n\ndef init_db():\n    \"\"\"Clear existing data and create new tables.\"\"\"\n    db = get_db()\n\n    with current_app.open_resource(\"schema.sql\") as f:\n        db.executescript(f.read().decode(\"utf8\"))\n\n\n@click.command(\"init-db\")\ndef init_db_command():\n    \"\"\"Clear existing data and create new tables.\"\"\"\n    init_db()\n    click.echo(\"Initialized the database.\")\n\n\nsqlite3.register_converter(\"timestamp\", lambda v: datetime.fromisoformat(v.decode()))\n\n\ndef init_app(app):\n    \"\"\"Register database functions with the Flask app. This is called by\n    the application factory.\n    \"\"\"\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/conftest.py_os_app": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/conftest.py_os_app", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/conftest.py", "file_name": "conftest.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 32, "span_ids": ["app", "imports"], "tokens": 197}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import os\nimport tempfile\n\nimport pytest\n\nfrom flaskr import create_app\nfrom flaskr.db import get_db\nfrom flaskr.db import init_db\n\n# read in SQL for populating test data\nwith open(os.path.join(os.path.dirname(__file__), \"data.sql\"), \"rb\") as f:\n    _data_sql = f.read().decode(\"utf8\")\n\n\n@pytest.fixture\ndef app():\n    \"\"\"Create and configure a new app instance for each test.\"\"\"\n    # create a temporary file to isolate the database for each test\n    db_fd, db_path = tempfile.mkstemp()\n    # create the app with common test config\n    app = create_app({\"TESTING\": True, \"DATABASE\": db_path})\n\n    # create the database and load test data\n    with app.app_context():\n        init_db()\n        get_db().executescript(_data_sql)\n\n    yield app\n\n    # close and remove the temporary database\n    os.close(db_fd)\n    os.unlink(db_path)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/conftest.py_client_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/conftest.py_client_", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/conftest.py", "file_name": "conftest.py", "file_type": "text/x-python", "category": "implementation", "start_line": 35, "end_line": 63, "span_ids": ["AuthActions", "AuthActions.__init__", "AuthActions.login", "AuthActions.logout", "auth", "client", "runner"], "tokens": 130}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.fixture\ndef client(app):\n    \"\"\"A test client for the app.\"\"\"\n    return app.test_client()\n\n\n@pytest.fixture\ndef runner(app):\n    \"\"\"A test runner for the app's Click commands.\"\"\"\n    return app.test_cli_runner()\n\n\nclass AuthActions:\n    def __init__(self, client):\n        self._client = client\n\n    def login(self, username=\"test\", password=\"test\"):\n        return self._client.post(\n            \"/auth/login\", data={\"username\": username, \"password\": password}\n        )\n\n    def logout(self):\n        return self._client.get(\"/auth/logout\")\n\n\n@pytest.fixture\ndef auth(client):\n    return AuthActions(client)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_auth.py_pytest_test_register_validate_input": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_auth.py_pytest_test_register_validate_input", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/test_auth.py", "file_name": "test_auth.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 36, "span_ids": ["imports", "test_register", "test_register_validate_input"], "tokens": 239}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\nfrom flask import g\nfrom flask import session\n\nfrom flaskr.db import get_db\n\n\ndef test_register(client, app):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/auth/register\").status_code == 200\n\n    # test that successful registration redirects to the login page\n    response = client.post(\"/auth/register\", data={\"username\": \"a\", \"password\": \"a\"})\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\n    # test that the user was inserted into the database\n    with app.app_context():\n        assert (\n            get_db().execute(\"SELECT * FROM user WHERE username = 'a'\").fetchone()\n            is not None\n        )\n\n\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"message\"),\n    (\n        (\"\", \"\", b\"Username is required.\"),\n        (\"a\", \"\", b\"Password is required.\"),\n        (\"test\", \"test\", b\"already registered\"),\n    ),\n)\ndef test_register_validate_input(client, username, password, message):\n    response = client.post(\n        \"/auth/register\", data={\"username\": username, \"password\": password}\n    )\n    assert message in response.data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_auth.py_test_login_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_auth.py_test_login_", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/test_auth.py", "file_name": "test_auth.py", "file_type": "text/x-python", "category": "test", "start_line": 39, "end_line": 70, "span_ids": ["test_login", "test_login_validate_input", "test_logout"], "tokens": 210}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_login(client, auth):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/auth/login\").status_code == 200\n\n    # test that successful login redirects to the index page\n    response = auth.login()\n    assert response.headers[\"Location\"] == \"/\"\n\n    # login request set the user_id in the session\n    # check that the user is loaded from the session\n    with client:\n        client.get(\"/\")\n        assert session[\"user_id\"] == 1\n        assert g.user[\"username\"] == \"test\"\n\n\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"message\"),\n    ((\"a\", \"test\", b\"Incorrect username.\"), (\"test\", \"a\", b\"Incorrect password.\")),\n)\ndef test_login_validate_input(auth, username, password, message):\n    response = auth.login(username, password)\n    assert message in response.data\n\n\ndef test_logout(client, auth):\n    auth.login()\n\n    with client:\n        auth.logout()\n        assert \"user_id\" not in session", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_pytest_test_login_required": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_pytest_test_login_required", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/test_blog.py", "file_name": "test_blog.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 22, "span_ids": ["imports", "test_index", "test_login_required"], "tokens": 151}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\n\nfrom flaskr.db import get_db\n\n\ndef test_index(client, auth):\n    response = client.get(\"/\")\n    assert b\"Log In\" in response.data\n    assert b\"Register\" in response.data\n\n    auth.login()\n    response = client.get(\"/\")\n    assert b\"test title\" in response.data\n    assert b\"by test on 2018-01-01\" in response.data\n    assert b\"test\\nbody\" in response.data\n    assert b'href=\"/1/update\"' in response.data\n\n\n@pytest.mark.parametrize(\"path\", (\"/create\", \"/1/update\", \"/1/delete\"))\ndef test_login_required(client, path):\n    response = client.post(path)\n    assert response.headers[\"Location\"] == \"/auth/login\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_test_author_required_test_author_required": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_test_author_required_test_author_required", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/test_blog.py", "file_name": "test_blog.py", "file_type": "text/x-python", "category": "test", "start_line": 25, "end_line": 37, "span_ids": ["test_author_required"], "tokens": 124}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_author_required(app, client, auth):\n    # change the post author to another user\n    with app.app_context():\n        db = get_db()\n        db.execute(\"UPDATE post SET author_id = 2 WHERE id = 1\")\n        db.commit()\n\n    auth.login()\n    # current user can't modify other user's post\n    assert client.post(\"/1/update\").status_code == 403\n    assert client.post(\"/1/delete\").status_code == 403\n    # current user doesn't see edit link\n    assert b'href=\"/1/update\"' not in client.get(\"/\").data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_test_exists_required_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_blog.py_test_exists_required_", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/test_blog.py", "file_name": "test_blog.py", "file_type": "text/x-python", "category": "test", "start_line": 40, "end_line": 84, "span_ids": ["test_create", "test_create_update_validate", "test_delete", "test_exists_required", "test_update"], "tokens": 330}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"path\", (\"/2/update\", \"/2/delete\"))\ndef test_exists_required(client, auth, path):\n    auth.login()\n    assert client.post(path).status_code == 404\n\n\ndef test_create(client, auth, app):\n    auth.login()\n    assert client.get(\"/create\").status_code == 200\n    client.post(\"/create\", data={\"title\": \"created\", \"body\": \"\"})\n\n    with app.app_context():\n        db = get_db()\n        count = db.execute(\"SELECT COUNT(id) FROM post\").fetchone()[0]\n        assert count == 2\n\n\ndef test_update(client, auth, app):\n    auth.login()\n    assert client.get(\"/1/update\").status_code == 200\n    client.post(\"/1/update\", data={\"title\": \"updated\", \"body\": \"\"})\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute(\"SELECT * FROM post WHERE id = 1\").fetchone()\n        assert post[\"title\"] == \"updated\"\n\n\n@pytest.mark.parametrize(\"path\", (\"/create\", \"/1/update\"))\ndef test_create_update_validate(client, auth, path):\n    auth.login()\n    response = client.post(path, data={\"title\": \"\", \"body\": \"\"})\n    assert b\"Title is required.\" in response.data\n\n\ndef test_delete(client, auth, app):\n    auth.login()\n    response = client.post(\"/1/delete\")\n    assert response.headers[\"Location\"] == \"/\"\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute(\"SELECT * FROM post WHERE id = 1\").fetchone()\n        assert post is None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_db.py_sqlite3_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_db.py_sqlite3_", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/test_db.py", "file_name": "test_db.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 30, "span_ids": ["imports", "test_get_close_db", "test_init_db_command"], "tokens": 142}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import sqlite3\n\nimport pytest\n\nfrom flaskr.db import get_db\n\n\ndef test_get_close_db(app):\n    with app.app_context():\n        db = get_db()\n        assert db is get_db()\n\n    with pytest.raises(sqlite3.ProgrammingError) as e:\n        db.execute(\"SELECT 1\")\n\n    assert \"closed\" in str(e.value)\n\n\ndef test_init_db_command(runner, monkeypatch):\n    class Recorder:\n        called = False\n\n    def fake_init_db():\n        Recorder.called = True\n\n    monkeypatch.setattr(\"flaskr.db.init_db\", fake_init_db)\n    result = runner.invoke(args=[\"init-db\"])\n    assert \"Initialized\" in result.output\n    assert Recorder.called", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_factory.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/examples/tutorial/tests/test_factory.py__", "embedding": null, "metadata": {"file_path": "examples/tutorial/tests/test_factory.py", "file_name": "test_factory.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 13, "span_ids": ["imports", "test_config", "test_hello"], "tokens": 63}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flaskr import create_app\n\n\ndef test_config():\n    \"\"\"Test create_app without passing test config.\"\"\"\n    assert not create_app().testing\n    assert create_app({\"TESTING\": True}).testing\n\n\ndef test_hello(client):\n    response = client.get(\"/hello\")\n    assert response.data == b\"Hello, World!\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/__init__.py_from_import_json_as_jso_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/__init__.py_from_import_json_as_jso_", "embedding": null, "metadata": {"file_path": "src/flask/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 40, "span_ids": ["impl"], "tokens": 381}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from . import json as json\nfrom .app import Flask as Flask\nfrom .blueprints import Blueprint as Blueprint\nfrom .config import Config as Config\nfrom .ctx import after_this_request as after_this_request\nfrom .ctx import copy_current_request_context as copy_current_request_context\nfrom .ctx import has_app_context as has_app_context\nfrom .ctx import has_request_context as has_request_context\nfrom .globals import current_app as current_app\nfrom .globals import g as g\nfrom .globals import request as request\nfrom .globals import session as session\nfrom .helpers import abort as abort\nfrom .helpers import flash as flash\nfrom .helpers import get_flashed_messages as get_flashed_messages\nfrom .helpers import get_template_attribute as get_template_attribute\nfrom .helpers import make_response as make_response\nfrom .helpers import redirect as redirect\nfrom .helpers import send_file as send_file\nfrom .helpers import send_from_directory as send_from_directory\nfrom .helpers import stream_with_context as stream_with_context\nfrom .helpers import url_for as url_for\nfrom .json import jsonify as jsonify\nfrom .signals import appcontext_popped as appcontext_popped\nfrom .signals import appcontext_pushed as appcontext_pushed\nfrom .signals import appcontext_tearing_down as appcontext_tearing_down\nfrom .signals import before_render_template as before_render_template\nfrom .signals import got_request_exception as got_request_exception\nfrom .signals import message_flashed as message_flashed\nfrom .signals import request_finished as request_finished\nfrom .signals import request_started as request_started\nfrom .signals import request_tearing_down as request_tearing_down\nfrom .signals import template_rendered as template_rendered\nfrom .templating import render_template as render_template\nfrom .templating import render_template_string as render_template_string\nfrom .templating import stream_template as stream_template\nfrom .templating import stream_template_string as stream_template_string\nfrom .wrappers import Request as Request\nfrom .wrappers import Response as Response", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/__main__.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/__main__.py__", "embedding": null, "metadata": {"file_path": "src/flask/__main__.py", "file_name": "__main__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 4, "span_ids": ["imports"], "tokens": 7}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from .cli import main\n\nmain()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_from___future___import_an__make_timedelta": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_from___future___import_an__make_timedelta", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 73, "span_ids": ["_make_timedelta", "imports"], "tokens": 501}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport collections.abc as cabc\nimport os\nimport sys\nimport typing as t\nimport weakref\nfrom datetime import timedelta\nfrom inspect import iscoroutinefunction\nfrom itertools import chain\nfrom types import TracebackType\nfrom urllib.parse import quote as _url_quote\n\nimport click\nfrom werkzeug.datastructures import Headers\nfrom werkzeug.datastructures import ImmutableDict\nfrom werkzeug.exceptions import BadRequestKeyError\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.exceptions import InternalServerError\nfrom werkzeug.routing import BuildError\nfrom werkzeug.routing import MapAdapter\nfrom werkzeug.routing import RequestRedirect\nfrom werkzeug.routing import RoutingException\nfrom werkzeug.routing import Rule\nfrom werkzeug.serving import is_running_from_reloader\nfrom werkzeug.wrappers import Response as BaseResponse\nfrom werkzeug.wsgi import get_host\n\nfrom . import cli\nfrom . import typing as ft\nfrom .ctx import AppContext\nfrom .globals import _cv_app\nfrom .globals import g\nfrom .globals import request\nfrom .globals import session\nfrom .helpers import get_debug_flag\nfrom .helpers import get_flashed_messages\nfrom .helpers import get_load_dotenv\nfrom .helpers import send_from_directory\nfrom .sansio.app import App\nfrom .sessions import SecureCookieSessionInterface\nfrom .sessions import SessionInterface\nfrom .signals import appcontext_tearing_down\nfrom .signals import got_request_exception\nfrom .signals import request_finished\nfrom .signals import request_started\nfrom .signals import request_tearing_down\nfrom .templating import Environment\nfrom .wrappers import Request\nfrom .wrappers import Response\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from _typeshed.wsgi import StartResponse\n    from _typeshed.wsgi import WSGIEnvironment\n\n    from .testing import FlaskClient\n    from .testing import FlaskCliRunner\n    from .typing import HeadersValue\n\nT_shell_context_processor = t.TypeVar(\n    \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable\n)\nT_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\nT_template_filter = t.TypeVar(\"T_template_filter\", bound=ft.TemplateFilterCallable)\nT_template_global = t.TypeVar(\"T_template_global\", bound=ft.TemplateGlobalCallable)\nT_template_test = t.TypeVar(\"T_template_test\", bound=ft.TemplateTestCallable)\n\n\ndef _make_timedelta(value: timedelta | int | None) -> timedelta | None:\n    if value is None or isinstance(value, timedelta):\n        return value\n\n    return timedelta(seconds=value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask_Flask._The_flask_object_imple": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask_Flask._The_flask_object_imple", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 76, "end_line": 171, "span_ids": ["Flask"], "tokens": 1011}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n    \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: The folder with static files that is served at\n        ``static_url_path``. Relative to the application ``root_path``\n        or an absolute path. Defaults to ``'static'``.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: The path to the root of the application files.\n        This should only be set manually when it can't be detected\n        automatically, such as for namespace packages.\n    \"\"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.default_config_Flask.session_interface": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.default_config_Flask.session_interface", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 173, "end_line": 219, "span_ids": ["Flask"], "tokens": 404}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    default_config = ImmutableDict(\n        {\n            \"DEBUG\": None,\n            \"TESTING\": False,\n            \"PROPAGATE_EXCEPTIONS\": None,\n            \"SECRET_KEY\": None,\n            \"SECRET_KEY_FALLBACKS\": None,\n            \"PERMANENT_SESSION_LIFETIME\": timedelta(days=31),\n            \"USE_X_SENDFILE\": False,\n            \"TRUSTED_HOSTS\": None,\n            \"SERVER_NAME\": None,\n            \"APPLICATION_ROOT\": \"/\",\n            \"SESSION_COOKIE_NAME\": \"session\",\n            \"SESSION_COOKIE_DOMAIN\": None,\n            \"SESSION_COOKIE_PATH\": None,\n            \"SESSION_COOKIE_HTTPONLY\": True,\n            \"SESSION_COOKIE_SECURE\": False,\n            \"SESSION_COOKIE_PARTITIONED\": False,\n            \"SESSION_COOKIE_SAMESITE\": None,\n            \"SESSION_REFRESH_EACH_REQUEST\": True,\n            \"MAX_CONTENT_LENGTH\": None,\n            \"MAX_FORM_MEMORY_SIZE\": 500_000,\n            \"MAX_FORM_PARTS\": 1_000,\n            \"SEND_FILE_MAX_AGE_DEFAULT\": None,\n            \"TRAP_BAD_REQUEST_ERRORS\": None,\n            \"TRAP_HTTP_EXCEPTIONS\": False,\n            \"EXPLAIN_TEMPLATE_LOADING\": False,\n            \"PREFERRED_URL_SCHEME\": \"http\",\n            \"TEMPLATES_AUTO_RELOAD\": None,\n            \"MAX_COOKIE_SIZE\": 4093,\n            \"PROVIDE_AUTOMATIC_OPTIONS\": True,\n        }\n    )\n\n    #: The class that is used for request objects.  See :class:`~flask.Request`\n    #: for more information.\n    request_class: type[Request] = Request\n\n    #: The class that is used for response objects.  See\n    #: :class:`~flask.Response` for more information.\n    response_class: type[Response] = Response\n\n    #: the session interface to use.  By default an instance of\n    #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.\n    #:\n    #: .. versionadded:: 0.8\n    session_interface: SessionInterface = SecureCookieSessionInterface()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.__init___Flask.__init__.if_self_has_static_folder": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.__init___Flask.__init__.if_self_has_static_folder", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 221, "end_line": 274, "span_ids": ["Flask.__init__"], "tokens": 466}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def __init__(\n        self,\n        import_name: str,\n        static_url_path: str | None = None,\n        static_folder: str | os.PathLike[str] | None = \"static\",\n        static_host: str | None = None,\n        host_matching: bool = False,\n        subdomain_matching: bool = False,\n        template_folder: str | os.PathLike[str] | None = \"templates\",\n        instance_path: str | None = None,\n        instance_relative_config: bool = False,\n        root_path: str | None = None,\n    ):\n        super().__init__(\n            import_name=import_name,\n            static_url_path=static_url_path,\n            static_folder=static_folder,\n            static_host=static_host,\n            host_matching=host_matching,\n            subdomain_matching=subdomain_matching,\n            template_folder=template_folder,\n            instance_path=instance_path,\n            instance_relative_config=instance_relative_config,\n            root_path=root_path,\n        )\n\n        #: The Click command group for registering CLI commands for this\n        #: object. The commands are available from the ``flask`` command\n        #: once the application has been discovered and blueprints have\n        #: been registered.\n        self.cli = cli.AppGroup()\n\n        # Set the name of the Click group in case someone wants to add\n        # the app's commands to another CLI tool.\n        self.cli.name = self.name\n\n        # Add a static route using the provided static_url_path, static_host,\n        # and static_folder if there is a configured static_folder.\n        # Note we do this without checking if static_folder exists.\n        # For one, it might be created while the server is running (e.g. during\n        # development). Also, Google App Engine stores static files somewhere\n        if self.has_static_folder:\n            assert bool(static_host) == host_matching, (\n                \"Invalid static_host/host_matching combination\"\n            )\n            # Use a weakref to avoid creating a reference cycle between the app\n            # and the view function (see #3761).\n            self_ref = weakref.ref(self)\n            self.add_url_rule(\n                f\"{self.static_url_path}/<path:filename>\",\n                endpoint=\"static\",\n                host=static_host,\n                view_func=lambda **kw: self_ref().send_static_file(**kw),  # type: ignore # noqa: B950\n            )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.get_send_file_max_age_Flask.get_send_file_max_age._type_ignore_no_any_ret": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.get_send_file_max_age_Flask.get_send_file_max_age._type_ignore_no_any_ret", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 276, "end_line": 301, "span_ids": ["Flask.get_send_file_max_age"], "tokens": 206}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def get_send_file_max_age(self, filename: str | None) -> int | None:\n        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionchanged:: 2.0\n            The default configuration is ``None`` instead of 12 hours.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        value = self.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n\n        if value is None:\n            return None\n\n        if isinstance(value, timedelta):\n            return int(value.total_seconds())\n\n        return value  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.send_static_file_Flask.send_static_file": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.send_static_file_Flask.send_static_file", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 303, "end_line": 323, "span_ids": ["Flask.send_static_file"], "tokens": 179}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def send_static_file(self, filename: str) -> Response:\n        \"\"\"The view function used to serve files from\n        :attr:`static_folder`. A route is automatically registered for\n        this view at :attr:`static_url_path` if :attr:`static_folder` is\n        set.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionadded:: 0.5\n\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError(\"'static_folder' must be set to serve static_files.\")\n\n        # send_file only knows to call get_send_file_max_age on the app,\n        # call it here so it works for blueprints too.\n        max_age = self.get_send_file_max_age(filename)\n        return send_from_directory(\n            t.cast(str, self.static_folder), filename, max_age=max_age\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.open_resource_Flask.open_resource.return_open_path_mode_e": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.open_resource_Flask.open_resource.return_open_path_mode_e", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 325, "end_line": 356, "span_ids": ["Flask.open_resource"], "tokens": 290}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading.\n\n        For example, if the file ``schema.sql`` is next to the file\n        ``app.py`` where the ``Flask`` app is defined, it can be opened\n        with:\n\n        .. code-block:: python\n\n            with app.open_resource(\"schema.sql\") as f:\n                conn.executescript(f.read())\n\n        :param resource: Path to the resource relative to :attr:`root_path`.\n        :param mode: Open the file in this mode. Only reading is supported,\n            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n        :param encoding: Open the file with this encoding when opening in text\n            mode. This is ignored when opening in binary mode.\n\n        .. versionchanged:: 3.1\n            Added the ``encoding`` parameter.\n        \"\"\"\n        if mode not in {\"r\", \"rt\", \"rb\"}:\n            raise ValueError(\"Resources can only be opened for reading.\")\n\n        path = os.path.join(self.root_path, resource)\n\n        if mode == \"rb\":\n            return open(path, mode)  # pyright: ignore\n\n        return open(path, mode, encoding=encoding)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.open_instance_resource_Flask.open_instance_resource": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.open_instance_resource_Flask.open_instance_resource", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 358, "end_line": 378, "span_ids": ["Flask.open_instance_resource"], "tokens": 195}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def open_instance_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to the application's instance folder\n        :attr:`instance_path`. Unlike :meth:`open_resource`, files in the\n        instance folder can be opened for writing.\n\n        :param resource: Path to the resource relative to :attr:`instance_path`.\n        :param mode: Open the file in this mode.\n        :param encoding: Open the file with this encoding when opening in text\n            mode. This is ignored when opening in binary mode.\n\n        .. versionchanged:: 3.1\n            Added the ``encoding`` parameter.\n        \"\"\"\n        path = os.path.join(self.instance_path, resource)\n\n        if \"b\" in mode:\n            return open(path, mode)\n\n        return open(path, mode, encoding=encoding)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.create_jinja_environment_Flask.create_jinja_environment.return_rv": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.create_jinja_environment_Flask.create_jinja_environment.return_rv", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 380, "end_line": 418, "span_ids": ["Flask.create_jinja_environment"], "tokens": 287}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def create_jinja_environment(self) -> Environment:\n        \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        options = dict(self.jinja_options)\n\n        if \"autoescape\" not in options:\n            options[\"autoescape\"] = self.select_jinja_autoescape\n\n        if \"auto_reload\" not in options:\n            auto_reload = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n\n            if auto_reload is None:\n                auto_reload = self.debug\n\n            options[\"auto_reload\"] = auto_reload\n\n        rv = self.jinja_environment(self, **options)\n        rv.globals.update(\n            url_for=self.url_for,\n            get_flashed_messages=get_flashed_messages,\n            config=self.config,\n            # request, session and g are normally added with the\n            # context processor for efficiency reasons but for imported\n            # templates we also want the proxies in there.\n            request=request,\n            session=session,\n            g=g,\n        )\n        rv.policies[\"json.dumps_function\"] = self.json.dumps\n        return rv", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.create_url_adapter_Flask.create_url_adapter.return_None": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.create_url_adapter_Flask.create_url_adapter.return_None", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 420, "end_line": 471, "span_ids": ["Flask.create_url_adapter"], "tokens": 456}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def create_url_adapter(self, request: Request | None) -> MapAdapter | None:\n        \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionchanged:: 3.1\n            If :data:`SERVER_NAME` is set, it does not restrict requests to\n            only that domain, for both ``subdomain_matching`` and\n            ``host_matching``.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n\n        .. versionchanged:: 0.9\n           This can be called outside a request when the URL adapter is created\n           for an application context.\n\n        .. versionadded:: 0.6\n        \"\"\"\n        if request is not None:\n            if (trusted_hosts := self.config[\"TRUSTED_HOSTS\"]) is not None:\n                request.trusted_hosts = trusted_hosts\n\n            # Check trusted_hosts here until bind_to_environ does.\n            request.host = get_host(request.environ, request.trusted_hosts)  # pyright: ignore\n            subdomain = None\n            server_name = self.config[\"SERVER_NAME\"]\n\n            if self.url_map.host_matching:\n                # Don't pass SERVER_NAME, otherwise it's used and the actual\n                # host is ignored, which breaks host matching.\n                server_name = None\n            elif not self.subdomain_matching:\n                # Werkzeug doesn't implement subdomain matching yet. Until then,\n                # disable it by forcing the current subdomain to the default, or\n                # the empty string.\n                subdomain = self.url_map.default_subdomain or \"\"\n\n            return self.url_map.bind_to_environ(\n                request.environ, server_name=server_name, subdomain=subdomain\n            )\n\n        # Need at least SERVER_NAME to match/build outside a request.\n        if self.config[\"SERVER_NAME\"] is not None:\n            return self.url_map.bind(\n                self.config[\"SERVER_NAME\"],\n                script_name=self.config[\"APPLICATION_ROOT\"],\n                url_scheme=self.config[\"PREFERRED_URL_SCHEME\"],\n            )\n\n        return None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.raise_routing_exception_Flask.raise_routing_exception.raise_FormDataRoutingRedi": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.raise_routing_exception_Flask.raise_routing_exception.raise_FormDataRoutingRedi", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 473, "end_line": 499, "span_ids": ["Flask.raise_routing_exception"], "tokens": 189}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def raise_routing_exception(self, request: Request) -> t.NoReturn:\n        \"\"\"Intercept routing exceptions and possibly do something else.\n\n        In debug mode, intercept a routing redirect and replace it with\n        an error if the body will be discarded.\n\n        With modern Werkzeug this shouldn't occur, since it now uses a\n        308 status which tells the browser to resend the method and\n        body.\n\n        .. versionchanged:: 2.1\n            Don't intercept 307 and 308 redirects.\n\n        :meta private:\n        :internal:\n        \"\"\"\n        if (\n            not self.debug\n            or not isinstance(request.routing_exception, RequestRedirect)\n            or request.routing_exception.code in {307, 308}\n            or request.method in {\"GET\", \"HEAD\", \"OPTIONS\"}\n        ):\n            raise request.routing_exception  # type: ignore[misc]\n\n        from .debughelpers import FormDataRoutingRedirect\n\n        raise FormDataRoutingRedirect(request)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.update_template_context_Flask.make_shell_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.update_template_context_Flask.make_shell_context", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 501, "end_line": 539, "span_ids": ["Flask.make_shell_context", "Flask.update_template_context"], "tokens": 327}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def update_template_context(self, context: dict[str, t.Any]) -> None:\n        \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\n        names: t.Iterable[str | None] = (None,)\n\n        # A template may be rendered outside a request context.\n        if (ctx := _cv_app.get(None)) is not None and ctx.has_request:\n            names = chain(names, reversed(ctx.request.blueprints))\n\n        # The values passed to render_template take precedence. Keep a\n        # copy to re-apply after all context functions.\n        orig_ctx = context.copy()\n\n        for name in names:\n            if name in self.template_context_processors:\n                for func in self.template_context_processors[name]:\n                    context.update(self.ensure_sync(func)())\n\n        context.update(orig_ctx)\n\n    def make_shell_context(self) -> dict[str, t.Any]:\n        \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        rv = {\"app\": self, \"g\": g}\n        for processor in self.shell_context_processors:\n            rv.update(processor())\n        return rv", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.run_Flask.run._the_flask_run_command": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.run_Flask.run._the_flask_run_command", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 541, "end_line": 605, "span_ids": ["Flask.run"], "tokens": 683}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def run(\n        self,\n        host: str | None = None,\n        port: int | None = None,\n        debug: bool | None = None,\n        load_dotenv: bool = True,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :doc:`/deploying/index` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\n        # Ignore this call so that it doesn't start another server if\n        # the 'flask run' command is used.\n        # ... other code", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.run.if_os_environ_get_FLASK__Flask.run.try_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.run.if_os_environ_get_FLASK__Flask.run.try_", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 606, "end_line": 662, "span_ids": ["Flask.run"], "tokens": 375}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def run(\n        self,\n        host: str | None = None,\n        port: int | None = None,\n        debug: bool | None = None,\n        load_dotenv: bool = True,\n        **options: t.Any,\n    ) -> None:\n        if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":\n            if not is_running_from_reloader():\n                click.secho(\n                    \" * Ignoring a call to 'app.run()' that would block\"\n                    \" the current 'flask' CLI command.\\n\"\n                    \"   Only call 'app.run()' in an 'if __name__ ==\"\n                    ' \"__main__\"\\' guard.',\n                    fg=\"red\",\n                )\n\n            return\n\n        if get_load_dotenv(load_dotenv):\n            cli.load_dotenv()\n\n            # if set, env var overrides existing value\n            if \"FLASK_DEBUG\" in os.environ:\n                self.debug = get_debug_flag()\n\n        # debug passed to method overrides all other sources\n        if debug is not None:\n            self.debug = bool(debug)\n\n        server_name = self.config.get(\"SERVER_NAME\")\n        sn_host = sn_port = None\n\n        if server_name:\n            sn_host, _, sn_port = server_name.partition(\":\")\n\n        if not host:\n            if sn_host:\n                host = sn_host\n            else:\n                host = \"127.0.0.1\"\n\n        if port or port == 0:\n            port = int(port)\n        elif sn_port:\n            port = int(sn_port)\n        else:\n            port = 5000\n\n        options.setdefault(\"use_reloader\", self.debug)\n        options.setdefault(\"use_debugger\", self.debug)\n        options.setdefault(\"threaded\", True)\n\n        cli.show_server_banner(self.debug, self.name)\n\n        from werkzeug.serving import run_simple\n\n        try:\n            run_simple(t.cast(str, host), port, self, **options)\n        finally:\n            # reset the first request information if the development server\n            # reset normally.  This makes it possible to restart the server\n            # without reloader and that stuff from an interactive shell.\n            self._got_first_request = False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_client_Flask.test_client.return_cls_type_igno": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_client_Flask.test_client.return_cls_type_igno", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 664, "end_line": 720, "span_ids": ["Flask.test_client"], "tokens": 526}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> FlaskClient:\n        \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :doc:`/testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\n        cls = self.test_client_class\n        if cls is None:\n            from .testing import FlaskClient as cls\n        return cls(  # type: ignore\n            self, self.response_class, use_cookies=use_cookies, **kwargs\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_cli_runner_Flask.test_cli_runner": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_cli_runner_Flask.test_cli_runner", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 722, "end_line": 737, "span_ids": ["Flask.test_cli_runner"], "tokens": 128}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def test_cli_runner(self, **kwargs: t.Any) -> FlaskCliRunner:\n        \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        cls = self.test_cli_runner_class\n\n        if cls is None:\n            from .testing import FlaskCliRunner as cls\n\n        return cls(self, **kwargs)  # type: ignore", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_http_exception_Flask.handle_http_exception._type_ignore_no_any_ret": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_http_exception_Flask.handle_http_exception._type_ignore_no_any_ret", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 739, "end_line": 772, "span_ids": ["Flask.handle_http_exception"], "tokens": 262}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def handle_http_exception(\n        self, e: HTTPException\n    ) -> HTTPException | ft.ResponseReturnValue:\n        \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPException`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        # Proxy exceptions don't have error codes.  We want to always return\n        # those unchanged as errors\n        if e.code is None:\n            return e\n\n        # RoutingExceptions are used internally to trigger routing\n        # actions, such as slash redirects raising RequestRedirect. They\n        # are not raised or handled in user code.\n        if isinstance(e, RoutingException):\n            return e\n\n        handler = self._find_error_handler(e, request.blueprints)\n        if handler is None:\n            return e\n        return self.ensure_sync(handler)(e)  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_user_exception_Flask.handle_user_exception._type_ignore_no_any_ret": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_user_exception_Flask.handle_user_exception._type_ignore_no_any_ret", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 774, "end_line": 804, "span_ids": ["Flask.handle_user_exception"], "tokens": 237}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def handle_user_exception(\n        self, e: Exception\n    ) -> HTTPException | ft.ResponseReturnValue:\n        \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        if isinstance(e, BadRequestKeyError) and (\n            self.debug or self.config[\"TRAP_BAD_REQUEST_ERRORS\"]\n        ):\n            e.show_exception = True\n\n        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n            return self.handle_http_exception(e)\n\n        handler = self._find_error_handler(e, request.blueprints)\n\n        if handler is None:\n            raise\n\n        return self.ensure_sync(handler)(e)  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_exception_Flask.handle_exception.return_self_finalize_requ": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.handle_exception_Flask.handle_exception.return_self_finalize_requ", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 806, "end_line": 857, "span_ids": ["Flask.handle_exception"], "tokens": 427}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def handle_exception(self, e: Exception) -> Response:\n        \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        exc_info = sys.exc_info()\n        got_request_exception.send(self, _async_wrapper=self.ensure_sync, exception=e)\n        propagate = self.config[\"PROPAGATE_EXCEPTIONS\"]\n\n        if propagate is None:\n            propagate = self.testing or self.debug\n\n        if propagate:\n            # Re-raise if called with an active exception, otherwise\n            # raise the passed in exception.\n            if exc_info[1] is e:\n                raise\n\n            raise e\n\n        self.log_exception(exc_info)\n        server_error: InternalServerError | ft.ResponseReturnValue\n        server_error = InternalServerError(original_exception=e)\n        handler = self._find_error_handler(server_error, request.blueprints)\n\n        if handler is not None:\n            server_error = self.ensure_sync(handler)(server_error)\n\n        return self.finalize_request(server_error, from_error_handler=True)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.log_exception_Flask.log_exception": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.log_exception_Flask.log_exception", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 859, "end_line": 872, "span_ids": ["Flask.log_exception"], "tokens": 123}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def log_exception(\n        self,\n        exc_info: (tuple[type, BaseException, TracebackType] | tuple[None, None, None]),\n    ) -> None:\n        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        self.logger.error(\n            f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.dispatch_request_Flask.dispatch_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.dispatch_request_Flask.dispatch_request", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 874, "end_line": 898, "span_ids": ["Flask.dispatch_request"], "tokens": 268}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def dispatch_request(self) -> ft.ResponseReturnValue:\n        \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\n        req = _cv_app.get().request\n\n        if req.routing_exception is not None:\n            self.raise_routing_exception(req)\n        rule: Rule = req.url_rule  # type: ignore[assignment]\n        # if we provide automatic options for this URL and the\n        # request came with the OPTIONS method, reply automatically\n        if (\n            getattr(rule, \"provide_automatic_options\", False)\n            and req.method == \"OPTIONS\"\n        ):\n            return self.make_default_options_response()\n        # otherwise dispatch to the handler for that endpoint\n        view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]\n        return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.full_dispatch_request_Flask.full_dispatch_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.full_dispatch_request_Flask.full_dispatch_request", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 900, "end_line": 916, "span_ids": ["Flask.full_dispatch_request"], "tokens": 121}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def full_dispatch_request(self) -> Response:\n        \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        self._got_first_request = True\n\n        try:\n            request_started.send(self, _async_wrapper=self.ensure_sync)\n            rv = self.preprocess_request()\n            if rv is None:\n                rv = self.dispatch_request()\n        except Exception as e:\n            rv = self.handle_user_exception(e)\n        return self.finalize_request(rv)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.finalize_request_Flask.finalize_request.return_response": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.finalize_request_Flask.finalize_request.return_response", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 918, "end_line": 947, "span_ids": ["Flask.finalize_request"], "tokens": 215}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def finalize_request(\n        self,\n        rv: ft.ResponseReturnValue | HTTPException,\n        from_error_handler: bool = False,\n    ) -> Response:\n        \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\n        response = self.make_response(rv)\n        try:\n            response = self.process_response(response)\n            request_finished.send(\n                self, _async_wrapper=self.ensure_sync, response=response\n            )\n        except Exception:\n            if not from_error_handler:\n                raise\n            self.logger.exception(\n                \"Request finalizing failed with an error while handling an error\"\n            )\n        return response", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_default_options_response_Flask.make_default_options_response": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_default_options_response_Flask.make_default_options_response", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 949, "end_line": 960, "span_ids": ["Flask.make_default_options_response"], "tokens": 103}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def make_default_options_response(self) -> Response:\n        \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        adapter = _cv_app.get().url_adapter\n        methods = adapter.allowed_methods()  # type: ignore[union-attr]\n        rv = self.response_class()\n        rv.allow.update(methods)\n        return rv", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.ensure_sync_Flask.ensure_sync": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.ensure_sync_Flask.ensure_sync", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 962, "end_line": 974, "span_ids": ["Flask.ensure_sync"], "tokens": 107}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n        \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        if iscoroutinefunction(func):\n            return self.async_to_sync(func)\n\n        return func", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.async_to_sync_Flask.async_to_sync": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.async_to_sync_Flask.async_to_sync", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 976, "end_line": 997, "span_ids": ["Flask.async_to_sync"], "tokens": 166}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def async_to_sync(\n        self, func: t.Callable[..., t.Coroutine[t.Any, t.Any, t.Any]]\n    ) -> t.Callable[..., t.Any]:\n        \"\"\"Return a sync function that will run the coroutine function.\n\n        .. code-block:: python\n\n            result = app.async_to_sync(func)(*args, **kwargs)\n\n        Override this method to change how the app converts async code\n        to be synchronously callable.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        try:\n            from asgiref.sync import async_to_sync as asgiref_async_to_sync\n        except ImportError:\n            raise RuntimeError(\n                \"Install Flask with the 'async' extra in order to use async views.\"\n            ) from None\n\n        return asgiref_async_to_sync(func)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.url_for_Flask.url_for._Generate_a_URL_to_the_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.url_for_Flask.url_for._Generate_a_URL_to_the_", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 999, "end_line": 1055, "span_ids": ["Flask.url_for"], "tokens": 593}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def url_for(\n        self,\n        /,\n        endpoint: str,\n        *,\n        _anchor: str | None = None,\n        _method: str | None = None,\n        _scheme: str | None = None,\n        _external: bool | None = None,\n        **values: t.Any,\n    ) -> str:\n        \"\"\"Generate a URL to the given endpoint with the given values.\n\n        This is called by :func:`flask.url_for`, and can be called\n        directly as well.\n\n        An *endpoint* is the name of a URL rule, usually added with\n        :meth:`@app.route() <route>`, and usually the same name as the\n        view function. A route defined in a :class:`~flask.Blueprint`\n        will prepend the blueprint's name separated by a ``.`` to the\n        endpoint.\n\n        In some cases, such as email messages, you want URLs to include\n        the scheme and domain, like ``https://example.com/hello``. When\n        not in an active request, URLs will be external by default, but\n        this requires setting :data:`SERVER_NAME` so Flask knows what\n        domain to use. :data:`APPLICATION_ROOT` and\n        :data:`PREFERRED_URL_SCHEME` should also be configured as\n        needed. This config is only used when not in an active request.\n\n        Functions can be decorated with :meth:`url_defaults` to modify\n        keyword arguments before the URL is built.\n\n        If building fails for some reason, such as an unknown endpoint\n        or incorrect values, the app's :meth:`handle_url_build_error`\n        method is called. If that returns a string, that is returned,\n        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.\n\n        :param endpoint: The endpoint name associated with the URL to\n            generate. If this starts with a ``.``, the current blueprint\n            name (if any) will be used.\n        :param _anchor: If given, append this as ``#anchor`` to the URL.\n        :param _method: If given, generate the URL associated with this\n            method for the endpoint.\n        :param _scheme: If given, the URL will have this scheme if it\n            is external.\n        :param _external: If given, prefer the URL to be internal\n            (False) or require it to be external (True). External URLs\n            include the scheme and domain. When not in an active\n            request, URLs are external by default.\n        :param values: Values to use for the variable parts of the URL\n            rule. Unknown keys are appended as query string arguments,\n            like ``?a=b&c=d``.\n\n        .. versionadded:: 2.2\n            Moved from ``flask.url_for``, which calls this method.\n        \"\"\"\n        # ... other code", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.url_for.if_ctx__cv_app_get_No_Flask.url_for.return_rv": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.url_for.if_ctx__cv_app_get_No_Flask.url_for.return_rv", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1056, "end_line": 1119, "span_ids": ["Flask.url_for"], "tokens": 478}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def url_for(\n        self,\n        /,\n        endpoint: str,\n        *,\n        _anchor: str | None = None,\n        _method: str | None = None,\n        _scheme: str | None = None,\n        _external: bool | None = None,\n        **values: t.Any,\n    ) -> str:\n        if (ctx := _cv_app.get(None)) is not None and ctx.has_request:\n            url_adapter = ctx.url_adapter\n            blueprint_name = ctx.request.blueprint\n\n            # If the endpoint starts with \".\" and the request matches a\n            # blueprint, the endpoint is relative to the blueprint.\n            if endpoint[:1] == \".\":\n                if blueprint_name is not None:\n                    endpoint = f\"{blueprint_name}{endpoint}\"\n                else:\n                    endpoint = endpoint[1:]\n\n            # When in a request, generate a URL without scheme and\n            # domain by default, unless a scheme is given.\n            if _external is None:\n                _external = _scheme is not None\n        else:\n            # If called by helpers.url_for, an app context is active,\n            # use its url_adapter. Otherwise, app.url_for was called\n            # directly, build an adapter.\n            if ctx is not None:\n                url_adapter = ctx.url_adapter\n            else:\n                url_adapter = self.create_url_adapter(None)\n\n            if url_adapter is None:\n                raise RuntimeError(\n                    \"Unable to build URLs outside an active request\"\n                    \" without 'SERVER_NAME' configured. Also configure\"\n                    \" 'APPLICATION_ROOT' and 'PREFERRED_URL_SCHEME' as\"\n                    \" needed.\"\n                )\n\n            # When outside a request, generate a URL with scheme and\n            # domain by default.\n            if _external is None:\n                _external = True\n\n        # It is an error to set _scheme when _external=False, in order\n        # to avoid accidental insecure URLs.\n        if _scheme is not None and not _external:\n            raise ValueError(\"When specifying '_scheme', '_external' must be True.\")\n\n        self.inject_url_defaults(endpoint, values)\n\n        try:\n            rv = url_adapter.build(  # type: ignore[union-attr]\n                endpoint,\n                values,\n                method=_method,\n                url_scheme=_scheme,\n                force_external=_external,\n            )\n        except BuildError as error:\n            values.update(\n                _anchor=_anchor, _method=_method, _scheme=_scheme, _external=_external\n            )\n            return self.handle_url_build_error(error, endpoint, values)\n\n        if _anchor is not None:\n            _anchor = _url_quote(_anchor, safe=\"%!#$&'()*+,/:;=?@\")\n            rv = f\"{rv}#{_anchor}\"\n\n        return rv", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_response_Flask.make_response._make_sure_the_body_is_a": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_response_Flask.make_response._make_sure_the_body_is_a", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1121, "end_line": 1210, "span_ids": ["Flask.make_response"], "tokens": 719}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def make_response(self, rv: ft.ResponseReturnValue) -> Response:\n        \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str``\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes``\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``list``\n                A list that will be jsonify'd before being returned.\n\n            ``generator`` or ``iterator``\n                A generator that returns ``str`` or ``bytes`` to be\n                streamed as the response.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 2.2\n            A generator will be converted to a streaming response.\n            A list will be converted to a JSON response.\n\n        .. versionchanged:: 1.1\n            A dict will be converted to a JSON response.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\n\n        status: int | None = None\n        headers: HeadersValue | None = None\n\n        # unpack tuple returns\n        if isinstance(rv, tuple):\n            len_rv = len(rv)\n\n            # a 3-tuple is unpacked directly\n            if len_rv == 3:\n                rv, status, headers = rv  # type: ignore[misc]\n            # decide if a 2-tuple has status or headers\n            elif len_rv == 2:\n                if isinstance(rv[1], (Headers, dict, tuple, list)):\n                    rv, headers = rv  # pyright: ignore\n                else:\n                    rv, status = rv  # type: ignore[assignment,misc]\n            # other sized tuples are not allowed\n            else:\n                raise TypeError(\n                    \"The view function did not return a valid response tuple.\"\n                    \" The tuple must have the form (body, status, headers),\"\n                    \" (body, status), or (body, headers).\"\n                )\n\n        # the body must not be None\n        if rv is None:\n            raise TypeError(\n                f\"The view function for {request.endpoint!r} did not\"\n                \" return a valid response. The function either returned\"\n                \" None or ended without a return statement.\"\n            )\n\n        # make sure the body is an instance of the response class\n        # ... other code", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_response.if_not_isinstance_rv_sel_Flask.make_response.return_rv": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.make_response.if_not_isinstance_rv_sel_Flask.make_response.return_rv", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1211, "end_line": 1261, "span_ids": ["Flask.make_response"], "tokens": 406}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def make_response(self, rv: ft.ResponseReturnValue) -> Response:\n        # ... other code\n        if not isinstance(rv, self.response_class):\n            if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, cabc.Iterator):\n                # let the response class set the status and headers instead of\n                # waiting to do it manually, so that the class can handle any\n                # special logic\n                rv = self.response_class(\n                    rv,  # pyright: ignore\n                    status=status,\n                    headers=headers,  # type: ignore[arg-type]\n                )\n                status = headers = None\n            elif isinstance(rv, (dict, list)):\n                rv = self.json.response(rv)\n            elif isinstance(rv, BaseResponse) or callable(rv):\n                # evaluate a WSGI callable, or coerce a different response\n                # class to the correct type\n                try:\n                    rv = self.response_class.force_type(\n                        rv,  # type: ignore[arg-type]\n                        request.environ,\n                    )\n                except TypeError as e:\n                    raise TypeError(\n                        f\"{e}\\nThe view function did not return a valid\"\n                        \" response. The return type must be a string,\"\n                        \" dict, list, tuple with headers or status,\"\n                        \" Response instance, or WSGI callable, but it\"\n                        f\" was a {type(rv).__name__}.\"\n                    ).with_traceback(sys.exc_info()[2]) from None\n            else:\n                raise TypeError(\n                    \"The view function did not return a valid\"\n                    \" response. The return type must be a string,\"\n                    \" dict, list, tuple with headers or status,\"\n                    \" Response instance, or WSGI callable, but it was a\"\n                    f\" {type(rv).__name__}.\"\n                )\n\n        rv = t.cast(Response, rv)\n        # prefer the status if it was provided\n        if status is not None:\n            if isinstance(status, (str, bytes, bytearray)):\n                rv.status = status\n            else:\n                rv.status_code = status\n\n        # extend existing headers with provided headers\n        if headers:\n            rv.headers.update(headers)\n\n        return rv", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.preprocess_request_Flask.preprocess_request.return_None": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.preprocess_request_Flask.preprocess_request.return_None", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1263, "end_line": 1289, "span_ids": ["Flask.preprocess_request"], "tokens": 222}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def preprocess_request(self) -> ft.ResponseReturnValue | None:\n        \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\n        req = _cv_app.get().request\n        names = (None, *reversed(req.blueprints))\n\n        for name in names:\n            if name in self.url_value_preprocessors:\n                for url_func in self.url_value_preprocessors[name]:\n                    url_func(req.endpoint, req.view_args)\n\n        for name in names:\n            if name in self.before_request_funcs:\n                for before_func in self.before_request_funcs[name]:\n                    rv = self.ensure_sync(before_func)()\n\n                    if rv is not None:\n                        return rv  # type: ignore[no-any-return]\n\n        return None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.process_response_Flask.process_response.return_response": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.process_response_Flask.process_response.return_response", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1291, "end_line": 1317, "span_ids": ["Flask.process_response"], "tokens": 227}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def process_response(self, response: Response) -> Response:\n        \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\n        ctx = _cv_app.get()\n\n        for func in ctx._after_request_functions:\n            response = self.ensure_sync(func)(response)\n\n        for name in chain(ctx.request.blueprints, (None,)):\n            if name in self.after_request_funcs:\n                for func in reversed(self.after_request_funcs[name]):\n                    response = self.ensure_sync(func)(response)\n\n        if not self.session_interface.is_null_session(ctx.session):\n            self.session_interface.save_session(self, ctx.session, response)\n\n        return response", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.do_teardown_request_Flask.do_teardown_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.do_teardown_request_Flask.do_teardown_request", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1319, "end_line": 1341, "span_ids": ["Flask.do_teardown_request"], "tokens": 217}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def do_teardown_request(self, exc: BaseException | None = None) -> None:\n        \"\"\"Called after the request is dispatched and the response is finalized,\n        right before the request context is popped. Called by\n        :meth:`.AppContext.pop`.\n\n        This calls all functions decorated with :meth:`teardown_request`, and\n        :meth:`Blueprint.teardown_request` if a blueprint handled the request.\n        Finally, the :data:`request_tearing_down` signal is sent.\n\n        :param exc: An unhandled exception raised while dispatching the request.\n            Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\n        req = _cv_app.get().request\n\n        for name in chain(req.blueprints, (None,)):\n            if name in self.teardown_request_funcs:\n                for func in reversed(self.teardown_request_funcs[name]):\n                    self.ensure_sync(func)(exc)\n\n        request_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.do_teardown_appcontext_Flask.do_teardown_appcontext": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.do_teardown_appcontext_Flask.do_teardown_appcontext", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1343, "end_line": 1358, "span_ids": ["Flask.do_teardown_appcontext"], "tokens": 149}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def do_teardown_appcontext(self, exc: BaseException | None = None) -> None:\n        \"\"\"Called right before the application context is popped. Called by\n        :meth:`.AppContext.pop`.\n\n        This calls all functions decorated with :meth:`teardown_appcontext`.\n        Then the :data:`appcontext_tearing_down` signal is sent.\n\n        :param exc: An unhandled exception raised while the context was active.\n            Passed to each teardown function.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        for func in reversed(self.teardown_appcontext_funcs):\n            self.ensure_sync(func)(exc)\n\n        appcontext_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.app_context_Flask.app_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.app_context_Flask.app_context", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1360, "end_line": 1378, "span_ids": ["Flask.app_context"], "tokens": 141}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def app_context(self) -> AppContext:\n        \"\"\"Create an :class:`.AppContext`. When the context is pushed,\n        :data:`.current_app` and :data:`.g` become available.\n\n        A context is automatically pushed when handling each request, and when\n        running any ``flask`` CLI command. Use this as a ``with`` block to\n        manually push a context outside of those situations, such as during\n        setup or testing.\n\n        .. code-block:: python\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        return AppContext(self)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.request_context_Flask.request_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.request_context_Flask.request_context", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1380, "end_line": 1394, "span_ids": ["Flask.request_context"], "tokens": 168}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def request_context(self, environ: WSGIEnvironment) -> AppContext:\n        \"\"\"Create an :class:`.AppContext` with request information representing\n        the given WSGI environment. A context is automatically pushed when\n        handling each request. When the context is pushed, :data:`.request`,\n        :data:`.session`, :data:`g:, and :data:`.current_app` become available.\n\n        This method should not be used in your own code. Creating a valid WSGI\n        environ is not trivial. Use :meth:`test_request_context` to correctly\n        create a WSGI environ and request context instead.\n\n        See :doc:`/appcontext`.\n\n        :param environ: A WSGI environment.\n        \"\"\"\n        return AppContext.from_environ(self, environ)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_request_context_Flask.test_request_context.return_self_request_conte": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.test_request_context_Flask.test_request_context.return_self_request_conte", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1396, "end_line": 1443, "span_ids": ["Flask.test_request_context"], "tokens": 451}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> AppContext:\n        \"\"\"Create an :class:`.AppContext` with request information created from\n        the given arguments. When the context is pushed, :data:`.request`,\n        :data:`.session`, :data:`g:, and :data:`.current_app` become available.\n\n        This is useful during testing to run a function that uses request data\n        without dispatching a full request. Use this as a ``with`` block to push\n        a context.\n\n        .. code-block:: python\n\n            with app.test_request_context(...):\n                generate_report()\n\n        See :doc:`/appcontext`.\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``, :data:`SERVER_NAME`,\n            and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to prepend to :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body text or bytes,or a dict of form data.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: Other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: Other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\n        from .testing import EnvironBuilder\n\n        builder = EnvironBuilder(self, *args, **kwargs)\n\n        try:\n            environ = builder.get_environ()\n        finally:\n            builder.close()\n\n        return self.request_context(environ)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.wsgi_app_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/app.py_Flask.wsgi_app_", "embedding": null, "metadata": {"file_path": "src/flask/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1445, "end_line": 1501, "span_ids": ["Flask.__call__", "Flask.wsgi_app"], "tokens": 442}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Flask(App):\n\n    def wsgi_app(\n        self, environ: WSGIEnvironment, start_response: StartResponse\n    ) -> cabc.Iterable[bytes]:\n        \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\n        ctx = self.request_context(environ)\n        error: BaseException | None = None\n        try:\n            try:\n                ctx.push()\n                response = self.full_dispatch_request()\n            except Exception as e:\n                error = e\n                response = self.handle_exception(e)\n            except:  # noqa: B001\n                error = sys.exc_info()[1]\n                raise\n            return response(environ, start_response)\n        finally:\n            if \"werkzeug.debug.preserve_context\" in environ:\n                environ[\"werkzeug.debug.preserve_context\"](_cv_app.get())\n\n            if error is not None and self.should_ignore_error(error):\n                error = None\n\n            ctx.pop(error)\n\n    def __call__(\n        self, environ: WSGIEnvironment, start_response: StartResponse\n    ) -> cabc.Iterable[bytes]:\n        \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app`, which can be\n        wrapped to apply middleware.\n        \"\"\"\n        return self.wsgi_app(environ, start_response)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_from___future___import_an_Blueprint.__init__.self.cli.name": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_from___future___import_an_Blueprint.__init__.self.cli.name", "embedding": null, "metadata": {"file_path": "src/flask/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 53, "span_ids": ["Blueprint", "Blueprint.__init__", "imports"], "tokens": 351}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport os\nimport typing as t\nfrom datetime import timedelta\n\nfrom .cli import AppGroup\nfrom .globals import current_app\nfrom .helpers import send_from_directory\nfrom .sansio.blueprints import Blueprint as SansioBlueprint\nfrom .sansio.blueprints import BlueprintSetupState as BlueprintSetupState  # noqa\nfrom .sansio.scaffold import _sentinel\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from .wrappers import Response\n\n\nclass Blueprint(SansioBlueprint):\n    def __init__(\n        self,\n        name: str,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        url_prefix: str | None = None,\n        subdomain: str | None = None,\n        url_defaults: dict[str, t.Any] | None = None,\n        root_path: str | None = None,\n        cli_group: str | None = _sentinel,  # type: ignore\n    ) -> None:\n        super().__init__(\n            name,\n            import_name,\n            static_folder,\n            static_url_path,\n            template_folder,\n            url_prefix,\n            subdomain,\n            url_defaults,\n            root_path,\n            cli_group,\n        )\n\n        #: The Click command group for registering CLI commands for this\n        #: object. The commands are available from the ``flask`` command\n        #: once the application has been discovered and blueprints have\n        #: been registered.\n        self.cli = AppGroup()\n\n        # Set the name of the Click group in case someone wants to add\n        # the app's commands to another CLI tool.\n        self.cli.name = self.name", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.get_send_file_max_age_Blueprint.get_send_file_max_age._type_ignore_no_any_ret": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.get_send_file_max_age_Blueprint.get_send_file_max_age._type_ignore_no_any_ret", "embedding": null, "metadata": {"file_path": "src/flask/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 55, "end_line": 80, "span_ids": ["Blueprint.get_send_file_max_age"], "tokens": 207}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(SansioBlueprint):\n\n    def get_send_file_max_age(self, filename: str | None) -> int | None:\n        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionchanged:: 2.0\n            The default configuration is ``None`` instead of 12 hours.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        value = current_app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n\n        if value is None:\n            return None\n\n        if isinstance(value, timedelta):\n            return int(value.total_seconds())\n\n        return value  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.send_static_file_Blueprint.send_static_file": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.send_static_file_Blueprint.send_static_file", "embedding": null, "metadata": {"file_path": "src/flask/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 82, "end_line": 102, "span_ids": ["Blueprint.send_static_file"], "tokens": 179}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(SansioBlueprint):\n\n    def send_static_file(self, filename: str) -> Response:\n        \"\"\"The view function used to serve files from\n        :attr:`static_folder`. A route is automatically registered for\n        this view at :attr:`static_url_path` if :attr:`static_folder` is\n        set.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionadded:: 0.5\n\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError(\"'static_folder' must be set to serve static_files.\")\n\n        # send_file only knows to call get_send_file_max_age on the app,\n        # call it here so it works for blueprints too.\n        max_age = self.get_send_file_max_age(filename)\n        return send_from_directory(\n            t.cast(str, self.static_folder), filename, max_age=max_age\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.open_resource_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/blueprints.py_Blueprint.open_resource_", "embedding": null, "metadata": {"file_path": "src/flask/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 104, "end_line": 129, "span_ids": ["Blueprint.open_resource"], "tokens": 254}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(SansioBlueprint):\n\n    def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading. The\n        blueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\n        method.\n\n        :param resource: Path to the resource relative to :attr:`root_path`.\n        :param mode: Open the file in this mode. Only reading is supported,\n            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n        :param encoding: Open the file with this encoding when opening in text\n            mode. This is ignored when opening in binary mode.\n\n        .. versionchanged:: 3.1\n            Added the ``encoding`` parameter.\n        \"\"\"\n        if mode not in {\"r\", \"rt\", \"rb\"}:\n            raise ValueError(\"Resources can only be opened for reading.\")\n\n        path = os.path.join(self.root_path, resource)\n\n        if mode == \"rb\":\n            return open(path, mode)  # pyright: ignore\n\n        return open(path, mode, encoding=encoding)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_from___future___import_an_NoAppException._Raised_if_an_applicati": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_from___future___import_an_NoAppException._Raised_if_an_applicati", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 38, "span_ids": ["NoAppException", "imports"], "tokens": 175}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport ast\nimport collections.abc as cabc\nimport importlib.metadata\nimport inspect\nimport os\nimport platform\nimport re\nimport sys\nimport traceback\nimport typing as t\nfrom functools import update_wrapper\nfrom operator import itemgetter\nfrom types import ModuleType\n\nimport click\nfrom click.core import ParameterSource\nfrom werkzeug import run_simple\nfrom werkzeug.serving import is_running_from_reloader\nfrom werkzeug.utils import import_string\n\nfrom .globals import current_app\nfrom .helpers import get_debug_flag\nfrom .helpers import get_load_dotenv\n\nif t.TYPE_CHECKING:\n    import ssl\n\n    from _typeshed.wsgi import StartResponse\n    from _typeshed.wsgi import WSGIApplication\n    from _typeshed.wsgi import WSGIEnvironment\n\n    from .app import Flask\n\n\nclass NoAppException(click.UsageError):\n    \"\"\"Raised if an application cannot be found or loaded.\"\"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_find_best_app_find_best_app.raise_NoAppException_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_find_best_app_find_best_app.raise_NoAppException_", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 41, "end_line": 91, "span_ids": ["find_best_app"], "tokens": 363}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def find_best_app(module: ModuleType) -> Flask:\n    \"\"\"Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    \"\"\"\n    from . import Flask\n\n    # Search for the most common names first.\n    for attr_name in (\"app\", \"application\"):\n        app = getattr(module, attr_name, None)\n\n        if isinstance(app, Flask):\n            return app\n\n    # Otherwise find the only object that is a Flask instance.\n    matches = [v for v in module.__dict__.values() if isinstance(v, Flask)]\n\n    if len(matches) == 1:\n        return matches[0]\n    elif len(matches) > 1:\n        raise NoAppException(\n            \"Detected multiple Flask applications in module\"\n            f\" '{module.__name__}'. Use '{module.__name__}:name'\"\n            \" to specify the correct one.\"\n        )\n\n    # Search for app factory functions.\n    for attr_name in (\"create_app\", \"make_app\"):\n        app_factory = getattr(module, attr_name, None)\n\n        if inspect.isfunction(app_factory):\n            try:\n                app = app_factory()\n\n                if isinstance(app, Flask):\n                    return app\n            except TypeError as e:\n                if not _called_with_wrong_args(app_factory):\n                    raise\n\n                raise NoAppException(\n                    f\"Detected factory '{attr_name}' in module '{module.__name__}',\"\n                    \" but could not call it without arguments. Use\"\n                    f\" '{module.__name__}:{attr_name}(args)'\"\n                    \" to specify arguments.\"\n                ) from e\n\n    raise NoAppException(\n        \"Failed to find Flask application or factory in module\"\n        f\" '{module.__name__}'. Use '{module.__name__}:name'\"\n        \" to specify one.\"\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__called_with_wrong_args__called_with_wrong_args": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__called_with_wrong_args__called_with_wrong_args", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 94, "end_line": 117, "span_ids": ["_called_with_wrong_args"], "tokens": 171}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _called_with_wrong_args(f: t.Callable[..., Flask]) -> bool:\n    \"\"\"Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param f: The function that was called.\n    :return: ``True`` if the call failed.\n    \"\"\"\n    tb = sys.exc_info()[2]\n\n    try:\n        while tb is not None:\n            if tb.tb_frame.f_code is f.__code__:\n                # In the function, it was called successfully.\n                return False\n\n            tb = tb.tb_next\n\n        # Didn't reach the function.\n        return True\n    finally:\n        # Delete tb to break a circular reference.\n        # https://docs.python.org/2/library/sys.html#sys.exc_info\n        del tb", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_find_app_by_string_find_app_by_string.raise_NoAppException_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_find_app_by_string_find_app_by_string.raise_NoAppException_", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 120, "end_line": 197, "span_ids": ["find_app_by_string"], "tokens": 556}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def find_app_by_string(module: ModuleType, app_name: str) -> Flask:\n    \"\"\"Check if the given string is a variable name or a function. Call\n    a function to get the app instance, or return the variable directly.\n    \"\"\"\n    from . import Flask\n\n    # Parse app_name as a single expression to determine if it's a valid\n    # attribute name or function call.\n    try:\n        expr = ast.parse(app_name.strip(), mode=\"eval\").body\n    except SyntaxError:\n        raise NoAppException(\n            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n        ) from None\n\n    if isinstance(expr, ast.Name):\n        name = expr.id\n        args = []\n        kwargs = {}\n    elif isinstance(expr, ast.Call):\n        # Ensure the function name is an attribute name only.\n        if not isinstance(expr.func, ast.Name):\n            raise NoAppException(\n                f\"Function reference must be a simple name: {app_name!r}.\"\n            )\n\n        name = expr.func.id\n\n        # Parse the positional and keyword arguments as literals.\n        try:\n            args = [ast.literal_eval(arg) for arg in expr.args]\n            kwargs = {\n                kw.arg: ast.literal_eval(kw.value)\n                for kw in expr.keywords\n                if kw.arg is not None\n            }\n        except ValueError:\n            # literal_eval gives cryptic error messages, show a generic\n            # message with the full expression instead.\n            raise NoAppException(\n                f\"Failed to parse arguments as literal values: {app_name!r}.\"\n            ) from None\n    else:\n        raise NoAppException(\n            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n        )\n\n    try:\n        attr = getattr(module, name)\n    except AttributeError as e:\n        raise NoAppException(\n            f\"Failed to find attribute {name!r} in {module.__name__!r}.\"\n        ) from e\n\n    # If the attribute is a function, call it with any args and kwargs\n    # to get the real application.\n    if inspect.isfunction(attr):\n        try:\n            app = attr(*args, **kwargs)\n        except TypeError as e:\n            if not _called_with_wrong_args(attr):\n                raise\n\n            raise NoAppException(\n                f\"The factory {app_name!r} in module\"\n                f\" {module.__name__!r} could not be called with the\"\n                \" specified arguments.\"\n            ) from e\n    else:\n        app = attr\n\n    if isinstance(app, Flask):\n        return app\n\n    raise NoAppException(\n        \"A valid Flask application was not obtained from\"\n        f\" '{module.__name__}:{app_name}'.\"\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_prepare_import_locate_app_5": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_prepare_import_locate_app_5", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 200, "end_line": 238, "span_ids": ["locate_app", "locate_app_5", "prepare_import"], "tokens": 253}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def prepare_import(path: str) -> str:\n    \"\"\"Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    \"\"\"\n    path = os.path.realpath(path)\n\n    fname, ext = os.path.splitext(path)\n    if ext == \".py\":\n        path = fname\n\n    if os.path.basename(path) == \"__init__\":\n        path = os.path.dirname(path)\n\n    module_name = []\n\n    # move up until outside package structure (no __init__.py)\n    while True:\n        path, name = os.path.split(path)\n        module_name.append(name)\n\n        if not os.path.exists(os.path.join(path, \"__init__.py\")):\n            break\n\n    if sys.path[0] != path:\n        sys.path.insert(0, path)\n\n    return \".\".join(module_name[::-1])\n\n\n@t.overload\ndef locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: t.Literal[True] = True\n) -> Flask: ...\n\n\n@t.overload\ndef locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: t.Literal[False] = ...\n) -> Flask | None: ...", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_locate_app_6_locate_app_6": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_locate_app_6_locate_app_6", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 241, "end_line": 264, "span_ids": ["locate_app_6"], "tokens": 208}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: bool = True\n) -> Flask | None:\n    try:\n        __import__(module_name)\n    except ImportError:\n        # Reraise the ImportError if it occurred within the imported module.\n        # Determine this by checking whether the trace has a depth > 1.\n        if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]\n            raise NoAppException(\n                f\"While importing {module_name!r}, an ImportError was\"\n                f\" raised:\\n\\n{traceback.format_exc()}\"\n            ) from None\n        elif raise_if_not_found:\n            raise NoAppException(f\"Could not import {module_name!r}.\") from None\n        else:\n            return None\n\n    module = sys.modules[module_name]\n\n    if app_name is None:\n        return find_best_app(module)\n    else:\n        return find_app_by_string(module, app_name)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_get_version_version_option": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_get_version_version_option", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 267, "end_line": 290, "span_ids": ["get_version", "impl:2"], "tokens": 152}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def get_version(ctx: click.Context, param: click.Parameter, value: t.Any) -> None:\n    if not value or ctx.resilient_parsing:\n        return\n\n    flask_version = importlib.metadata.version(\"flask\")\n    werkzeug_version = importlib.metadata.version(\"werkzeug\")\n\n    click.echo(\n        f\"Python {platform.python_version()}\\n\"\n        f\"Flask {flask_version}\\n\"\n        f\"Werkzeug {werkzeug_version}\",\n        color=ctx.color,\n    )\n    ctx.exit()\n\n\nversion_option = click.Option(\n    [\"--version\"],\n    help=\"Show the Flask version.\",\n    expose_value=False,\n    callback=get_version,\n    is_flag=True,\n    is_eager=True,\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_ScriptInfo_ScriptInfo.__init__.self._loaded_app": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_ScriptInfo_ScriptInfo.__init__.self._loaded_app", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 293, "end_line": 331, "span_ids": ["ScriptInfo", "ScriptInfo.__init__"], "tokens": 331}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class ScriptInfo:\n    \"\"\"Helper object to deal with Flask applications.  This is usually not\n    necessary to interface with as it's used internally in the dispatching\n    to click.  In future versions of Flask this object will most likely play\n    a bigger role.  Typically it's created automatically by the\n    :class:`FlaskGroup` but you can also manually create it and pass it\n    onwards as click object.\n\n    .. versionchanged:: 3.1\n        Added the ``load_dotenv_defaults`` parameter and attribute.\n    \"\"\"\n\n    def __init__(\n        self,\n        app_import_path: str | None = None,\n        create_app: t.Callable[..., Flask] | None = None,\n        set_debug_flag: bool = True,\n        load_dotenv_defaults: bool = True,\n    ) -> None:\n        #: Optionally the import path for the Flask application.\n        self.app_import_path = app_import_path\n        #: Optionally a function that is passed the script info to create\n        #: the instance of the application.\n        self.create_app = create_app\n        #: A dictionary with arbitrary data that can be associated with\n        #: this script info.\n        self.data: dict[t.Any, t.Any] = {}\n        self.set_debug_flag = set_debug_flag\n\n        self.load_dotenv_defaults = get_load_dotenv(load_dotenv_defaults)\n        \"\"\"Whether default ``.flaskenv`` and ``.env`` files should be loaded.\n\n        ``ScriptInfo`` doesn't load anything, this is for reference when doing\n        the load elsewhere during processing.\n\n        .. versionadded:: 3.1\n        \"\"\"\n\n        self._loaded_app: Flask | None = None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_ScriptInfo.load_app_ScriptInfo.load_app.return_app": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_ScriptInfo.load_app_ScriptInfo.load_app.return_app", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 333, "end_line": 372, "span_ids": ["ScriptInfo.load_app"], "tokens": 308}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class ScriptInfo:\n\n    def load_app(self) -> Flask:\n        \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        \"\"\"\n        if self._loaded_app is not None:\n            return self._loaded_app\n        app: Flask | None = None\n        if self.create_app is not None:\n            app = self.create_app()\n        else:\n            if self.app_import_path:\n                path, name = (\n                    re.split(r\":(?![\\\\/])\", self.app_import_path, maxsplit=1) + [None]\n                )[:2]\n                import_name = prepare_import(path)\n                app = locate_app(import_name, name)\n            else:\n                for path in (\"wsgi.py\", \"app.py\"):\n                    import_name = prepare_import(path)\n                    app = locate_app(import_name, None, raise_if_not_found=False)\n\n                    if app is not None:\n                        break\n\n        if app is None:\n            raise NoAppException(\n                \"Could not locate a Flask application. Use the\"\n                \" 'flask --app' option, 'FLASK_APP' environment\"\n                \" variable, or a 'wsgi.py' or 'app.py' file in the\"\n                \" current directory.\"\n            )\n\n        if self.set_debug_flag:\n            # Update the app's debug flag through the descriptor so that\n            # other values repopulate as well.\n            app.debug = get_debug_flag()\n\n        self._loaded_app = app\n        return app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_pass_script_info_with_appcontext": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_pass_script_info_with_appcontext", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 375, "end_line": 402, "span_ids": ["impl:3", "with_appcontext"], "tokens": 244}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "pass_script_info = click.make_pass_decorator(ScriptInfo, ensure=True)\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\n\n\ndef with_appcontext(f: F) -> F:\n    \"\"\"Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.\n\n    Custom commands (and their options) registered under ``app.cli`` or\n    ``blueprint.cli`` will always have an app context available, this\n    decorator is not required in that case.\n\n    .. versionchanged:: 2.2\n        The app context is active for subcommands as well as the\n        decorated callback. The app context is always available to\n        ``app.cli`` command and parameter callbacks.\n    \"\"\"\n\n    @click.pass_context\n    def decorator(ctx: click.Context, /, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        if not current_app:\n            app = ctx.ensure_object(ScriptInfo).load_app()\n            ctx.with_resource(app.app_context())\n\n        return ctx.invoke(f, *args, **kwargs)\n\n    return update_wrapper(decorator, f)  # type: ignore[return-value]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_AppGroup_AppGroup.command": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_AppGroup_AppGroup.command", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 405, "end_line": 427, "span_ids": ["AppGroup", "AppGroup.command"], "tokens": 235}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppGroup(click.Group):\n    \"\"\"This works similar to a regular click :class:`~click.Group` but it\n    changes the behavior of the :meth:`command` decorator so that it\n    automatically wraps the functions in :func:`with_appcontext`.\n\n    Not to be confused with :class:`FlaskGroup`.\n    \"\"\"\n\n    def command(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Command]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n        unless it's disabled by passing ``with_appcontext=False``.\n        \"\"\"\n        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)\n\n        def decorator(f: t.Callable[..., t.Any]) -> click.Command:\n            if wrap_for_ctx:\n                f = with_appcontext(f)\n            return super(AppGroup, self).command(*args, **kwargs)(f)  # type: ignore[no-any-return]\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_AppGroup.group_AppGroup.group": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_AppGroup.group_AppGroup.group", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 429, "end_line": 437, "span_ids": ["AppGroup.group"], "tokens": 113}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppGroup(click.Group):\n\n    def group(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Group]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it defaults the group class to\n        :class:`AppGroup`.\n        \"\"\"\n        kwargs.setdefault(\"cls\", AppGroup)\n        return super().group(*args, **kwargs)  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__set_app__app_option": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__set_app__app_option", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 440, "end_line": 465, "span_ids": ["_set_app", "impl:5"], "tokens": 234}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _set_app(ctx: click.Context, param: click.Option, value: str | None) -> str | None:\n    if value is None:\n        return None\n\n    info = ctx.ensure_object(ScriptInfo)\n    info.app_import_path = value\n    return value\n\n\n# This option is eager so the app will be available if --help is given.\n# --help is also eager, so --app must be before it in the param list.\n# no_args_is_help bypasses eager processing, so this option must be\n# processed manually in that case to ensure FLASK_APP gets picked up.\n_app_option = click.Option(\n    [\"-A\", \"--app\"],\n    metavar=\"IMPORT\",\n    help=(\n        \"The Flask application or factory function to load, in the form 'module:name'.\"\n        \" Module can be a dotted import or file path. Name is not required if it is\"\n        \" 'app', 'application', 'create_app', or 'make_app', and can be 'name(args)' to\"\n        \" pass arguments.\"\n    ),\n    is_eager=True,\n    expose_value=False,\n    callback=_set_app,\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__set_debug__debug_option": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__set_debug__debug_option", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 468, "end_line": 490, "span_ids": ["_set_debug", "impl:8"], "tokens": 181}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | None:\n    # If the flag isn't provided, it will default to False. Don't use\n    # that, let debug be set by env in that case.\n    source = ctx.get_parameter_source(param.name)  # type: ignore[arg-type]\n\n    if source is not None and source in (\n        ParameterSource.DEFAULT,\n        ParameterSource.DEFAULT_MAP,\n    ):\n        return None\n\n    # Set with env var instead of ScriptInfo.load so that it can be\n    # accessed early during a factory function.\n    os.environ[\"FLASK_DEBUG\"] = \"1\" if value else \"0\"\n    return value\n\n\n_debug_option = click.Option(\n    [\"--debug/--no-debug\"],\n    help=\"Set debug mode.\",\n    expose_value=False,\n    callback=_set_debug,\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__env_file_callback__env_file_callback": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__env_file_callback__env_file_callback", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 493, "end_line": 512, "span_ids": ["_env_file_callback"], "tokens": 172}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _env_file_callback(\n    ctx: click.Context, param: click.Option, value: str | None\n) -> str | None:\n    try:\n        import dotenv  # noqa: F401\n    except ImportError:\n        # Only show an error if a value was passed, otherwise we still want to\n        # call load_dotenv and show a message without exiting.\n        if value is not None:\n            raise click.BadParameter(\n                \"python-dotenv must be installed to load an env file.\",\n                ctx=ctx,\n                param=param,\n            ) from None\n\n    # Load if a value was passed, or we want to load default files, or both.\n    if value is not None or ctx.obj.load_dotenv_defaults:\n        load_dotenv(value, load_defaults=ctx.obj.load_dotenv_defaults)\n\n    return value", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__This_option_is_eager_so_4__env_file_option": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__This_option_is_eager_so_4__env_file_option", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 515, "end_line": 528, "span_ids": ["impl:9"], "tokens": 123}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "# This option is eager so env vars are loaded as early as possible to be\n# used by other options.\n_env_file_option = click.Option(\n    [\"-e\", \"--env-file\"],\n    type=click.Path(exists=True, dir_okay=False),\n    help=(\n        \"Load environment variables from this file, taking precedence over\"\n        \" those set by '.env' and '.flaskenv'. Variables set directly in the\"\n        \" environment take highest precedence. python-dotenv must be installed.\"\n    ),\n    is_eager=True,\n    expose_value=False,\n    callback=_env_file_callback,\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup_FlaskGroup._load_plugin_commands": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup_FlaskGroup._load_plugin_commands", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 531, "end_line": 607, "span_ids": ["FlaskGroup", "FlaskGroup.__init__", "FlaskGroup._load_plugin_commands"], "tokens": 669}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskGroup(AppGroup):\n    \"\"\"Special subclass of the :class:`AppGroup` group that supports\n    loading more commands from the configured Flask app.  Normally a\n    developer does not have to interface with this class but there are\n    some very advanced use cases for which it makes sense to create an\n    instance of this. see :ref:`custom-scripts`.\n\n    :param add_default_commands: if this is True then the default run and\n        shell commands will be added.\n    :param add_version_option: adds the ``--version`` option.\n    :param create_app: an optional callback that is passed the script info and\n        returns the loaded app.\n    :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n        files to set environment variables. Will also change the working\n        directory to the directory containing the first file found.\n    :param set_debug_flag: Set the app's debug flag.\n\n    .. versionchanged:: 3.1\n        ``-e path`` takes precedence over default ``.env`` and ``.flaskenv`` files.\n\n    .. versionchanged:: 2.2\n        Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.\n\n    .. versionchanged:: 2.2\n        An app context is pushed when running ``app.cli`` commands, so\n        ``@with_appcontext`` is no longer required for those commands.\n\n    .. versionchanged:: 1.0\n        If installed, python-dotenv will be used to load environment variables\n        from :file:`.env` and :file:`.flaskenv` files.\n    \"\"\"\n\n    def __init__(\n        self,\n        add_default_commands: bool = True,\n        create_app: t.Callable[..., Flask] | None = None,\n        add_version_option: bool = True,\n        load_dotenv: bool = True,\n        set_debug_flag: bool = True,\n        **extra: t.Any,\n    ) -> None:\n        params: list[click.Parameter] = list(extra.pop(\"params\", None) or ())\n        # Processing is done with option callbacks instead of a group\n        # callback. This allows users to make a custom group callback\n        # without losing the behavior. --env-file must come first so\n        # that it is eagerly evaluated before --app.\n        params.extend((_env_file_option, _app_option, _debug_option))\n\n        if add_version_option:\n            params.append(version_option)\n\n        if \"context_settings\" not in extra:\n            extra[\"context_settings\"] = {}\n\n        extra[\"context_settings\"].setdefault(\"auto_envvar_prefix\", \"FLASK\")\n\n        super().__init__(params=params, **extra)\n\n        self.create_app = create_app\n        self.load_dotenv = load_dotenv\n        self.set_debug_flag = set_debug_flag\n\n        if add_default_commands:\n            self.add_command(run_command)\n            self.add_command(shell_command)\n            self.add_command(routes_command)\n\n        self._loaded_plugin_commands = False\n\n    def _load_plugin_commands(self) -> None:\n        if self._loaded_plugin_commands:\n            return\n\n        for ep in importlib.metadata.entry_points(group=\"flask.commands\"):\n            self.add_command(ep.load(), ep.name)\n\n        self._loaded_plugin_commands = True", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.get_command_FlaskGroup.get_command.return_app_cli_get_comman": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.get_command_FlaskGroup.get_command.return_app_cli_get_comman", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 609, "end_line": 634, "span_ids": ["FlaskGroup.get_command"], "tokens": 210}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskGroup(AppGroup):\n\n    def get_command(self, ctx: click.Context, name: str) -> click.Command | None:\n        self._load_plugin_commands()\n        # Look up built-in and plugin commands, which should be\n        # available even if the app fails to load.\n        rv = super().get_command(ctx, name)\n\n        if rv is not None:\n            return rv\n\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Look up commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        try:\n            app = info.load_app()\n        except NoAppException as e:\n            click.secho(f\"Error: {e.format_message()}\\n\", err=True, fg=\"red\")\n            return None\n\n        # Push an app context for the loaded app unless it is already\n        # active somehow. This makes the context available to parameter\n        # and command callbacks without needing @with_appcontext.\n        if not current_app or current_app._get_current_object() is not app:\n            ctx.with_resource(app.app_context())\n\n        return app.cli.get_command(ctx, name)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.list_commands_FlaskGroup.list_commands": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.list_commands_FlaskGroup.list_commands", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 636, "end_line": 655, "span_ids": ["FlaskGroup.list_commands"], "tokens": 192}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskGroup(AppGroup):\n\n    def list_commands(self, ctx: click.Context) -> list[str]:\n        self._load_plugin_commands()\n        # Start with the built-in and plugin commands.\n        rv = set(super().list_commands(ctx))\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Add commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        try:\n            rv.update(info.load_app().cli.list_commands(ctx))\n        except NoAppException as e:\n            # When an app couldn't be loaded, show the error message\n            # without the traceback.\n            click.secho(f\"Error: {e.format_message()}\\n\", err=True, fg=\"red\")\n        except Exception:\n            # When any other errors occurred during loading, show the\n            # full traceback.\n            click.secho(f\"{traceback.format_exc()}\\n\", err=True, fg=\"red\")\n\n        return sorted(rv)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.make_context_FlaskGroup.make_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.make_context_FlaskGroup.make_context", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 657, "end_line": 676, "span_ids": ["FlaskGroup.make_context"], "tokens": 183}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskGroup(AppGroup):\n\n    def make_context(\n        self,\n        info_name: str | None,\n        args: list[str],\n        parent: click.Context | None = None,\n        **extra: t.Any,\n    ) -> click.Context:\n        # Set a flag to tell app.run to become a no-op. If app.run was\n        # not in a __name__ == __main__ guard, it would start the server\n        # when importing, blocking whatever command is being called.\n        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"\n\n        if \"obj\" not in extra and \"obj\" not in self.context_settings:\n            extra[\"obj\"] = ScriptInfo(\n                create_app=self.create_app,\n                set_debug_flag=self.set_debug_flag,\n                load_dotenv_defaults=self.load_dotenv,\n            )\n\n        return super().make_context(info_name, args, parent=parent, **extra)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.parse_args__path_is_ancestor": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_FlaskGroup.parse_args__path_is_ancestor", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 678, "end_line": 695, "span_ids": ["FlaskGroup.parse_args", "_path_is_ancestor"], "tokens": 212}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskGroup(AppGroup):\n\n    def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:\n        if (not args and self.no_args_is_help) or (\n            len(args) == 1 and args[0] in self.get_help_option_names(ctx)\n        ):\n            # Attempt to load --env-file and --app early in case they\n            # were given as env vars. Otherwise no_args_is_help will not\n            # see commands from app.cli.\n            _env_file_option.handle_parse_result(ctx, {}, [])\n            _app_option.handle_parse_result(ctx, {}, [])\n\n        return super().parse_args(ctx, args)\n\n\ndef _path_is_ancestor(path: str, other: str) -> bool:\n    \"\"\"Take ``other`` and remove the length of ``path`` from it. Then join it\n    to ``path``. If it is the original value, ``path`` is an ancestor of\n    ``other``.\"\"\"\n    return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_load_dotenv_load_dotenv._True_if_at_least_one_en": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_load_dotenv_load_dotenv._True_if_at_least_one_en", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 698, "end_line": 763, "span_ids": ["load_dotenv"], "tokens": 526}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def load_dotenv(\n    path: str | os.PathLike[str] | None = None, load_defaults: bool = True\n) -> bool:\n    \"\"\"Load \"dotenv\" files to set environment variables. A given path takes\n    precedence over ``.env``, which takes precedence over ``.flaskenv``. After\n    loading and combining these files, values are only set if the key is not\n    already set in ``os.environ``.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location.\n    :param load_defaults: Search for and load the default ``.flaskenv`` and\n        ``.env`` files.\n    :return: ``True`` if at least one env var was loaded.\n\n    .. versionchanged:: 3.1\n        Added the ``load_defaults`` parameter. A given path takes precedence\n        over default files.\n\n    .. versionchanged:: 2.0\n        The current directory is not changed to the location of the\n        loaded file.\n\n    .. versionchanged:: 2.0\n        When loading the env files, set the default encoding to UTF-8.\n\n    .. versionchanged:: 1.1.0\n        Returns ``False`` when python-dotenv is not installed, or when\n        the given path isn't a file.\n\n    .. versionadded:: 1.0\n    \"\"\"\n    try:\n        import dotenv\n    except ImportError:\n        if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):\n            click.secho(\n                \" * Tip: There are .env files present. Install python-dotenv\"\n                \" to use them.\",\n                fg=\"yellow\",\n                err=True,\n            )\n\n        return False\n\n    data: dict[str, str | None] = {}\n\n    if load_defaults:\n        for default_name in (\".flaskenv\", \".env\"):\n            if not (default_path := dotenv.find_dotenv(default_name, usecwd=True)):\n                continue\n\n            data |= dotenv.dotenv_values(default_path, encoding=\"utf-8\")\n\n    if path is not None and os.path.isfile(path):\n        data |= dotenv.dotenv_values(path, encoding=\"utf-8\")\n\n    for key, value in data.items():\n        if key in os.environ or value is None:\n            continue\n\n        os.environ[key] = value\n\n    return bool(data)  # True if at least one env var was loaded.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_show_server_banner_show_server_banner": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_show_server_banner_show_server_banner", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 766, "end_line": 777, "span_ids": ["show_server_banner"], "tokens": 102}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def show_server_banner(debug: bool, app_import_path: str | None) -> None:\n    \"\"\"Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    \"\"\"\n    if is_running_from_reloader():\n        return\n\n    if app_import_path is not None:\n        click.echo(f\" * Serving Flask app '{app_import_path}'\")\n\n    if debug is not None:\n        click.echo(f\" * Debug mode: {'on' if debug else 'off'}\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_CertParamType_CertParamType.convert.try__1": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_CertParamType_CertParamType.convert.try__1", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 780, "end_line": 825, "span_ids": ["CertParamType", "CertParamType.__init__", "CertParamType.convert"], "tokens": 277}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class CertParamType(click.ParamType):\n    \"\"\"Click option type for the ``--cert`` option. Allows either an\n    existing file, the string ``'adhoc'``, or an import for a\n    :class:`~ssl.SSLContext` object.\n    \"\"\"\n\n    name = \"path\"\n\n    def __init__(self) -> None:\n        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)\n\n    def convert(\n        self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n    ) -> t.Any:\n        try:\n            import ssl\n        except ImportError:\n            raise click.BadParameter(\n                'Using \"--cert\" requires Python to be compiled with SSL support.',\n                ctx,\n                param,\n            ) from None\n\n        try:\n            return self.path_type(value, param, ctx)\n        except click.BadParameter:\n            value = click.STRING(value, param, ctx).lower()\n\n            if value == \"adhoc\":\n                try:\n                    import cryptography  # noqa: F401\n                except ImportError:\n                    raise click.BadParameter(\n                        \"Using ad-hoc certificates requires the cryptography library.\",\n                        ctx,\n                        param,\n                    ) from None\n\n                return value\n\n            obj = import_string(value, silent=True)\n\n            if isinstance(obj, ssl.SSLContext):\n                return obj\n\n            raise", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__validate_key__validate_key.return_value": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py__validate_key__validate_key.return_value", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 828, "end_line": 864, "span_ids": ["_validate_key"], "tokens": 263}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _validate_key(ctx: click.Context, param: click.Parameter, value: t.Any) -> t.Any:\n    \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.\n    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.\n    \"\"\"\n    cert = ctx.params.get(\"cert\")\n    is_adhoc = cert == \"adhoc\"\n\n    try:\n        import ssl\n    except ImportError:\n        is_context = False\n    else:\n        is_context = isinstance(cert, ssl.SSLContext)\n\n    if value is not None:\n        if is_adhoc:\n            raise click.BadParameter(\n                'When \"--cert\" is \"adhoc\", \"--key\" is not used.', ctx, param\n            )\n\n        if is_context:\n            raise click.BadParameter(\n                'When \"--cert\" is an SSLContext object, \"--key\" is not used.',\n                ctx,\n                param,\n            )\n\n        if not cert:\n            raise click.BadParameter('\"--cert\" must also be specified.', ctx, param)\n\n        ctx.params[\"cert\"] = cert, value\n\n    else:\n        if cert and not (is_adhoc or is_context):\n            raise click.BadParameter('Required when using \"--cert\".', ctx, param)\n\n    return value", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_SeparatedPathType_SeparatedPathType.convert": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_SeparatedPathType_SeparatedPathType.convert", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 867, "end_line": 879, "span_ids": ["SeparatedPathType", "SeparatedPathType.convert"], "tokens": 140}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SeparatedPathType(click.Path):\n    \"\"\"Click option type that accepts a list of values separated by the\n    OS's path separator (``:``, ``;`` on Windows). Each value is\n    validated as a :class:`click.Path` type.\n    \"\"\"\n\n    def convert(\n        self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n    ) -> t.Any:\n        items = self.split_envvar_value(value)\n        # can't call no-arg super() inside list comprehension until Python 3.12\n        super_convert = super().convert\n        return [super_convert(item, param, ctx) for item in items]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_run_command_run_command.run_simple_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_run_command_run_command.run_simple_", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 882, "end_line": 993, "span_ids": ["run_command"], "tokens": 736}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@click.command(\"run\", short_help=\"Run a development server.\")\n@click.option(\"--host\", \"-h\", default=\"127.0.0.1\", help=\"The interface to bind to.\")\n@click.option(\"--port\", \"-p\", default=5000, help=\"The port to bind to.\")\n@click.option(\n    \"--cert\",\n    type=CertParamType(),\n    help=\"Specify a certificate file to use HTTPS.\",\n    is_eager=True,\n)\n@click.option(\n    \"--key\",\n    type=click.Path(exists=True, dir_okay=False, resolve_path=True),\n    callback=_validate_key,\n    expose_value=False,\n    help=\"The key file to use when specifying a certificate.\",\n)\n@click.option(\n    \"--reload/--no-reload\",\n    default=None,\n    help=\"Enable or disable the reloader. By default the reloader \"\n    \"is active if debug is enabled.\",\n)\n@click.option(\n    \"--debugger/--no-debugger\",\n    default=None,\n    help=\"Enable or disable the debugger. By default the debugger \"\n    \"is active if debug is enabled.\",\n)\n@click.option(\n    \"--with-threads/--without-threads\",\n    default=True,\n    help=\"Enable or disable multithreading.\",\n)\n@click.option(\n    \"--extra-files\",\n    default=None,\n    type=SeparatedPathType(),\n    help=(\n        \"Extra files that trigger a reload on change. Multiple paths\"\n        f\" are separated by {os.path.pathsep!r}.\"\n    ),\n)\n@click.option(\n    \"--exclude-patterns\",\n    default=None,\n    type=SeparatedPathType(),\n    help=(\n        \"Files matching these fnmatch patterns will not trigger a reload\"\n        \" on change. Multiple patterns are separated by\"\n        f\" {os.path.pathsep!r}.\"\n    ),\n)\n@pass_script_info\ndef run_command(\n    info: ScriptInfo,\n    host: str,\n    port: int,\n    reload: bool,\n    debugger: bool,\n    with_threads: bool,\n    cert: ssl.SSLContext | tuple[str, str | None] | t.Literal[\"adhoc\"] | None,\n    extra_files: list[str] | None,\n    exclude_patterns: list[str] | None,\n) -> None:\n    \"\"\"Run a local development server.\n\n    This server is for development purposes only. It does not provide\n    the stability, security, or performance of production WSGI servers.\n\n    The reloader and debugger are enabled by default with the '--debug'\n    option.\n    \"\"\"\n    try:\n        app: WSGIApplication = info.load_app()  # pyright: ignore\n    except Exception as e:\n        if is_running_from_reloader():\n            # When reloading, print out the error immediately, but raise\n            # it later so the debugger or server can handle it.\n            traceback.print_exc()\n            err = e\n\n            def app(\n                environ: WSGIEnvironment, start_response: StartResponse\n            ) -> cabc.Iterable[bytes]:\n                raise err from None\n\n        else:\n            # When not reloading, raise the error immediately so the\n            # command fails.\n            raise e from None\n\n    debug = get_debug_flag()\n\n    if reload is None:\n        reload = debug\n\n    if debugger is None:\n        debugger = debug\n\n    show_server_banner(debug, info.app_import_path)\n\n    run_simple(\n        host,\n        port,\n        app,\n        use_reloader=reload,\n        use_debugger=debugger,\n        threaded=with_threads,\n        ssl_context=cert,\n        extra_files=extra_files,\n        exclude_patterns=exclude_patterns,\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_run_command_params_insert_shell_command.code_interact_banner_bann": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_run_command_params_insert_shell_command.code_interact_banner_bann", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 996, "end_line": 1045, "span_ids": ["impl:12", "shell_command"], "tokens": 357}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "run_command.params.insert(0, _debug_option)\n\n\n@click.command(\"shell\", short_help=\"Run a shell in the app context.\")\n@with_appcontext\ndef shell_command() -> None:\n    \"\"\"Run an interactive Python shell in the context of a given\n    Flask application.  The application will populate the default\n    namespace of this shell according to its configuration.\n\n    This is useful for executing small snippets of management code\n    without having to manually configure the application.\n    \"\"\"\n    import code\n\n    banner = (\n        f\"Python {sys.version} on {sys.platform}\\n\"\n        f\"App: {current_app.import_name}\\n\"\n        f\"Instance: {current_app.instance_path}\"\n    )\n    ctx: dict[str, t.Any] = {}\n\n    # Support the regular Python interpreter startup script if someone\n    # is using it.\n    startup = os.environ.get(\"PYTHONSTARTUP\")\n    if startup and os.path.isfile(startup):\n        with open(startup) as f:\n            eval(compile(f.read(), startup, \"exec\"), ctx)\n\n    ctx.update(current_app.make_shell_context())\n\n    # Site, customize, or startup script can set a hook to call when\n    # entering interactive mode. The default one sets up readline with\n    # tab and history completion.\n    interactive_hook = getattr(sys, \"__interactivehook__\", None)\n\n    if interactive_hook is not None:\n        try:\n            import readline\n            from rlcompleter import Completer\n        except ImportError:\n            pass\n        else:\n            # rlcompleter uses __main__.__dict__ by default, which is\n            # flask.__main__. Use the shell context instead.\n            readline.set_completer(Completer(ctx).complete)\n\n        interactive_hook()\n\n    code.interact(banner=banner, local=ctx)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_routes_command_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/cli.py_routes_command_", "embedding": null, "metadata": {"file_path": "src/flask/cli.py", "file_name": "cli.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1048, "end_line": 1128, "span_ids": ["impl:13", "impl:14", "main", "routes_command"], "tokens": 505}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@click.command(\"routes\", short_help=\"Show the routes for the app.\")\n@click.option(\n    \"--sort\",\n    \"-s\",\n    type=click.Choice((\"endpoint\", \"methods\", \"domain\", \"rule\", \"match\")),\n    default=\"endpoint\",\n    help=(\n        \"Method to sort routes by. 'match' is the order that Flask will match routes\"\n        \" when dispatching a request.\"\n    ),\n)\n@click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@with_appcontext\ndef routes_command(sort: str, all_methods: bool) -> None:\n    \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n    rules = list(current_app.url_map.iter_rules())\n\n    if not rules:\n        click.echo(\"No routes were registered.\")\n        return\n\n    ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}\n    host_matching = current_app.url_map.host_matching\n    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n    rows = []\n\n    for rule in rules:\n        row = [\n            rule.endpoint,\n            \", \".join(sorted((rule.methods or set()) - ignored_methods)),\n        ]\n\n        if has_domain:\n            row.append((rule.host if host_matching else rule.subdomain) or \"\")\n\n        row.append(rule.rule)\n        rows.append(row)\n\n    headers = [\"Endpoint\", \"Methods\"]\n    sorts = [\"endpoint\", \"methods\"]\n\n    if has_domain:\n        headers.append(\"Host\" if host_matching else \"Subdomain\")\n        sorts.append(\"domain\")\n\n    headers.append(\"Rule\")\n    sorts.append(\"rule\")\n\n    try:\n        rows.sort(key=itemgetter(sorts.index(sort)))\n    except ValueError:\n        pass\n\n    rows.insert(0, headers)\n    widths = [max(len(row[i]) for row in rows) for i in range(len(headers))]\n    rows.insert(1, [\"-\" * w for w in widths])\n    template = \"  \".join(f\"{{{i}:<{w}}}\" for i, w in enumerate(widths))\n\n    for row in rows:\n        click.echo(template.format(*row))\n\n\ncli = FlaskGroup(\n    name=\"flask\",\n    help=\"\"\"\\\nA general utility script for Flask applications.\n\nAn application to load must be given with the '--app' option,\n'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file\nin the current directory.\n\"\"\",\n)\n\n\ndef main() -> None:\n    cli.main()\n\n\nif __name__ == \"__main__\":\n    main()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_from___future___import_an_ConfigAttribute.__set__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_from___future___import_an_ConfigAttribute.__set__", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 47, "span_ids": ["ConfigAttribute", "ConfigAttribute.__get__", "ConfigAttribute.__get___1", "ConfigAttribute.__get___2", "ConfigAttribute.__init__", "ConfigAttribute.__set__", "imports"], "tokens": 278}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport errno\nimport json\nimport os\nimport types\nimport typing as t\n\nfrom werkzeug.utils import import_string\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n\n    from .sansio.app import App\n\n\nT = t.TypeVar(\"T\")\n\n\nclass ConfigAttribute(t.Generic[T]):\n    \"\"\"Makes an attribute forward to the config\"\"\"\n\n    def __init__(\n        self, name: str, get_converter: t.Callable[[t.Any], T] | None = None\n    ) -> None:\n        self.__name__ = name\n        self.get_converter = get_converter\n\n    @t.overload\n    def __get__(self, obj: None, owner: None) -> te.Self: ...\n\n    @t.overload\n    def __get__(self, obj: App, owner: type[App]) -> T: ...\n\n    def __get__(self, obj: App | None, owner: type[App] | None = None) -> T | te.Self:\n        if obj is None:\n            return self\n\n        rv = obj.config[self.__name__]\n\n        if self.get_converter is not None:\n            rv = self.get_converter(rv)\n\n        return rv  # type: ignore[no-any-return]\n\n    def __set__(self, obj: App, value: t.Any) -> None:\n        obj.config[self.__name__] = value", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config_Config.__init__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config_Config.__init__", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 50, "end_line": 100, "span_ids": ["Config", "Config.__init__"], "tokens": 425}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):  # type: ignore[type-arg]\n    \"\"\"Works exactly like a dict but provides ways to fill it from files\n    or special dictionaries.  There are two common patterns to populate the\n    config.\n\n    Either you can fill the config from a config file::\n\n        app.config.from_pyfile('yourconfig.cfg')\n\n    Or alternatively you can define the configuration options in the\n    module that calls :meth:`from_object` or provide an import path to\n    a module that should be loaded.  It is also possible to tell it to\n    use the same module and with that provide the configuration values\n    just before the call::\n\n        DEBUG = True\n        SECRET_KEY = 'development key'\n        app.config.from_object(__name__)\n\n    In both cases (loading from any Python file or loading from modules),\n    only uppercase keys are added to the config.  This makes it possible to use\n    lowercase values in the config file for temporary values that are not added\n    to the config or to define the config keys in the same file that implements\n    the application.\n\n    Probably the most interesting way to load configurations is from an\n    environment variable pointing to a file::\n\n        app.config.from_envvar('YOURAPPLICATION_SETTINGS')\n\n    In this case before launching the application you have to set this\n    environment variable to the file you want to use.  On Linux and OS X\n    use the export statement::\n\n        export YOURAPPLICATION_SETTINGS='/path/to/config/file'\n\n    On windows use `set` instead.\n\n    :param root_path: path to which files are read relative from.  When the\n                      config object is created by the application, this is\n                      the application's :attr:`~flask.Flask.root_path`.\n    :param defaults: an optional dictionary of default values\n    \"\"\"\n\n    def __init__(\n        self,\n        root_path: str | os.PathLike[str],\n        defaults: dict[str, t.Any] | None = None,\n    ) -> None:\n        super().__init__(defaults or {})\n        self.root_path = root_path", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_envvar_Config.from_envvar": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_envvar_Config.from_envvar", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 102, "end_line": 124, "span_ids": ["Config.from_envvar"], "tokens": 202}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):\n\n    def from_envvar(self, variable_name: str, silent: bool = False) -> bool:\n        \"\"\"Loads a configuration from an environment variable pointing to\n        a configuration file.  This is basically just a shortcut with nicer\n        error messages for this line of code::\n\n            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n        :param variable_name: name of the environment variable\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: ``True`` if the file was loaded successfully.\n        \"\"\"\n        rv = os.environ.get(variable_name)\n        if not rv:\n            if silent:\n                return False\n            raise RuntimeError(\n                f\"The environment variable {variable_name!r} is not set\"\n                \" and as such configuration could not be loaded. Set\"\n                \" this variable and make it point to a configuration\"\n                \" file\"\n            )\n        return self.from_pyfile(rv, silent=silent)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_prefixed_env_Config.from_prefixed_env.return_True": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_prefixed_env_Config.from_prefixed_env.return_True", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 126, "end_line": 185, "span_ids": ["Config.from_prefixed_env"], "tokens": 409}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):\n\n    def from_prefixed_env(\n        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads\n    ) -> bool:\n        \"\"\"Load any environment variables that start with ``FLASK_``,\n        dropping the prefix from the env key for the config key. Values\n        are passed through a loading function to attempt to convert them\n        to more specific types than strings.\n\n        Keys are loaded in :func:`sorted` order.\n\n        The default loading function attempts to parse values as any\n        valid JSON type, including dicts and lists.\n\n        Specific items in nested dicts can be set by separating the\n        keys with double underscores (``__``). If an intermediate key\n        doesn't exist, it will be initialized to an empty dict.\n\n        :param prefix: Load env vars that start with this prefix,\n            separated with an underscore (``_``).\n        :param loads: Pass each string value to this function and use\n            the returned value as the config value. If any error is\n            raised it is ignored and the value remains a string. The\n            default is :func:`json.loads`.\n\n        .. versionadded:: 2.1\n        \"\"\"\n        prefix = f\"{prefix}_\"\n\n        for key in sorted(os.environ):\n            if not key.startswith(prefix):\n                continue\n\n            value = os.environ[key]\n            key = key.removeprefix(prefix)\n\n            try:\n                value = loads(value)\n            except Exception:\n                # Keep the value as a string if loading failed.\n                pass\n\n            if \"__\" not in key:\n                # A non-nested key, set directly.\n                self[key] = value\n                continue\n\n            # Traverse nested dictionaries with keys separated by \"__\".\n            current = self\n            *parts, tail = key.split(\"__\")\n\n            for part in parts:\n                # If an intermediate dict does not exist, create it.\n                if part not in current:\n                    current[part] = {}\n\n                current = current[part]\n\n            current[tail] = value\n\n        return True", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_pyfile_Config.from_pyfile.return_True": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_pyfile_Config.from_pyfile.return_True", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 187, "end_line": 216, "span_ids": ["Config.from_pyfile"], "tokens": 268}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):\n\n    def from_pyfile(\n        self, filename: str | os.PathLike[str], silent: bool = False\n    ) -> bool:\n        \"\"\"Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.\n\n        :param filename: the filename of the config.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 0.7\n           `silent` parameter.\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        d = types.ModuleType(\"config\")\n        d.__file__ = filename\n        try:\n            with open(filename, mode=\"rb\") as config_file:\n                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n                return False\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n        self.from_object(d)\n        return True", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_object_Config.from_object.for_key_in_dir_obj_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_object_Config.from_object.for_key_in_dir_obj_", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 218, "end_line": 254, "span_ids": ["Config.from_object"], "tokens": 336}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):\n\n    def from_object(self, obj: object | str) -> None:\n        \"\"\"Updates the values from the given object.  An object can be of one\n        of the following two types:\n\n        -   a string: in this case the object with that name will be imported\n        -   an actual object reference: that object is used directly\n\n        Objects are usually either modules or classes. :meth:`from_object`\n        loads only the uppercase attributes of the module/class. A ``dict``\n        object will not work with :meth:`from_object` because the keys of a\n        ``dict`` are not attributes of the ``dict`` class.\n\n        Example of module-based configuration::\n\n            app.config.from_object('yourapplication.default_config')\n            from yourapplication import default_config\n            app.config.from_object(default_config)\n\n        Nothing is done to the object before loading. If the object is a\n        class and has ``@property`` attributes, it needs to be\n        instantiated before being passed to this method.\n\n        You should not use this function to load the actual configuration but\n        rather configuration defaults.  The actual config should be loaded\n        with :meth:`from_pyfile` and ideally from a location not within the\n        package because the package might be installed system wide.\n\n        See :ref:`config-dev-prod` for an example of class-based configuration\n        using :meth:`from_object`.\n\n        :param obj: an import name or object\n        \"\"\"\n        if isinstance(obj, str):\n            obj = import_string(obj)\n        for key in dir(obj):\n            if key.isupper():\n                self[key] = getattr(obj, key)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_file_Config.from_file.return_self_from_mapping_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_file_Config.from_file.return_self_from_mapping_", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 256, "end_line": 302, "span_ids": ["Config.from_file"], "tokens": 383}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):\n\n    def from_file(\n        self,\n        filename: str | os.PathLike[str],\n        load: t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]],\n        silent: bool = False,\n        text: bool = True,\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param text: Open the file in text or binary mode.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionchanged:: 2.3\n            The ``text`` parameter was added.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, \"r\" if text else \"rb\") as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_mapping_Config.from_mapping": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.from_mapping_Config.from_mapping", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 304, "end_line": 321, "span_ids": ["Config.from_mapping"], "tokens": 127}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):\n\n    def from_mapping(\n        self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any\n    ) -> bool:\n        \"\"\"Updates the config like :meth:`update` ignoring items with\n        non-upper keys.\n\n        :return: Always returns ``True``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        mappings: dict[str, t.Any] = {}\n        if mapping is not None:\n            mappings.update(mapping)\n        mappings.update(kwargs)\n        for key, value in mappings.items():\n            if key.isupper():\n                self[key] = value\n        return True", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.get_namespace_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/config.py_Config.get_namespace_", "embedding": null, "metadata": {"file_path": "src/flask/config.py", "file_name": "config.py", "file_type": "text/x-python", "category": "implementation", "start_line": 323, "end_line": 368, "span_ids": ["Config.__repr__", "Config.get_namespace"], "tokens": 333}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Config(dict):\n\n    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::\n\n            app.config['IMAGE_STORE_TYPE'] = 'fs'\n            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n            image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\n        The resulting dictionary `image_store_config` would look like::\n\n            {\n                'type': 'fs',\n                'path': '/var/app/images',\n                'base_url': 'http://img.website.com'\n            }\n\n        This is often useful when configuration options map directly to\n        keyword arguments in functions or class constructors.\n\n        :param namespace: a configuration namespace\n        :param lowercase: a flag indicating if the keys of the resulting\n                          dictionary should be lowercase\n        :param trim_namespace: a flag indicating if the keys of the resulting\n                          dictionary should not include the namespace\n\n        .. versionadded:: 0.11\n        \"\"\"\n        rv = {}\n        for k, v in self.items():\n            if not k.startswith(namespace):\n                continue\n            if trim_namespace:\n                key = k[len(namespace) :]\n            else:\n                key = k\n            if lowercase:\n                key = key.lower()\n            rv[key] = v\n        return rv\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_from___future___import_an__sentinel": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_from___future___import_an__sentinel", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 26, "span_ids": ["imports"], "tokens": 128}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport contextvars\nimport typing as t\nfrom functools import update_wrapper\nfrom types import TracebackType\n\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.routing import MapAdapter\n\nfrom . import typing as ft\nfrom .globals import _cv_app\nfrom .signals import appcontext_popped\nfrom .signals import appcontext_pushed\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n    from _typeshed.wsgi import WSGIEnvironment\n\n    from .app import Flask\n    from .sessions import SessionMixin\n    from .wrappers import Request\n\n\n# a singleton sentinel value for parameter defaults\n_sentinel = object()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals__AppCtxGlobals.get": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals__AppCtxGlobals.get", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 29, "end_line": 76, "span_ids": ["_AppCtxGlobals", "_AppCtxGlobals.__delattr__", "_AppCtxGlobals.__getattr__", "_AppCtxGlobals.__setattr__", "_AppCtxGlobals.get"], "tokens": 318}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class _AppCtxGlobals:\n    \"\"\"A plain object. Used as a namespace for storing data during an\n    application context.\n\n    Creating an app context automatically creates this object, which is\n    made available as the :data:`.g` proxy.\n\n    .. describe:: 'key' in g\n\n        Check whether an attribute is present.\n\n        .. versionadded:: 0.10\n\n    .. describe:: iter(g)\n\n        Return an iterator over the attribute names.\n\n        .. versionadded:: 0.10\n    \"\"\"\n\n    # Define attr methods to let mypy know this is a namespace object\n    # that has arbitrary attributes.\n\n    def __getattr__(self, name: str) -> t.Any:\n        try:\n            return self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __setattr__(self, name: str, value: t.Any) -> None:\n        self.__dict__[name] = value\n\n    def __delattr__(self, name: str) -> None:\n        try:\n            del self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def get(self, name: str, default: t.Any | None = None) -> t.Any:\n        \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return self.__dict__.get(name, default)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals.pop__AppCtxGlobals.pop": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals.pop__AppCtxGlobals.pop", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 78, "end_line": 90, "span_ids": ["_AppCtxGlobals.pop"], "tokens": 117}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class _AppCtxGlobals:\n\n    def pop(self, name: str, default: t.Any = _sentinel) -> t.Any:\n        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        if default is _sentinel:\n            return self.__dict__.pop(name)\n        else:\n            return self.__dict__.pop(name, default)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals.setdefault__AppCtxGlobals.__repr__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py__AppCtxGlobals.setdefault__AppCtxGlobals.__repr__", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 92, "end_line": 114, "span_ids": ["_AppCtxGlobals.__contains__", "_AppCtxGlobals.__iter__", "_AppCtxGlobals.__repr__", "_AppCtxGlobals.setdefault"], "tokens": 191}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class _AppCtxGlobals:\n\n    def setdefault(self, name: str, default: t.Any = None) -> t.Any:\n        \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.__dict__.setdefault(name, default)\n\n    def __contains__(self, item: str) -> bool:\n        return item in self.__dict__\n\n    def __iter__(self) -> t.Iterator[str]:\n        return iter(self.__dict__)\n\n    def __repr__(self) -> str:\n        ctx = _cv_app.get(None)\n        if ctx is not None:\n            return f\"<flask.g of '{ctx.app.name}'>\"\n        return object.__repr__(self)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_after_this_request_F": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_after_this_request_F", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 117, "end_line": 150, "span_ids": ["after_this_request", "impl:4"], "tokens": 229}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def after_this_request(\n    f: ft.AfterRequestCallable[t.Any],\n) -> ft.AfterRequestCallable[t.Any]:\n    \"\"\"Decorate a function to run after the current request. The behavior is the\n    same as :meth:`.Flask.after_request`, except it only applies to the current\n    request, rather than every request. Therefore, it must be used within a\n    request context, rather than during setup.\n\n    .. code-block:: python\n\n        @app.route(\"/\")\n        def index():\n            @after_this_request\n            def add_header(response):\n                response.headers[\"X-Foo\"] = \"Parachute\"\n                return response\n\n            return \"Hello, World!\"\n\n    .. versionadded:: 0.9\n    \"\"\"\n    ctx = _cv_app.get(None)\n\n    if ctx is None or not ctx.has_request:\n        raise RuntimeError(\n            \"'after_this_request' can only be used when a request\"\n            \" context is active, such as in a view function.\"\n        )\n\n    ctx._after_request_functions.append(f)\n    return f\n\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_copy_current_request_context_copy_current_request_context._type_ignore_return_val": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_copy_current_request_context_copy_current_request_context._type_ignore_return_val", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 153, "end_line": 205, "span_ids": ["copy_current_request_context"], "tokens": 435}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def copy_current_request_context(f: F) -> F:\n    \"\"\"Decorate a function to run inside the current request context. This can\n    be used when starting a background task, otherwise it will not see the app\n    and request objects that were active in the parent.\n\n    .. warning::\n\n        Due to the following caveats, it is often safer (and simpler) to pass\n        the data you need when starting the task, rather than using this and\n        relying on the context objects.\n\n    In order to avoid execution switching partially though reading data, either\n    read the request body (access ``form``, ``json``, ``data``, etc) before\n    starting the task, or use a lock. This can be an issue when using threading,\n    but shouldn't be an issue when using greenlet/gevent or asyncio.\n\n    If the task will access ``session``, be sure to do so in the parent as well\n    so that the ``Vary: cookie`` header will be set. Modifying ``session`` in\n    the task should be avoided, as it may execute after the response cookie has\n    already been written.\n\n    .. code-block:: python\n\n        import gevent\n        from flask import copy_current_request_context\n\n        @app.route('/')\n        def index():\n            @copy_current_request_context\n            def do_some_work():\n                # do some work here, it can access flask.request or\n                # flask.session like you would otherwise in the view function.\n                ...\n            gevent.spawn(do_some_work)\n            return 'Regular response'\n\n    .. versionadded:: 0.10\n    \"\"\"\n    ctx = _cv_app.get(None)\n\n    if ctx is None:\n        raise RuntimeError(\n            \"'copy_current_request_context' can only be used when a\"\n            \" request context is active, such as in a view function.\"\n        )\n\n    ctx = ctx.copy()\n\n    def wrapper(*args: t.Any, **kwargs: t.Any) -> t.Any:\n        with ctx:\n            return ctx.app.ensure_sync(f)(*args, **kwargs)\n\n    return update_wrapper(wrapper, f)  # type: ignore[return-value]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_has_request_context_has_request_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_has_request_context_has_request_context", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 208, "end_line": 231, "span_ids": ["has_request_context"], "tokens": 165}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def has_request_context() -> bool:\n    \"\"\"Test if an app context is active and if it has request information.\n\n    .. code-block:: python\n\n        from flask import has_request_context, request\n\n        if has_request_context():\n            remote_addr = request.remote_addr\n\n    If a request context is active, the :data:`.request` and :data:`.session`\n    context proxies will available and ``True``, otherwise ``False``. You can\n    use that to test the data you use, rather than using this function.\n\n    .. code-block:: python\n\n        from flask import request\n\n        if request:\n            remote_addr = request.remote_addr\n\n    .. versionadded:: 0.7\n    \"\"\"\n    return (ctx := _cv_app.get(None)) is not None and ctx.has_request", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_has_app_context_has_app_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_has_app_context_has_app_context", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 234, "end_line": 256, "span_ids": ["has_app_context"], "tokens": 169}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def has_app_context() -> bool:\n    \"\"\"Test if an app context is active. Unlike :func:`has_request_context`\n    this can be true outside a request, such as in a CLI command.\n\n    .. code-block:: python\n\n        from flask import has_app_context, g\n\n        if has_app_context():\n            g.cached_data = ...\n\n    If an app context is active, the :data:`.g` and :data:`.current_app` context\n    proxies will available and ``True``, otherwise ``False``. You can use that\n    to test the data you use, rather than using this function.\n\n        from flask import g\n\n        if g:\n            g.cached_data = ...\n\n    .. versionadded:: 0.9\n    \"\"\"\n    return _cv_app.get(None) is not None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext_AppContext.__init__._Track_nested_pushes_of": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext_AppContext.__init__._Track_nested_pushes_of", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 259, "end_line": 336, "span_ids": ["AppContext", "AppContext.__init__"], "tokens": 690}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppContext:\n    \"\"\"An app context contains information about an app, and about the request\n    when handling a request. A context is pushed at the beginning of each\n    request and CLI command, and popped at the end. The context is referred to\n    as a \"request context\" if it has request information, and an \"app context\"\n    if not.\n\n    Do not use this class directly. Use :meth:`.Flask.app_context` to create an\n    app context if needed during setup, and :meth:`.Flask.test_request_context`\n    to create a request context if needed during tests.\n\n    When the context is popped, it will evaluate all the teardown functions\n    registered with :meth:`~flask.Flask.teardown_request` (if handling a\n    request) then :meth:`.Flask.teardown_appcontext`.\n\n    When using the interactive debugger, the context will be restored so\n    ``request`` is still accessible. Similarly, the test client can preserve the\n    context after the request ends. However, teardown functions may already have\n    closed some resources such as database connections, and will run again when\n    the restored context is popped.\n\n    :param app: The application this context represents.\n    :param request: The request data this context represents.\n    :param session: The session data this context represents. If not given,\n        loaded from the request on first access.\n\n    .. versionchanged:: 3.2\n        Merged with ``RequestContext``. The ``RequestContext`` alias will be\n        removed in Flask 4.0.\n\n    .. versionchanged:: 3.2\n        A combined app and request context is pushed for every request and CLI\n        command, rather than trying to detect if an app context is already\n        pushed.\n\n    .. versionchanged:: 3.2\n        The session is loaded the first time it is accessed, rather than when\n        the context is pushed.\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Flask,\n        *,\n        request: Request | None = None,\n        session: SessionMixin | None = None,\n    ) -> None:\n        self.app = app\n        \"\"\"The application represented by this context. Accessed through\n        :data:`.current_app`.\n        \"\"\"\n\n        self.g: _AppCtxGlobals = app.app_ctx_globals_class()\n        \"\"\"The global data for this context. Accessed through :data:`.g`.\"\"\"\n\n        self.url_adapter: MapAdapter | None = None\n        \"\"\"The URL adapter bound to the request, or the app if not in a request.\n        May be ``None`` if binding failed.\n        \"\"\"\n\n        self._request: Request | None = request\n        self._session: SessionMixin | None = session\n        self._flashes: list[tuple[str, str]] | None = None\n        self._after_request_functions: list[ft.AfterRequestCallable[t.Any]] = []\n\n        try:\n            self.url_adapter = app.create_url_adapter(self._request)\n        except HTTPException as e:\n            if self._request is not None:\n                self._request.routing_exception = e\n\n        self._cv_token: contextvars.Token[AppContext] | None = None\n        \"\"\"The previous state to restore when popping.\"\"\"\n\n        self._push_count: int = 0\n        \"\"\"Track nested pushes of this context. Cleanup will only run once the\n        original push has been popped.\n        \"\"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.from_environ_AppContext.request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.from_environ_AppContext.request", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 338, "end_line": 378, "span_ids": ["AppContext.copy", "AppContext.from_environ", "AppContext.has_request", "AppContext.request"], "tokens": 295}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppContext:\n\n    @classmethod\n    def from_environ(cls, app: Flask, environ: WSGIEnvironment, /) -> te.Self:\n        \"\"\"Create an app context with request data from the given WSGI environ.\n\n        :param app: The application this context represents.\n        :param environ: The request data this context represents.\n        \"\"\"\n        request = app.request_class(environ)\n        request.json_module = app.json\n        return cls(app, request=request)\n\n    @property\n    def has_request(self) -> bool:\n        \"\"\"True if this context was created with request data.\"\"\"\n        return self._request is not None\n\n    def copy(self) -> te.Self:\n        \"\"\"Create a new context with the same data objects as this context. See\n        :func:`.copy_current_request_context`.\n\n        .. versionchanged:: 1.1\n            The current session data is used instead of reloading the original data.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return self.__class__(\n            self.app,\n            request=self._request,\n            session=self._session,\n        )\n\n    @property\n    def request(self) -> Request:\n        \"\"\"The request object associated with this context. Accessed through\n        :data:`.request`. Only available in request contexts, otherwise raises\n        :exc:`RuntimeError`.\n        \"\"\"\n        if self._request is None:\n            raise RuntimeError(\"There is no request in this context.\")\n\n        return self._request", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.session_AppContext.session": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.session_AppContext.session", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 380, "end_line": 396, "span_ids": ["AppContext.session"], "tokens": 124}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppContext:\n\n    @property\n    def session(self) -> SessionMixin:\n        \"\"\"The session object associated with this context. Accessed through\n        :data:`.session`. Only available in request contexts, otherwise raises\n        :exc:`RuntimeError`.\n        \"\"\"\n        if self._request is None:\n            raise RuntimeError(\"There is no request in this context.\")\n\n        if self._session is None:\n            si = self.app.session_interface\n            self._session = si.open_session(self.app, self.request)\n\n            if self._session is None:\n                self._session = si.make_null_session(self.app)\n\n        return self._session", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.match_request_AppContext.match_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.match_request_AppContext.match_request", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 398, "end_line": 407, "span_ids": ["AppContext.match_request"], "tokens": 110}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppContext:\n\n    def match_request(self) -> None:\n        \"\"\"Apply routing to the current request, storing either the matched\n        endpoint and args, or a routing exception.\n        \"\"\"\n        try:\n            result = self.url_adapter.match(return_rule=True)  # type: ignore[union-attr]\n        except HTTPException as e:\n            self._request.routing_exception = e  # type: ignore[union-attr]\n        else:\n            self._request.url_rule, self._request.view_args = result  # type: ignore[union-attr]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.push_AppContext.push": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.push_AppContext.push", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 409, "end_line": 430, "span_ids": ["AppContext.push"], "tokens": 181}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppContext:\n\n    def push(self) -> None:\n        \"\"\"Push this context so that it is the active context. If this is a\n        request context, calls :meth:`match_request` to perform routing with\n        the context active.\n\n        Typically, this is not used directly. Instead, use a ``with`` block\n        to manage the context.\n\n        In some situations, such as streaming or testing, the context may be\n        pushed multiple times. It will only trigger matching and signals if it\n        is not currently pushed.\n        \"\"\"\n        self._push_count += 1\n\n        if self._cv_token is not None:\n            return\n\n        self._cv_token = _cv_app.set(self)\n        appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)\n\n        if self._request is not None and self.url_adapter is not None:\n            self.match_request()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.pop_AppContext.pop.try_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.pop_AppContext.pop.try_", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 432, "end_line": 480, "span_ids": ["AppContext.pop"], "tokens": 386}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppContext:\n\n    def pop(self, exc: BaseException | None = None) -> None:\n        \"\"\"Pop this context so that it is no longer the active context. Then\n        call teardown functions and signals.\n\n        Typically, this is not used directly. Instead, use a ``with`` block\n        to manage the context.\n\n        This context must currently be the active context, otherwise a\n        :exc:`RuntimeError` is raised. In some situations, such as streaming or\n        testing, the context may have been pushed multiple times. It will only\n        trigger cleanup once it has been popped as many times as it was pushed.\n        Until then, it will remain the active context.\n\n        :param exc: An unhandled exception that was raised while the context was\n            active. Passed to teardown functions.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\n        if self._cv_token is None:\n            raise RuntimeError(f\"Cannot pop this context ({self!r}), it is not pushed.\")\n\n        ctx = _cv_app.get(None)\n\n        if ctx is None or self._cv_token is None:\n            raise RuntimeError(\n                f\"Cannot pop this context ({self!r}), there is no active context.\"\n            )\n\n        if ctx is not self:\n            raise RuntimeError(\n                f\"Cannot pop this context ({self!r}), it is not the active\"\n                f\" context ({ctx!r}).\"\n            )\n\n        self._push_count -= 1\n\n        if self._push_count > 0:\n            return\n\n        try:\n            if self._request is not None:\n                self.app.do_teardown_request(exc)\n                self._request.close()\n        finally:\n            self.app.do_teardown_appcontext(exc)\n            _cv_app.reset(self._cv_token)\n            self._cv_token = None\n            appcontext_popped.send(self.app, _async_wrapper=self.app.ensure_sync)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.__enter___": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/ctx.py_AppContext.__enter___", "embedding": null, "metadata": {"file_path": "src/flask/ctx.py", "file_name": "ctx.py", "file_type": "text/x-python", "category": "implementation", "start_line": 482, "end_line": 517, "span_ids": ["AppContext.__enter__", "AppContext.__exit__", "AppContext.__repr__", "__getattr__"], "tokens": 233}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class AppContext:\n\n    def __enter__(self) -> te.Self:\n        self.push()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.pop(exc_value)\n\n    def __repr__(self) -> str:\n        if self._request is not None:\n            return (\n                f\"<{type(self).__name__} {id(self)} of {self.app.name},\"\n                f\" {self.request.method} {self.request.url!r}>\"\n            )\n\n        return f\"<{type(self).__name__} {id(self)} of {self.app.name}>\"\n\n\ndef __getattr__(name: str) -> t.Any:\n    import warnings\n\n    if name == \"RequestContext\":\n        warnings.warn(\n            \"'RequestContext' has merged with 'AppContext', and will be removed\"\n            \" in Flask 4.0. Use 'AppContext' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return AppContext\n\n    raise AttributeError(name)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_from___future___import_an_UnexpectedUnicodeError._Raised_in_places_where": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_from___future___import_an_UnexpectedUnicodeError._Raised_in_places_where", "embedding": null, "metadata": {"file_path": "src/flask/debughelpers.py", "file_name": "debughelpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 20, "span_ids": ["UnexpectedUnicodeError", "imports"], "tokens": 104}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport typing as t\n\nfrom jinja2.loaders import BaseLoader\nfrom werkzeug.routing import RequestRedirect\n\nfrom .blueprints import Blueprint\nfrom .globals import _cv_app\nfrom .sansio.app import App\n\nif t.TYPE_CHECKING:\n    from .sansio.scaffold import Scaffold\n    from .wrappers import Request\n\n\nclass UnexpectedUnicodeError(AssertionError, UnicodeError):\n    \"\"\"Raised in places where we want some better error reporting for\n    unexpected unicode or binary data.\n    \"\"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_DebugFilesKeyError_DebugFilesKeyError.__str__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_DebugFilesKeyError_DebugFilesKeyError.__str__", "embedding": null, "metadata": {"file_path": "src/flask/debughelpers.py", "file_name": "debughelpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 23, "end_line": 47, "span_ids": ["DebugFilesKeyError", "DebugFilesKeyError.__init__", "DebugFilesKeyError.__str__"], "tokens": 232}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class DebugFilesKeyError(KeyError, AssertionError):\n    \"\"\"Raised from request.files during debugging.  The idea is that it can\n    provide a better error message than just a generic KeyError/BadRequest.\n    \"\"\"\n\n    def __init__(self, request: Request, key: str) -> None:\n        form_matches = request.form.getlist(key)\n        buf = [\n            f\"You tried to access the file {key!r} in the request.files\"\n            \" dictionary but it does not exist. The mimetype for the\"\n            f\" request is {request.mimetype!r} instead of\"\n            \" 'multipart/form-data' which means that no file contents\"\n            \" were transmitted. To fix this error you should provide\"\n            ' enctype=\"multipart/form-data\" in your form.'\n        ]\n        if form_matches:\n            names = \", \".join(repr(x) for x in form_matches)\n            buf.append(\n                \"\\n\\nThe browser instead transmitted some file names. \"\n                f\"This was submitted: {names}\"\n            )\n        self.msg = \"\".join(buf)\n\n    def __str__(self) -> str:\n        return self.msg", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_FormDataRoutingRedirect_FormDataRoutingRedirect.__init__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_FormDataRoutingRedirect_FormDataRoutingRedirect.__init__", "embedding": null, "metadata": {"file_path": "src/flask/debughelpers.py", "file_name": "debughelpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 50, "end_line": 78, "span_ids": ["FormDataRoutingRedirect", "FormDataRoutingRedirect.__init__"], "tokens": 249}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FormDataRoutingRedirect(AssertionError):\n    \"\"\"This exception is raised in debug mode if a routing redirect\n    would cause the browser to drop the method or body. This happens\n    when method is not GET, HEAD or OPTIONS and the status code is not\n    307 or 308.\n    \"\"\"\n\n    def __init__(self, request: Request) -> None:\n        exc = request.routing_exception\n        assert isinstance(exc, RequestRedirect)\n        buf = [\n            f\"A request was sent to '{request.url}', but routing issued\"\n            f\" a redirect to the canonical URL '{exc.new_url}'.\"\n        ]\n\n        if f\"{request.base_url}/\" == exc.new_url.partition(\"?\")[0]:\n            buf.append(\n                \" The URL was defined with a trailing slash. Flask\"\n                \" will redirect to the URL with a trailing slash if it\"\n                \" was accessed without one.\"\n            )\n\n        buf.append(\n            \" Send requests to the canonical URL, or use 307 or 308 for\"\n            \" routing redirects. Otherwise, browsers will drop form\"\n            \" data.\\n\\n\"\n            \"This exception is only raised in debug mode.\"\n        )\n        super().__init__(\"\".join(buf))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_attach_enctype_error_multidict_attach_enctype_error_multidict": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_attach_enctype_error_multidict_attach_enctype_error_multidict", "embedding": null, "metadata": {"file_path": "src/flask/debughelpers.py", "file_name": "debughelpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 81, "end_line": 104, "span_ids": ["attach_enctype_error_multidict"], "tokens": 187}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def attach_enctype_error_multidict(request: Request) -> None:\n    \"\"\"Patch ``request.files.__getitem__`` to raise a descriptive error\n    about ``enctype=multipart/form-data``.\n\n    :param request: The request to patch.\n    :meta private:\n    \"\"\"\n    oldcls = request.files.__class__\n\n    class newcls(oldcls):  # type: ignore[valid-type, misc]\n        def __getitem__(self, key: str) -> t.Any:\n            try:\n                return super().__getitem__(key)\n            except KeyError as e:\n                if key not in request.form:\n                    raise\n\n                raise DebugFilesKeyError(request, key).with_traceback(\n                    e.__traceback__\n                ) from None\n\n    newcls.__name__ = oldcls.__name__\n    newcls.__module__ = oldcls.__module__\n    request.files.__class__ = newcls", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py__dump_loader_info__dump_loader_info": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py__dump_loader_info__dump_loader_info", "embedding": null, "metadata": {"file_path": "src/flask/debughelpers.py", "file_name": "debughelpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 107, "end_line": 121, "span_ids": ["_dump_loader_info"], "tokens": 136}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _dump_loader_info(loader: BaseLoader) -> t.Iterator[str]:\n    yield f\"class: {type(loader).__module__}.{type(loader).__name__}\"\n    for key, value in sorted(loader.__dict__.items()):\n        if key.startswith(\"_\"):\n            continue\n        if isinstance(value, (tuple, list)):\n            if not all(isinstance(x, str) for x in value):\n                continue\n            yield f\"{key}:\"\n            for item in value:\n                yield f\"  - {item}\"\n            continue\n        elif not isinstance(value, (str, int, float, bool)):\n            continue\n        yield f\"{key}: {value!r}\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_explain_template_loading_attempts_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/debughelpers.py_explain_template_loading_attempts_", "embedding": null, "metadata": {"file_path": "src/flask/debughelpers.py", "file_name": "debughelpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 124, "end_line": 180, "span_ids": ["explain_template_loading_attempts"], "tokens": 441}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def explain_template_loading_attempts(\n    app: App,\n    template: str,\n    attempts: list[\n        tuple[\n            BaseLoader,\n            Scaffold,\n            tuple[str, str | None, t.Callable[[], bool] | None] | None,\n        ]\n    ],\n) -> None:\n    \"\"\"This should help developers understand what failed\"\"\"\n    info = [f\"Locating template {template!r}:\"]\n    total_found = 0\n    blueprint = None\n\n    if (ctx := _cv_app.get(None)) is not None and ctx.has_request:\n        blueprint = ctx.request.blueprint\n\n    for idx, (loader, srcobj, triple) in enumerate(attempts):\n        if isinstance(srcobj, App):\n            src_info = f\"application {srcobj.import_name!r}\"\n        elif isinstance(srcobj, Blueprint):\n            src_info = f\"blueprint {srcobj.name!r} ({srcobj.import_name})\"\n        else:\n            src_info = repr(srcobj)\n\n        info.append(f\"{idx + 1:5}: trying loader of {src_info}\")\n\n        for line in _dump_loader_info(loader):\n            info.append(f\"       {line}\")\n\n        if triple is None:\n            detail = \"no match\"\n        else:\n            detail = f\"found ({triple[1] or '<string>'!r})\"\n            total_found += 1\n        info.append(f\"       -> {detail}\")\n\n    seems_fishy = False\n    if total_found == 0:\n        info.append(\"Error: the template could not be found.\")\n        seems_fishy = True\n    elif total_found > 1:\n        info.append(\"Warning: multiple loaders returned a match for the template.\")\n        seems_fishy = True\n\n    if blueprint is not None and seems_fishy:\n        info.append(\n            \"  The template was looked up from an endpoint that belongs\"\n            f\" to the blueprint {blueprint!r}.\"\n        )\n        info.append(\"  Maybe you did not place a template in the right folder?\")\n        info.append(\"  See https://flask.palletsprojects.com/blueprints/#templates\")\n\n    app.logger.info(\"\\n\".join(info))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/globals.py_from___future___import_an_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/globals.py_from___future___import_an_", "embedding": null, "metadata": {"file_path": "src/flask/globals.py", "file_name": "globals.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 78, "span_ids": ["__getattr__", "impl:9", "imports"], "tokens": 586}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport typing as t\nfrom contextvars import ContextVar\n\nfrom werkzeug.local import LocalProxy\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from .app import Flask\n    from .ctx import _AppCtxGlobals\n    from .ctx import AppContext\n    from .sessions import SessionMixin\n    from .wrappers import Request\n\n    T = t.TypeVar(\"T\", covariant=True)\n\n    class ProxyMixin(t.Protocol[T]):\n        def _get_current_object(self) -> T: ...\n\n    # These subclasses inform type checkers that the proxy objects look like the\n    # proxied type along with the _get_current_object method.\n    class FlaskProxy(ProxyMixin[Flask], Flask): ...\n\n    class AppContextProxy(ProxyMixin[AppContext], AppContext): ...\n\n    class _AppCtxGlobalsProxy(ProxyMixin[_AppCtxGlobals], _AppCtxGlobals): ...\n\n    class RequestProxy(ProxyMixin[Request], Request): ...\n\n    class SessionMixinProxy(ProxyMixin[SessionMixin], SessionMixin): ...\n\n\n_no_app_msg = \"\"\"\\\nWorking outside of application context.\n\nAttempted to use functionality that expected a current application to be set. To\nsolve this, set up an app context using 'with app.app_context()'. See the\ndocumentation on app context for more information.\\\n\"\"\"\n_cv_app: ContextVar[AppContext] = ContextVar(\"flask.app_ctx\")\napp_ctx: AppContextProxy = LocalProxy(  # type: ignore[assignment]\n    _cv_app, unbound_message=_no_app_msg\n)\ncurrent_app: FlaskProxy = LocalProxy(  # type: ignore[assignment]\n    _cv_app, \"app\", unbound_message=_no_app_msg\n)\ng: _AppCtxGlobalsProxy = LocalProxy(  # type: ignore[assignment]\n    _cv_app, \"g\", unbound_message=_no_app_msg\n)\n\n_no_req_msg = \"\"\"\\\nWorking outside of request context.\n\nAttempted to use functionality that expected an active HTTP request. See the\ndocumentation on request context for more information.\\\n\"\"\"\nrequest: RequestProxy = LocalProxy(  # type: ignore[assignment]\n    _cv_app, \"request\", unbound_message=_no_req_msg\n)\nsession: SessionMixinProxy = LocalProxy(  # type: ignore[assignment]\n    _cv_app, \"session\", unbound_message=_no_req_msg\n)\n\n\ndef __getattr__(name: str) -> t.Any:\n    import warnings\n\n    if name == \"request_ctx\":\n        warnings.warn(\n            \"'request_ctx' has merged with 'app_ctx', and will be removed\"\n            \" in Flask 4.0. Use 'app_ctx' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return app_ctx\n\n    raise AttributeError(name)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_from___future___import_an_get_debug_flag": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_from___future___import_an_get_debug_flag", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 32, "span_ids": ["get_debug_flag", "imports"], "tokens": 199}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport importlib.util\nimport os\nimport sys\nimport typing as t\nfrom datetime import datetime\nfrom functools import cache\nfrom functools import update_wrapper\n\nimport werkzeug.utils\nfrom werkzeug.exceptions import abort as _wz_abort\nfrom werkzeug.utils import redirect as _wz_redirect\nfrom werkzeug.wrappers import Response as BaseResponse\n\nfrom .globals import _cv_app\nfrom .globals import app_ctx\nfrom .globals import current_app\nfrom .globals import request\nfrom .globals import session\nfrom .signals import message_flashed\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from .wrappers import Response\n\n\ndef get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n    \"\"\"\n    val = os.environ.get(\"FLASK_DEBUG\")\n    return bool(val and val.lower() not in {\"0\", \"false\", \"no\"})", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_load_dotenv_stream_with_context_3": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_load_dotenv_stream_with_context_3", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 35, "end_line": 59, "span_ids": ["get_load_dotenv", "stream_with_context", "stream_with_context_3"], "tokens": 182}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def get_load_dotenv(default: bool = True) -> bool:\n    \"\"\"Get whether the user has disabled loading default dotenv files by\n    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\n    the files.\n\n    :param default: What to return if the env var isn't set.\n    \"\"\"\n    val = os.environ.get(\"FLASK_SKIP_DOTENV\")\n\n    if not val:\n        return default\n\n    return val.lower() in (\"0\", \"false\", \"no\")\n\n\n@t.overload\ndef stream_with_context(\n    generator_or_function: t.Iterator[t.AnyStr],\n) -> t.Iterator[t.AnyStr]: ...\n\n\n@t.overload\ndef stream_with_context(\n    generator_or_function: t.Callable[..., t.Iterator[t.AnyStr]],\n) -> t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]: ...", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_stream_with_context_4_stream_with_context_4.try_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_stream_with_context_4_stream_with_context_4.try_", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 62, "end_line": 111, "span_ids": ["stream_with_context_4"], "tokens": 359}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def stream_with_context(\n    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],\n) -> t.Iterator[t.AnyStr] | t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]:\n    \"\"\"Wrap a response generator function so that it runs inside the current\n    request context. This keeps :data:`.request`, :data:`.session`, and :data:`.g`\n    available, even though at the point the generator runs the request context\n    will typically have ended.\n\n    Use it as a decorator on a generator function:\n\n    .. code-block:: python\n\n        from flask import stream_with_context, request, Response\n\n        @app.get(\"/stream\")\n        def streamed_response():\n            @stream_with_context\n            def generate():\n                yield \"Hello \"\n                yield request.args[\"name\"]\n                yield \"!\"\n\n            return Response(generate())\n\n    Or use it as a wrapper around a created generator:\n\n    .. code-block:: python\n\n        from flask import stream_with_context, request, Response\n\n        @app.get(\"/stream\")\n        def streamed_response():\n            def generate():\n                yield \"Hello \"\n                yield request.args[\"name\"]\n                yield \"!\"\n\n            return Response(stream_with_context(generate()))\n\n    .. versionadded:: 0.9\n    \"\"\"\n    try:\n        gen = iter(generator_or_function)  # type: ignore[arg-type]\n    except TypeError:\n\n        def decorator(*args: t.Any, **kwargs: t.Any) -> t.Any:\n            gen = generator_or_function(*args, **kwargs)  # type: ignore[operator]\n            return stream_with_context(gen)\n\n        return update_wrapper(decorator, generator_or_function)  # type: ignore[arg-type]\n    # ... other code", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_stream_with_context_4.generator_stream_with_context_4.return_wrapped_g": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_stream_with_context_4.generator_stream_with_context_4.return_wrapped_g", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 113, "end_line": 135, "span_ids": ["stream_with_context_4"], "tokens": 155}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def stream_with_context(\n    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],\n) -> t.Iterator[t.AnyStr] | t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]:\n    # ... other code\n\n    def generator() -> t.Iterator[t.AnyStr]:\n        if (ctx := _cv_app.get(None)) is None:\n            raise RuntimeError(\n                \"'stream_with_context' can only be used when a request\"\n                \" context is active, such as in a view function.\"\n            )\n\n        with ctx:\n            yield None  # type: ignore[misc]\n\n            try:\n                yield from gen\n            finally:\n                # Clean up in case the user wrapped a WSGI iterator.\n                if hasattr(gen, \"close\"):\n                    gen.close()\n\n    # Execute the generator to the sentinel value. This captures the current\n    # context and pushes it to preserve it. Further iteration will yield from\n    # the original iterator.\n    wrapped_g = generator()\n    next(wrapped_g)\n    return wrapped_g", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_make_response_make_response.return_current_app_make_r": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_make_response_make_response.return_current_app_make_r", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 138, "end_line": 184, "span_ids": ["make_response"], "tokens": 411}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def make_response(*args: t.Any) -> Response:\n    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because\n    views do not have to return response objects but can return a value that\n    is converted into a response object by Flask itself, it becomes tricky to\n    add headers to it.  This function can be called instead of using a return\n    and you will get a response object which you can use to attach headers.\n\n    If view looked like this and you want to add a new header::\n\n        def index():\n            return render_template('index.html', foo=42)\n\n    You can now do something like this::\n\n        def index():\n            response = make_response(render_template('index.html', foo=42))\n            response.headers['X-Parachutes'] = 'parachutes are cool'\n            return response\n\n    This function accepts the very same arguments you can return from a\n    view function.  This for example creates a response with a 404 error\n    code::\n\n        response = make_response(render_template('not_found.html'), 404)\n\n    The other use case of this function is to force the return value of a\n    view function into a response which is helpful with view\n    decorators::\n\n        response = make_response(view_function())\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n\n    Internally this function does the following things:\n\n    -   if no arguments are passed, it creates a new response argument\n    -   if one argument is passed, :meth:`flask.Flask.make_response`\n        is invoked with it.\n    -   if more than one argument is passed, the arguments are passed\n        to the :meth:`flask.Flask.make_response` function as tuple.\n\n    .. versionadded:: 0.6\n    \"\"\"\n    if not args:\n        return current_app.response_class()\n    if len(args) == 1:\n        args = args[0]\n    return current_app.make_response(args)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_url_for_url_for.return_current_app_url_fo": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_url_for_url_for.return_current_app_url_fo", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 187, "end_line": 238, "span_ids": ["url_for"], "tokens": 448}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def url_for(\n    endpoint: str,\n    *,\n    _anchor: str | None = None,\n    _method: str | None = None,\n    _scheme: str | None = None,\n    _external: bool | None = None,\n    **values: t.Any,\n) -> str:\n    \"\"\"Generate a URL to the given endpoint with the given values.\n\n    This requires an active request or application context, and calls\n    :meth:`current_app.url_for() <flask.Flask.url_for>`. See that method\n    for full documentation.\n\n    :param endpoint: The endpoint name associated with the URL to\n        generate. If this starts with a ``.``, the current blueprint\n        name (if any) will be used.\n    :param _anchor: If given, append this as ``#anchor`` to the URL.\n    :param _method: If given, generate the URL associated with this\n        method for the endpoint.\n    :param _scheme: If given, the URL will have this scheme if it is\n        external.\n    :param _external: If given, prefer the URL to be internal (False) or\n        require it to be external (True). External URLs include the\n        scheme and domain. When not in an active request, URLs are\n        external by default.\n    :param values: Values to use for the variable parts of the URL rule.\n        Unknown keys are appended as query string arguments, like\n        ``?a=b&c=d``.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.url_for``, allowing an app to override the\n        behavior.\n\n    .. versionchanged:: 0.10\n       The ``_scheme`` parameter was added.\n\n    .. versionchanged:: 0.9\n       The ``_anchor`` and ``_method`` parameters were added.\n\n    .. versionchanged:: 0.9\n       Calls ``app.handle_url_build_error`` on build errors.\n    \"\"\"\n    return current_app.url_for(\n        endpoint,\n        _anchor=_anchor,\n        _method=_method,\n        _scheme=_scheme,\n        _external=_external,\n        **values,\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_redirect_redirect": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_redirect_redirect", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 241, "end_line": 262, "span_ids": ["redirect"], "tokens": 215}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def redirect(\n    location: str, code: int = 302, Response: type[BaseResponse] | None = None\n) -> BaseResponse:\n    \"\"\"Create a redirect response object.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`~flask.Flask.redirect` method, otherwise it will use\n    :func:`werkzeug.utils.redirect`.\n\n    :param location: The URL to redirect to.\n    :param code: The status code for the redirect.\n    :param Response: The response class to use. Not used when\n        ``current_app`` is active, which uses ``app.response_class``.\n\n    .. versionadded:: 2.2\n        Calls ``current_app.redirect`` if available instead of always\n        using Werkzeug's default ``redirect``.\n    \"\"\"\n    if (ctx := _cv_app.get(None)) is not None:\n        return ctx.app.redirect(location, code=code)\n\n    return _wz_redirect(location, code=code, Response=Response)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_abort_abort": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_abort_abort", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 265, "end_line": 285, "span_ids": ["abort"], "tokens": 214}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def abort(code: int | BaseResponse, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:\n    \"\"\"Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given\n    status code.\n\n    If :data:`~flask.current_app` is available, it will call its\n    :attr:`~flask.Flask.aborter` object, otherwise it will use\n    :func:`werkzeug.exceptions.abort`.\n\n    :param code: The status code for the exception, which must be\n        registered in ``app.aborter``.\n    :param args: Passed to the exception.\n    :param kwargs: Passed to the exception.\n\n    .. versionadded:: 2.2\n        Calls ``current_app.aborter`` if available instead of always\n        using Werkzeug's default ``abort``.\n    \"\"\"\n    if (ctx := _cv_app.get(None)) is not None:\n        ctx.app.aborter(code, *args, **kwargs)\n\n    _wz_abort(code, *args, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_template_attribute_get_template_attribute": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_template_attribute_get_template_attribute", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 288, "end_line": 307, "span_ids": ["get_template_attribute"], "tokens": 184}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def get_template_attribute(template_name: str, attribute: str) -> t.Any:\n    \"\"\"Loads a macro (or variable) a template exports.  This can be used to\n    invoke a macro from within Python code.  If you for example have a\n    template named :file:`_cider.html` with the following contents:\n\n    .. sourcecode:: html+jinja\n\n       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\n    You can access this from Python code like this::\n\n        hello = get_template_attribute('_cider.html', 'hello')\n        return hello('World')\n\n    .. versionadded:: 0.2\n\n    :param template_name: the name of the template\n    :param attribute: the name of the variable of macro to access\n    \"\"\"\n    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_flash_flash.message_flashed_send_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_flash_flash.message_flashed_send_", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 310, "end_line": 341, "span_ids": ["flash"], "tokens": 287}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def flash(message: str, category: str = \"message\") -> None:\n    \"\"\"Flashes a message to the next request.  In order to remove the\n    flashed message from the session and to display it to the user,\n    the template has to call :func:`get_flashed_messages`.\n\n    .. versionchanged:: 0.3\n       `category` parameter added.\n\n    :param message: the message to be flashed.\n    :param category: the category for the message.  The following values\n                     are recommended: ``'message'`` for any kind of message,\n                     ``'error'`` for errors, ``'info'`` for information\n                     messages and ``'warning'`` for warnings.  However any\n                     kind of string can be used as category.\n    \"\"\"\n    # Original implementation:\n    #\n    #     session.setdefault('_flashes', []).append((category, message))\n    #\n    # This assumed that changes made to mutable structures in the session are\n    # always in sync with the session object, which is not true for session\n    # implementations that use external storage for keeping their keys/values.\n    flashes = session.get(\"_flashes\", [])\n    flashes.append((category, message))\n    session[\"_flashes\"] = flashes\n    app = current_app._get_current_object()\n    message_flashed.send(\n        app,\n        _async_wrapper=app.ensure_sync,\n        message=message,\n        category=category,\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_flashed_messages_get_flashed_messages.return_flashes": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_flashed_messages_get_flashed_messages.return_flashes", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 344, "end_line": 383, "span_ids": ["get_flashed_messages"], "tokens": 389}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def get_flashed_messages(\n    with_categories: bool = False, category_filter: t.Iterable[str] = ()\n) -> list[str] | list[tuple[str, str]]:\n    \"\"\"Pulls all flashed messages from the session and returns them.\n    Further calls in the same request to the function will return\n    the same messages.  By default just the messages are returned,\n    but when `with_categories` is set to ``True``, the return value will\n    be a list of tuples in the form ``(category, message)`` instead.\n\n    Filter the flashed messages to one or more categories by providing those\n    categories in `category_filter`.  This allows rendering categories in\n    separate html blocks.  The `with_categories` and `category_filter`\n    arguments are distinct:\n\n    * `with_categories` controls whether categories are returned with message\n      text (``True`` gives a tuple, where ``False`` gives just the message text).\n    * `category_filter` filters the messages down to only those matching the\n      provided categories.\n\n    See :doc:`/patterns/flashing` for examples.\n\n    .. versionchanged:: 0.3\n       `with_categories` parameter added.\n\n    .. versionchanged:: 0.9\n        `category_filter` parameter added.\n\n    :param with_categories: set to ``True`` to also receive categories.\n    :param category_filter: filter of categories to limit return values.  Only\n                            categories in the list will be returned.\n    \"\"\"\n    flashes = app_ctx._flashes\n    if flashes is None:\n        flashes = session.pop(\"_flashes\") if \"_flashes\" in session else []\n        app_ctx._flashes = flashes\n    if category_filter:\n        flashes = list(filter(lambda f: f[0] in category_filter, flashes))\n    if not with_categories:\n        return [x[1] for x in flashes]\n    return flashes", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py__prepare_send_file_kwargs__prepare_send_file_kwargs": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py__prepare_send_file_kwargs__prepare_send_file_kwargs", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 386, "end_line": 398, "span_ids": ["_prepare_send_file_kwargs"], "tokens": 107}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n    ctx = app_ctx._get_current_object()\n\n    if kwargs.get(\"max_age\") is None:\n        kwargs[\"max_age\"] = ctx.app.get_send_file_max_age\n\n    kwargs.update(\n        environ=ctx.request.environ,\n        use_x_sendfile=ctx.app.config[\"USE_X_SENDFILE\"],\n        response_class=ctx.app.response_class,\n        _root_path=ctx.app.root_path,\n    )\n    return kwargs", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_send_file_send_file.return_werkzeug_utils_sen": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_send_file_send_file.return_werkzeug_utils_sen", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 401, "end_line": 524, "span_ids": ["send_file"], "tokens": 1240}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def send_file(\n    path_or_file: os.PathLike[t.AnyStr] | str | t.IO[bytes],\n    mimetype: str | None = None,\n    as_attachment: bool = False,\n    download_name: str | None = None,\n    conditional: bool = True,\n    etag: bool | str = True,\n    last_modified: datetime | int | float | None = None,\n    max_age: None | (int | t.Callable[[str | None], int | None]) = None,\n) -> Response:\n    \"\"\"Send the contents of a file to the client.\n\n    The first argument can be a file path or a file-like object. Paths\n    are preferred in most cases because Werkzeug can manage the file and\n    get extra information from the path. Passing a file-like object\n    requires that the file is opened in binary mode, and is mostly\n    useful when building a file in memory with :class:`io.BytesIO`.\n\n    Never pass file paths provided by a user. The path is assumed to be\n    trusted, so a user could craft a path to access a file you didn't\n    intend. Use :func:`send_from_directory` to safely serve\n    user-requested paths from within a directory.\n\n    If the WSGI server sets a ``file_wrapper`` in ``environ``, it is\n    used, otherwise Werkzeug's built-in wrapper is used. Alternatively,\n    if the HTTP server supports ``X-Sendfile``, configuring Flask with\n    ``USE_X_SENDFILE = True`` will tell the server to send the given\n    path, which is much more efficient than reading it in Python.\n\n    :param path_or_file: The path to the file to send, relative to the\n        current working directory if a relative path is given.\n        Alternatively, a file-like object opened in binary mode. Make\n        sure the file pointer is seeked to the start of the data.\n    :param mimetype: The MIME type to send for the file. If not\n        provided, it will try to detect it from the file name.\n    :param as_attachment: Indicate to a browser that it should offer to\n        save the file instead of displaying it.\n    :param download_name: The default name browsers will use when saving\n        the file. Defaults to the passed file name.\n    :param conditional: Enable conditional and range responses based on\n        request headers. Requires passing a file path and ``environ``.\n    :param etag: Calculate an ETag for the file, which requires passing\n        a file path. Can also be a string to use instead.\n    :param last_modified: The last modified time to send for the file,\n        in seconds. If not provided, it will try to detect it from the\n        file path.\n    :param max_age: How long the client should cache the file, in\n        seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n        it will be ``no-cache`` to prefer conditional caching.\n\n    .. versionchanged:: 2.0\n        ``download_name`` replaces the ``attachment_filename``\n        parameter. If ``as_attachment=False``, it is passed with\n        ``Content-Disposition: inline`` instead.\n\n    .. versionchanged:: 2.0\n        ``max_age`` replaces the ``cache_timeout`` parameter.\n        ``conditional`` is enabled and ``max_age`` is not set by\n        default.\n\n    .. versionchanged:: 2.0\n        ``etag`` replaces the ``add_etags`` parameter. It can be a\n        string to use instead of generating one.\n\n    .. versionchanged:: 2.0\n        Passing a file-like object that inherits from\n        :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather\n        than sending an empty file.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionchanged:: 1.1\n        ``filename`` may be a :class:`~os.PathLike` object.\n\n    .. versionchanged:: 1.1\n        Passing a :class:`~io.BytesIO` object supports range requests.\n\n    .. versionchanged:: 1.0.3\n        Filenames are encoded with ASCII instead of Latin-1 for broader\n        compatibility with WSGI servers.\n\n    .. versionchanged:: 1.0\n        UTF-8 filenames as specified in :rfc:`2231` are supported.\n\n    .. versionchanged:: 0.12\n        The filename is no longer automatically inferred from file\n        objects. If you want to use automatic MIME and etag support,\n        pass a filename via ``filename_or_fp`` or\n        ``attachment_filename``.\n\n    .. versionchanged:: 0.12\n        ``attachment_filename`` is preferred over ``filename`` for MIME\n        detection.\n\n    .. versionchanged:: 0.9\n        ``cache_timeout`` defaults to\n        :meth:`Flask.get_send_file_max_age`.\n\n    .. versionchanged:: 0.7\n        MIME guessing and etag support for file-like objects was\n        removed because it was unreliable. Pass a filename if you are\n        able to, otherwise attach an etag yourself.\n\n    .. versionchanged:: 0.5\n        The ``add_etags``, ``cache_timeout`` and ``conditional``\n        parameters were added. The default behavior is to add etags.\n\n    .. versionadded:: 0.2\n    \"\"\"\n    return werkzeug.utils.send_file(  # type: ignore[return-value]\n        **_prepare_send_file_kwargs(\n            path_or_file=path_or_file,\n            environ=request.environ,\n            mimetype=mimetype,\n            as_attachment=as_attachment,\n            download_name=download_name,\n            conditional=conditional,\n            etag=etag,\n            last_modified=last_modified,\n            max_age=max_age,\n        )\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_send_from_directory_send_from_directory.return_werkzeug_utils_sen": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_send_from_directory_send_from_directory.return_werkzeug_utils_sen", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 527, "end_line": 568, "span_ids": ["send_from_directory"], "tokens": 361}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def send_from_directory(\n    directory: os.PathLike[str] | str,\n    path: os.PathLike[str] | str,\n    **kwargs: t.Any,\n) -> Response:\n    \"\"\"Send a file from within a directory using :func:`send_file`.\n\n    .. code-block:: python\n\n        @app.route(\"/uploads/<path:name>\")\n        def download_file(name):\n            return send_from_directory(\n                app.config['UPLOAD_FOLDER'], name, as_attachment=True\n            )\n\n    This is a secure way to serve files from a folder, such as static\n    files or uploads. Uses :func:`~werkzeug.security.safe_join` to\n    ensure the path coming from the client is not maliciously crafted to\n    point outside the specified directory.\n\n    If the final path does not point to an existing regular file,\n    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n    :param directory: The directory that ``path`` must be located under,\n        relative to the current application's root path. This *must not*\n        be a value provided by the client, otherwise it becomes insecure.\n    :param path: The path to the file to send, relative to\n        ``directory``.\n    :param kwargs: Arguments to pass to :func:`send_file`.\n\n    .. versionchanged:: 2.0\n        ``path`` replaces the ``filename`` parameter.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionadded:: 0.5\n    \"\"\"\n    return werkzeug.utils.send_from_directory(  # type: ignore[return-value]\n        directory, path, **_prepare_send_file_kwargs(**kwargs)\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_root_path_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/helpers.py_get_root_path_", "embedding": null, "metadata": {"file_path": "src/flask/helpers.py", "file_name": "helpers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 571, "end_line": 636, "span_ids": ["_split_blueprint_path", "get_root_path"], "tokens": 494}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def get_root_path(import_name: str) -> str:\n    \"\"\"Find the root path of a package, or the path that contains a\n    module. If it cannot be found, returns the current working\n    directory.\n\n    Not to be confused with the value returned by :func:`find_package`.\n\n    :meta private:\n    \"\"\"\n    # Module already imported and has a file attribute. Use that first.\n    mod = sys.modules.get(import_name)\n\n    if mod is not None and hasattr(mod, \"__file__\") and mod.__file__ is not None:\n        return os.path.dirname(os.path.abspath(mod.__file__))\n\n    # Next attempt: check the loader.\n    try:\n        spec = importlib.util.find_spec(import_name)\n\n        if spec is None:\n            raise ValueError\n    except (ImportError, ValueError):\n        loader = None\n    else:\n        loader = spec.loader\n\n    # Loader does not exist or we're referring to an unloaded main\n    # module or a main module without path (interactive sessions), go\n    # with the current working directory.\n    if loader is None:\n        return os.getcwd()\n\n    if hasattr(loader, \"get_filename\"):\n        filepath = loader.get_filename(import_name)  # pyright: ignore\n    else:\n        # Fall back to imports.\n        __import__(import_name)\n        mod = sys.modules[import_name]\n        filepath = getattr(mod, \"__file__\", None)\n\n        # If we don't have a file path it might be because it is a\n        # namespace package. In this case pick the root path from the\n        # first module that is contained in the package.\n        if filepath is None:\n            raise RuntimeError(\n                \"No root path can be found for the provided module\"\n                f\" {import_name!r}. This can happen because the module\"\n                \" came from an import hook that does not provide file\"\n                \" name information or because it's a namespace package.\"\n                \" In this case the root path needs to be explicitly\"\n                \" provided.\"\n            )\n\n    # filepath is import_name.py for a module, or __init__.py for a package.\n    return os.path.dirname(os.path.abspath(filepath))  # type: ignore[no-any-return]\n\n\n@cache\ndef _split_blueprint_path(name: str) -> list[str]:\n    out: list[str] = [name]\n\n    if \".\" in name:\n        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))\n\n    return out", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_from___future___import_an_dumps.return__json_dumps_obj_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_from___future___import_an_dumps.return__json_dumps_obj_", "embedding": null, "metadata": {"file_path": "src/flask/json/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 44, "span_ids": ["dumps", "imports"], "tokens": 306}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport json as _json\nimport typing as t\n\nfrom ..globals import current_app\nfrom .provider import _default\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from ..wrappers import Response\n\n\ndef dumps(obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`\n    method, otherwise it will use :func:`json.dumps`.\n\n    :param obj: The data to serialize.\n    :param kwargs: Arguments passed to the ``dumps`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.dumps``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0.2\n        :class:`decimal.Decimal` is supported by converting to a string.\n\n    .. versionchanged:: 2.0\n        ``encoding`` will be removed in Flask 2.1.\n\n    .. versionchanged:: 1.0.3\n        ``app`` can be passed directly, rather than requiring an app\n        context for configuration.\n    \"\"\"\n    if current_app:\n        return current_app.json.dumps(obj, **kwargs)\n\n    kwargs.setdefault(\"default\", _default)\n    return _json.dumps(obj, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_dump_dump.if_current_app_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_dump_dump.if_current_app_", "embedding": null, "metadata": {"file_path": "src/flask/json/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 47, "end_line": 74, "span_ids": ["dump"], "tokens": 255}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def dump(obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n    \"\"\"Serialize data as JSON and write to a file.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`\n    method, otherwise it will use :func:`json.dump`.\n\n    :param obj: The data to serialize.\n    :param fp: A file opened for writing text. Should use the UTF-8\n        encoding to be valid JSON.\n    :param kwargs: Arguments passed to the ``dump`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.dump``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0\n        Writing to a binary file, and the ``encoding`` argument, will be\n        removed in Flask 2.1.\n    \"\"\"\n    if current_app:\n        current_app.json.dump(obj, fp, **kwargs)\n    else:\n        kwargs.setdefault(\"default\", _default)\n        _json.dump(obj, fp, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_loads_loads.return__json_loads_s_k": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_loads_loads.return__json_loads_s_k", "embedding": null, "metadata": {"file_path": "src/flask/json/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 77, "end_line": 105, "span_ids": ["loads"], "tokens": 241}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def loads(s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`\n    method, otherwise it will use :func:`json.loads`.\n\n    :param s: Text or UTF-8 bytes.\n    :param kwargs: Arguments passed to the ``loads`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.loads``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0\n        ``encoding`` will be removed in Flask 2.1. The data must be a\n        string or UTF-8 bytes.\n\n    .. versionchanged:: 1.0.3\n        ``app`` can be passed directly, rather than requiring an app\n        context for configuration.\n    \"\"\"\n    if current_app:\n        return current_app.json.loads(s, **kwargs)\n\n    return _json.loads(s, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_load_load.return__json_load_fp_k": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_load_load.return__json_load_fp_k", "embedding": null, "metadata": {"file_path": "src/flask/json/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 108, "end_line": 135, "span_ids": ["load"], "tokens": 250}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def load(fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON read from a file.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.load() <flask.json.provider.JSONProvider.load>`\n    method, otherwise it will use :func:`json.load`.\n\n    :param fp: A file opened for reading text or UTF-8 bytes.\n    :param kwargs: Arguments passed to the ``load`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.load``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.2\n        The ``app`` parameter will be removed in Flask 2.3.\n\n    .. versionchanged:: 2.0\n        ``encoding`` will be removed in Flask 2.1. The file must be text\n        mode, or binary mode with UTF-8 bytes.\n    \"\"\"\n    if current_app:\n        return current_app.json.load(fp, **kwargs)\n\n    return _json.load(fp, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_jsonify_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/__init__.py_jsonify_", "embedding": null, "metadata": {"file_path": "src/flask/json/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 138, "end_line": 171, "span_ids": ["jsonify"], "tokens": 315}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def jsonify(*args: t.Any, **kwargs: t.Any) -> Response:\n    \"\"\"Serialize the given arguments as JSON, and return a\n    :class:`~flask.Response` object with the ``application/json``\n    mimetype. A dict or list returned from a view will be converted to a\n    JSON response automatically without needing to call this.\n\n    This requires an active app context, and calls\n    :meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.\n\n    In debug mode, the output is formatted with indentation to make it\n    easier to read. This may also be controlled by the provider.\n\n    Either positional or keyword arguments can be given, not both.\n    If no arguments are given, ``None`` is serialized.\n\n    :param args: A single value to serialize, or multiple values to\n        treat as a list to serialize.\n    :param kwargs: Treat as a dict to serialize.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.response``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0.2\n        :class:`decimal.Decimal` is supported by converting to a string.\n\n    .. versionchanged:: 0.11\n        Added support for serializing top-level arrays. This was a\n        security risk in ancient browsers. See :ref:`security-json`.\n\n    .. versionadded:: 0.2\n    \"\"\"\n    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_from___future___import_an_JSONProvider._prepare_response_obj": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_from___future___import_an_JSONProvider._prepare_response_obj", "embedding": null, "metadata": {"file_path": "src/flask/json/provider.py", "file_name": "provider.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 87, "span_ids": ["JSONProvider", "JSONProvider.__init__", "JSONProvider._prepare_response_obj", "JSONProvider.dump", "JSONProvider.dumps", "JSONProvider.load", "JSONProvider.loads", "imports"], "tokens": 641}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport dataclasses\nimport decimal\nimport json\nimport typing as t\nimport uuid\nimport weakref\nfrom datetime import date\n\nfrom werkzeug.http import http_date\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from werkzeug.sansio.response import Response\n\n    from ..sansio.app import App\n\n\nclass JSONProvider:\n    \"\"\"A standard set of JSON operations for an application. Subclasses\n    of this can be used to customize JSON behavior or use different\n    JSON libraries.\n\n    To implement a provider for a specific library, subclass this base\n    class and implement at least :meth:`dumps` and :meth:`loads`. All\n    other methods have default implementations.\n\n    To use a different provider, either subclass ``Flask`` and set\n    :attr:`~flask.Flask.json_provider_class` to a provider class, or set\n    :attr:`app.json <flask.Flask.json>` to an instance of the class.\n\n    :param app: An application instance. This will be stored as a\n        :class:`weakref.proxy` on the :attr:`_app` attribute.\n\n    .. versionadded:: 2.2\n    \"\"\"\n\n    def __init__(self, app: App) -> None:\n        self._app: App = weakref.proxy(app)\n\n    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError\n\n    def dump(self, obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n        \"\"\"Serialize data as JSON and write to a file.\n\n        :param obj: The data to serialize.\n        :param fp: A file opened for writing text. Should use the UTF-8\n            encoding to be valid JSON.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        fp.write(self.dumps(obj, **kwargs))\n\n    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError\n\n    def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON read from a file.\n\n        :param fp: A file opened for reading text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        return self.loads(fp.read(), **kwargs)\n\n    def _prepare_response_obj(\n        self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]\n    ) -> t.Any:\n        if args and kwargs:\n            raise TypeError(\"app.json.response() takes either args or kwargs, not both\")\n\n        if not args and not kwargs:\n            return None\n\n        if len(args) == 1:\n            return args[0]\n\n        return args or kwargs", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_JSONProvider.response_JSONProvider.response": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_JSONProvider.response_JSONProvider.response", "embedding": null, "metadata": {"file_path": "src/flask/json/provider.py", "file_name": "provider.py", "file_type": "text/x-python", "category": "implementation", "start_line": 89, "end_line": 105, "span_ids": ["JSONProvider.response"], "tokens": 164}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class JSONProvider:\n\n    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n        \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with the ``application/json``\n        mimetype.\n\n        The :func:`~flask.json.jsonify` function calls this method for\n        the current application.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize, or multiple values to\n            treat as a list to serialize.\n        :param kwargs: Treat as a dict to serialize.\n        \"\"\"\n        obj = self._prepare_response_obj(args, kwargs)\n        return self._app.response_class(self.dumps(obj), mimetype=\"application/json\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py__default__default": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py__default__default", "embedding": null, "metadata": {"file_path": "src/flask/json/provider.py", "file_name": "provider.py", "file_type": "text/x-python", "category": "implementation", "start_line": 108, "end_line": 121, "span_ids": ["_default"], "tokens": 108}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _default(o: t.Any) -> t.Any:\n    if isinstance(o, date):\n        return http_date(o)\n\n    if isinstance(o, (decimal.Decimal, uuid.UUID)):\n        return str(o)\n\n    if dataclasses and dataclasses.is_dataclass(o):\n        return dataclasses.asdict(o)  # type: ignore[arg-type]\n\n    if hasattr(o, \"__html__\"):\n        return str(o.__html__())\n\n    raise TypeError(f\"Object of type {type(o).__name__} is not JSON serializable\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider_DefaultJSONProvider._The_mimetype_set_in_m": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider_DefaultJSONProvider._The_mimetype_set_in_m", "embedding": null, "metadata": {"file_path": "src/flask/json/provider.py", "file_name": "provider.py", "file_type": "text/x-python", "category": "implementation", "start_line": 124, "end_line": 164, "span_ids": ["DefaultJSONProvider"], "tokens": 388}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class DefaultJSONProvider(JSONProvider):\n    \"\"\"Provide JSON operations using Python's built-in :mod:`json`\n    library. Serializes the following additional data types:\n\n    -   :class:`datetime.datetime` and :class:`datetime.date` are\n        serialized to :rfc:`822` strings. This is the same as the HTTP\n        date format.\n    -   :class:`uuid.UUID` is serialized to a string.\n    -   :class:`dataclasses.dataclass` is passed to\n        :func:`dataclasses.asdict`.\n    -   :class:`~markupsafe.Markup` (or any object with a ``__html__``\n        method) will call the ``__html__`` method to get a string.\n    \"\"\"\n\n    default: t.Callable[[t.Any], t.Any] = staticmethod(_default)\n    \"\"\"Apply this function to any object that :meth:`json.dumps` does\n    not know how to serialize. It should return a valid JSON type or\n    raise a ``TypeError``.\n    \"\"\"\n\n    ensure_ascii = True\n    \"\"\"Replace non-ASCII characters with escape sequences. This may be\n    more compatible with some clients, but can be disabled for better\n    performance and size.\n    \"\"\"\n\n    sort_keys = True\n    \"\"\"Sort the keys in any serialized dicts. This may be useful for\n    some caching situations, but can be disabled for better performance.\n    When enabled, keys must all be strings, they are not converted\n    before sorting.\n    \"\"\"\n\n    compact: bool | None = None\n    \"\"\"If ``True``, or ``None`` out of debug mode, the :meth:`response`\n    output will not add indentation, newlines, or spaces. If ``False``,\n    or ``None`` in debug mode, it will use a non-compact representation.\n    \"\"\"\n\n    mimetype = \"application/json\"\n    \"\"\"The mimetype set in :meth:`response`.\"\"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider.dumps_DefaultJSONProvider.loads": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider.dumps_DefaultJSONProvider.loads", "embedding": null, "metadata": {"file_path": "src/flask/json/provider.py", "file_name": "provider.py", "file_type": "text/x-python", "category": "implementation", "start_line": 166, "end_line": 187, "span_ids": ["DefaultJSONProvider.dumps", "DefaultJSONProvider.loads"], "tokens": 202}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class DefaultJSONProvider(JSONProvider):\n\n    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON to a string.\n\n        Keyword arguments are passed to :func:`json.dumps`. Sets some\n        parameter defaults from the :attr:`default`,\n        :attr:`ensure_ascii`, and :attr:`sort_keys` attributes.\n\n        :param obj: The data to serialize.\n        :param kwargs: Passed to :func:`json.dumps`.\n        \"\"\"\n        kwargs.setdefault(\"default\", self.default)\n        kwargs.setdefault(\"ensure_ascii\", self.ensure_ascii)\n        kwargs.setdefault(\"sort_keys\", self.sort_keys)\n        return json.dumps(obj, **kwargs)\n\n    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON from a string or bytes.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: Passed to :func:`json.loads`.\n        \"\"\"\n        return json.loads(s, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider.response_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/provider.py_DefaultJSONProvider.response_", "embedding": null, "metadata": {"file_path": "src/flask/json/provider.py", "file_name": "provider.py", "file_type": "text/x-python", "category": "implementation", "start_line": 189, "end_line": 216, "span_ids": ["DefaultJSONProvider.response"], "tokens": 258}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class DefaultJSONProvider(JSONProvider):\n\n    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n        \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with it. The response mimetype\n        will be \"application/json\" and can be changed with\n        :attr:`mimetype`.\n\n        If :attr:`compact` is ``False`` or debug mode is enabled, the\n        output will be formatted to be easier to read.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize, or multiple values to\n            treat as a list to serialize.\n        :param kwargs: Treat as a dict to serialize.\n        \"\"\"\n        obj = self._prepare_response_obj(args, kwargs)\n        dump_args: dict[str, t.Any] = {}\n\n        if (self.compact is None and self._app.debug) or self.compact is False:\n            dump_args.setdefault(\"indent\", 2)\n        else:\n            dump_args.setdefault(\"separators\", (\",\", \":\"))\n\n        return self._app.response_class(\n            f\"{self.dumps(obj, **dump_args)}\\n\", mimetype=self.mimetype\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py___loads": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py___loads", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 57, "span_ids": ["docstring", "imports"], "tokens": 362}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "\"\"\"\nTagged JSON\n~~~~~~~~~~~\n\nA compact representation for lossless serialization of non-standard JSON\ntypes. :class:`~flask.sessions.SecureCookieSessionInterface` uses this\nto serialize the session data, but it may be useful in other places. It\ncan be extended to support other types.\n\n.. autoclass:: TaggedJSONSerializer\n    :members:\n\n.. autoclass:: JSONTag\n    :members:\n\nLet's see an example that adds support for\n:class:`~collections.OrderedDict`. Dicts don't have an order in JSON, so\nto handle this we will dump the items as a list of ``[key, value]``\npairs. Subclass :class:`JSONTag` and give it the new key ``' od'`` to\nidentify the type. The session serializer processes dicts first, so\ninsert the new tag at the front of the order since ``OrderedDict`` must\nbe processed before ``dict``.\n\n.. code-block:: python\n\n    from flask.json.tag import JSONTag\n\n    class TagOrderedDict(JSONTag):\n        __slots__ = ('serializer',)\n        key = ' od'\n\n        def check(self, value):\n            return isinstance(value, OrderedDict)\n\n        def to_json(self, value):\n            return [[k, self.serializer.tag(v)] for k, v in iteritems(value)]\n\n        def to_python(self, value):\n            return OrderedDict(value)\n\n    app.session_interface.serializer.register(TagOrderedDict, index=0)\n\"\"\"\n\nfrom __future__ import annotations\n\nimport typing as t\nfrom base64 import b64decode\nfrom base64 import b64encode\nfrom datetime import datetime\nfrom uuid import UUID\n\nfrom markupsafe import Markup\nfrom werkzeug.http import http_date\nfrom werkzeug.http import parse_date\n\nfrom ..json import dumps\nfrom ..json import loads", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_JSONTag_JSONTag.tag": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_JSONTag_JSONTag.tag", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 60, "end_line": 90, "span_ids": ["JSONTag", "JSONTag.__init__", "JSONTag.check", "JSONTag.tag", "JSONTag.to_json", "JSONTag.to_python"], "tokens": 247}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class JSONTag:\n    \"\"\"Base class for defining type tags for :class:`TaggedJSONSerializer`.\"\"\"\n\n    __slots__ = (\"serializer\",)\n\n    #: The tag to mark the serialized object with. If empty, this tag is\n    #: only used as an intermediate step during tagging.\n    key: str = \"\"\n\n    def __init__(self, serializer: TaggedJSONSerializer) -> None:\n        \"\"\"Create a tagger for the given serializer.\"\"\"\n        self.serializer = serializer\n\n    def check(self, value: t.Any) -> bool:\n        \"\"\"Check if the given value should be tagged by this tag.\"\"\"\n        raise NotImplementedError\n\n    def to_json(self, value: t.Any) -> t.Any:\n        \"\"\"Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.\"\"\"\n        raise NotImplementedError\n\n    def to_python(self, value: t.Any) -> t.Any:\n        \"\"\"Convert the JSON representation back to the correct type. The tag\n        will already be removed.\"\"\"\n        raise NotImplementedError\n\n    def tag(self, value: t.Any) -> dict[str, t.Any]:\n        \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n        return {self.key: self.to_json(value)}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagDict_TagDict.to_python": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagDict_TagDict.to_python", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 93, "end_line": 116, "span_ids": ["TagDict", "TagDict.check", "TagDict.to_json", "TagDict.to_python"], "tokens": 170}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TagDict(JSONTag):\n    \"\"\"Tag for 1-item dicts whose only key matches a registered tag.\n\n    Internally, the dict key is suffixed with `__`, and the suffix is removed\n    when deserializing.\n    \"\"\"\n\n    __slots__ = ()\n    key = \" di\"\n\n    def check(self, value: t.Any) -> bool:\n        return (\n            isinstance(value, dict)\n            and len(value) == 1\n            and next(iter(value)) in self.serializer.tags\n        )\n\n    def to_json(self, value: t.Any) -> t.Any:\n        key = next(iter(value))\n        return {f\"{key}__\": self.serializer.tag(value[key])}\n\n    def to_python(self, value: t.Any) -> t.Any:\n        key = next(iter(value))\n        return {key[:-2]: value[key]}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_PassDict_TagBytes.to_python": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_PassDict_TagBytes.to_python", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 119, "end_line": 170, "span_ids": ["PassDict", "PassDict.check", "PassDict.to_json", "PassDict:3", "PassList", "PassList.check", "PassList.to_json", "PassList:3", "TagBytes", "TagBytes.check", "TagBytes.to_json", "TagBytes.to_python", "TagTuple", "TagTuple.check", "TagTuple.to_json", "TagTuple.to_python"], "tokens": 311}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class PassDict(JSONTag):\n    __slots__ = ()\n\n    def check(self, value: t.Any) -> bool:\n        return isinstance(value, dict)\n\n    def to_json(self, value: t.Any) -> t.Any:\n        # JSON objects may only have string keys, so don't bother tagging the\n        # key here.\n        return {k: self.serializer.tag(v) for k, v in value.items()}\n\n    tag = to_json\n\n\nclass TagTuple(JSONTag):\n    __slots__ = ()\n    key = \" t\"\n\n    def check(self, value: t.Any) -> bool:\n        return isinstance(value, tuple)\n\n    def to_json(self, value: t.Any) -> t.Any:\n        return [self.serializer.tag(item) for item in value]\n\n    def to_python(self, value: t.Any) -> t.Any:\n        return tuple(value)\n\n\nclass PassList(JSONTag):\n    __slots__ = ()\n\n    def check(self, value: t.Any) -> bool:\n        return isinstance(value, list)\n\n    def to_json(self, value: t.Any) -> t.Any:\n        return [self.serializer.tag(item) for item in value]\n\n    tag = to_json\n\n\nclass TagBytes(JSONTag):\n    __slots__ = ()\n    key = \" b\"\n\n    def check(self, value: t.Any) -> bool:\n        return isinstance(value, bytes)\n\n    def to_json(self, value: t.Any) -> t.Any:\n        return b64encode(value).decode(\"ascii\")\n\n    def to_python(self, value: t.Any) -> t.Any:\n        return b64decode(value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagMarkup_TagMarkup.to_python": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagMarkup_TagMarkup.to_python", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 173, "end_line": 188, "span_ids": ["TagMarkup", "TagMarkup.check", "TagMarkup.to_json", "TagMarkup.to_python"], "tokens": 135}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TagMarkup(JSONTag):\n    \"\"\"Serialize anything matching the :class:`~markupsafe.Markup` API by\n    having a ``__html__`` method to the result of that method. Always\n    deserializes to an instance of :class:`~markupsafe.Markup`.\"\"\"\n\n    __slots__ = ()\n    key = \" m\"\n\n    def check(self, value: t.Any) -> bool:\n        return callable(getattr(value, \"__html__\", None))\n\n    def to_json(self, value: t.Any) -> t.Any:\n        return str(value.__html__())\n\n    def to_python(self, value: t.Any) -> t.Any:\n        return Markup(value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagUUID_TagDateTime.to_python": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TagUUID_TagDateTime.to_python", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 191, "end_line": 216, "span_ids": ["TagDateTime", "TagDateTime.check", "TagDateTime.to_json", "TagDateTime.to_python", "TagUUID", "TagUUID.check", "TagUUID.to_json", "TagUUID.to_python"], "tokens": 147}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TagUUID(JSONTag):\n    __slots__ = ()\n    key = \" u\"\n\n    def check(self, value: t.Any) -> bool:\n        return isinstance(value, UUID)\n\n    def to_json(self, value: t.Any) -> t.Any:\n        return value.hex\n\n    def to_python(self, value: t.Any) -> t.Any:\n        return UUID(value)\n\n\nclass TagDateTime(JSONTag):\n    __slots__ = ()\n    key = \" d\"\n\n    def check(self, value: t.Any) -> bool:\n        return isinstance(value, datetime)\n\n    def to_json(self, value: t.Any) -> t.Any:\n        return http_date(value)\n\n    def to_python(self, value: t.Any) -> t.Any:\n        return parse_date(value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer_TaggedJSONSerializer.__init__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer_TaggedJSONSerializer.__init__", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 219, "end_line": 254, "span_ids": ["TaggedJSONSerializer", "TaggedJSONSerializer.__init__"], "tokens": 216}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TaggedJSONSerializer:\n    \"\"\"Serializer that uses a tag system to compactly represent objects that\n    are not JSON types. Passed as the intermediate serializer to\n    :class:`itsdangerous.Serializer`.\n\n    The following extra types are supported:\n\n    * :class:`dict`\n    * :class:`tuple`\n    * :class:`bytes`\n    * :class:`~markupsafe.Markup`\n    * :class:`~uuid.UUID`\n    * :class:`~datetime.datetime`\n    \"\"\"\n\n    __slots__ = (\"tags\", \"order\")\n\n    #: Tag classes to bind when creating the serializer. Other tags can be\n    #: added later using :meth:`~register`.\n    default_tags = [\n        TagDict,\n        PassDict,\n        TagTuple,\n        PassList,\n        TagBytes,\n        TagMarkup,\n        TagUUID,\n        TagDateTime,\n    ]\n\n    def __init__(self) -> None:\n        self.tags: dict[str, JSONTag] = {}\n        self.order: list[JSONTag] = []\n\n        for cls in self.default_tags:\n            self.register(cls)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer.register_TaggedJSONSerializer.register.if_index_is_None_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer.register_TaggedJSONSerializer.register.if_index_is_None_", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 256, "end_line": 287, "span_ids": ["TaggedJSONSerializer.register"], "tokens": 233}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TaggedJSONSerializer:\n\n    def register(\n        self,\n        tag_class: type[JSONTag],\n        force: bool = False,\n        index: int | None = None,\n    ) -> None:\n        \"\"\"Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n            the new tag is a special case of an existing tag. If ``None``\n            (default), the tag is appended to the end of the order.\n\n        :raise KeyError: if the tag key is already registered and ``force`` is\n            not true.\n        \"\"\"\n        tag = tag_class(self)\n        key = tag.key\n\n        if key:\n            if not force and key in self.tags:\n                raise KeyError(f\"Tag '{key}' is already registered.\")\n\n            self.tags[key] = tag\n\n        if index is None:\n            self.order.append(tag)\n        else:\n            self.order.insert(index, tag)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer.tag_TaggedJSONSerializer.untag": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer.tag_TaggedJSONSerializer.untag", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 289, "end_line": 307, "span_ids": ["TaggedJSONSerializer.tag", "TaggedJSONSerializer.untag"], "tokens": 119}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TaggedJSONSerializer:\n\n    def tag(self, value: t.Any) -> t.Any:\n        \"\"\"Convert a value to a tagged representation if necessary.\"\"\"\n        for tag in self.order:\n            if tag.check(value):\n                return tag.tag(value)\n\n        return value\n\n    def untag(self, value: dict[str, t.Any]) -> t.Any:\n        \"\"\"Convert a tagged representation back to the original type.\"\"\"\n        if len(value) != 1:\n            return value\n\n        key = next(iter(value))\n\n        if key not in self.tags:\n            return value\n\n        return self.tags[key].to_python(value[key])", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer._untag_scan_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/json/tag.py_TaggedJSONSerializer._untag_scan_", "embedding": null, "metadata": {"file_path": "src/flask/json/tag.py", "file_name": "tag.py", "file_type": "text/x-python", "category": "implementation", "start_line": 309, "end_line": 328, "span_ids": ["TaggedJSONSerializer._untag_scan", "TaggedJSONSerializer.dumps", "TaggedJSONSerializer.loads"], "tokens": 179}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TaggedJSONSerializer:\n\n    def _untag_scan(self, value: t.Any) -> t.Any:\n        if isinstance(value, dict):\n            # untag each item recursively\n            value = {k: self._untag_scan(v) for k, v in value.items()}\n            # untag the dict itself\n            value = self.untag(value)\n        elif isinstance(value, list):\n            # untag each item recursively\n            value = [self._untag_scan(item) for item in value]\n\n        return value\n\n    def dumps(self, value: t.Any) -> str:\n        \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"\n        return dumps(self.tag(value), separators=(\",\", \":\"))\n\n    def loads(self, value: str) -> t.Any:\n        \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"\n        return self._untag_scan(loads(value))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_from___future___import_an_wsgi_errors_stream": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_from___future___import_an_wsgi_errors_stream", "embedding": null, "metadata": {"file_path": "src/flask/logging.py", "file_name": "logging.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 28, "span_ids": ["imports", "wsgi_errors_stream"], "tokens": 187}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport logging\nimport sys\nimport typing as t\n\nfrom werkzeug.local import LocalProxy\n\nfrom .globals import request\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from .sansio.app import App\n\n\n@LocalProxy\ndef wsgi_errors_stream() -> t.TextIO:\n    \"\"\"Find the most appropriate error stream for the application. If a request\n    is active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\n    If you configure your own :class:`logging.StreamHandler`, you may want to\n    use this for the stream. If you are using file or dict configuration and\n    can't import this directly, you can refer to it as\n    ``ext://flask.logging.wsgi_errors_stream``.\n    \"\"\"\n    if request:\n        return request.environ[\"wsgi.errors\"]  # type: ignore[no-any-return]\n\n    return sys.stderr", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_has_level_handler_default_handler_setFormat": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_has_level_handler_default_handler_setFormat", "embedding": null, "metadata": {"file_path": "src/flask/logging.py", "file_name": "logging.py", "file_type": "text/x-python", "category": "implementation", "start_line": 31, "end_line": 55, "span_ids": ["has_level_handler", "impl:2"], "tokens": 186}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def has_level_handler(logger: logging.Logger) -> bool:\n    \"\"\"Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    \"\"\"\n    level = logger.getEffectiveLevel()\n    current = logger\n\n    while current:\n        if any(handler.level <= level for handler in current.handlers):\n            return True\n\n        if not current.propagate:\n            break\n\n        current = current.parent  # type: ignore\n\n    return False\n\n\n#: Log messages to :func:`~flask.logging.wsgi_errors_stream` with the format\n#: ``[%(asctime)s] %(levelname)s in %(module)s: %(message)s``.\ndefault_handler = logging.StreamHandler(wsgi_errors_stream)  # type: ignore\ndefault_handler.setFormatter(\n    logging.Formatter(\"[%(asctime)s] %(levelname)s in %(module)s: %(message)s\")\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_create_logger_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/logging.py_create_logger_", "embedding": null, "metadata": {"file_path": "src/flask/logging.py", "file_name": "logging.py", "file_type": "text/x-python", "category": "implementation", "start_line": 58, "end_line": 80, "span_ids": ["create_logger"], "tokens": 168}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def create_logger(app: App) -> logging.Logger:\n    \"\"\"Get the Flask app's logger and configure it if needed.\n\n    The logger name will be the same as\n    :attr:`app.import_name <flask.Flask.name>`.\n\n    When :attr:`~flask.Flask.debug` is enabled, set the logger level to\n    :data:`logging.DEBUG` if it is not set.\n\n    If there is no handler for the logger's effective level, add a\n    :class:`~logging.StreamHandler` for\n    :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n    \"\"\"\n    logger = logging.getLogger(app.name)\n\n    if app.debug and not logger.level:\n        logger.setLevel(logging.DEBUG)\n\n    if not has_level_handler(logger):\n        logger.addHandler(default_handler)\n\n    return logger", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_from___future___import_an__make_timedelta": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_from___future___import_an__make_timedelta", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 56, "span_ids": ["_make_timedelta", "imports"], "tokens": 388}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport logging\nimport os\nimport sys\nimport typing as t\nfrom datetime import timedelta\nfrom itertools import chain\n\nfrom werkzeug.exceptions import Aborter\nfrom werkzeug.exceptions import BadRequest\nfrom werkzeug.exceptions import BadRequestKeyError\nfrom werkzeug.routing import BuildError\nfrom werkzeug.routing import Map\nfrom werkzeug.routing import Rule\nfrom werkzeug.sansio.response import Response\nfrom werkzeug.utils import cached_property\nfrom werkzeug.utils import redirect as _wz_redirect\n\nfrom .. import typing as ft\nfrom ..config import Config\nfrom ..config import ConfigAttribute\nfrom ..ctx import _AppCtxGlobals\nfrom ..helpers import _split_blueprint_path\nfrom ..helpers import get_debug_flag\nfrom ..json.provider import DefaultJSONProvider\nfrom ..json.provider import JSONProvider\nfrom ..logging import create_logger\nfrom ..templating import DispatchingJinjaLoader\nfrom ..templating import Environment\nfrom .scaffold import _endpoint_from_view_func\nfrom .scaffold import find_package\nfrom .scaffold import Scaffold\nfrom .scaffold import setupmethod\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from werkzeug.wrappers import Response as BaseResponse\n\n    from ..testing import FlaskClient\n    from ..testing import FlaskCliRunner\n    from .blueprints import Blueprint\n\nT_shell_context_processor = t.TypeVar(\n    \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable\n)\nT_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\nT_template_filter = t.TypeVar(\"T_template_filter\", bound=ft.TemplateFilterCallable)\nT_template_global = t.TypeVar(\"T_template_global\", bound=ft.TemplateGlobalCallable)\nT_template_test = t.TypeVar(\"T_template_test\", bound=ft.TemplateTestCallable)\n\n\ndef _make_timedelta(value: timedelta | int | None) -> timedelta | None:\n    if value is None or isinstance(value, timedelta):\n        return value\n\n    return timedelta(seconds=value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App_App._The_flask_object_imple": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App_App._The_flask_object_imple", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 59, "end_line": 154, "span_ids": ["App"], "tokens": 1012}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n    \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: The folder with static files that is served at\n        ``static_url_path``. Relative to the application ``root_path``\n        or an absolute path. Defaults to ``'static'``.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: The path to the root of the application files.\n        This should only be set manually when it can't be detected\n        automatically, such as for namespace packages.\n    \"\"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._The_class_of_the_objec_App._meth_create_jinja_en": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._The_class_of_the_objec_App._meth_create_jinja_en", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 156, "end_line": 240, "span_ids": ["App"], "tokens": 742}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    #: The class of the object assigned to :attr:`aborter`, created by\n    #: :meth:`create_aborter`. That object is called by\n    #: :func:`flask.abort` to raise HTTP errors, and can be\n    #: called directly as well.\n    #:\n    #: Defaults to :class:`werkzeug.exceptions.Aborter`.\n    #:\n    #: .. versionadded:: 2.2\n    aborter_class = Aborter\n\n    #: The class that is used for the Jinja environment.\n    #:\n    #: .. versionadded:: 0.11\n    jinja_environment = Environment\n\n    #: The class that is used for the :data:`~flask.g` instance.\n    #:\n    #: Example use cases for a custom class:\n    #:\n    #: 1. Store arbitrary attributes on flask.g.\n    #: 2. Add a property for lazy per-request database connectors.\n    #: 3. Return None instead of AttributeError on unexpected attributes.\n    #: 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.\n    #:\n    #: .. versionadded:: 0.10\n    #:     Renamed from ``request_globals_class`.\n    app_ctx_globals_class = _AppCtxGlobals\n\n    #: The class that is used for the ``config`` attribute of this app.\n    #: Defaults to :class:`~flask.Config`.\n    #:\n    #: Example use cases for a custom class:\n    #:\n    #: 1. Default values for certain config options.\n    #: 2. Access to config values through attributes in addition to keys.\n    #:\n    #: .. versionadded:: 0.11\n    config_class = Config\n\n    #: The testing flag.  Set this to ``True`` to enable the test mode of\n    #: Flask extensions (and in the future probably also Flask itself).\n    #: For example this might activate test helpers that have an\n    #: additional runtime cost which should not be enabled by default.\n    #:\n    #: If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\n    #: default it's implicitly enabled.\n    #:\n    #: This attribute can also be configured from the config with the\n    #: ``TESTING`` configuration key.  Defaults to ``False``.\n    testing = ConfigAttribute[bool](\"TESTING\")\n\n    #: If a secret key is set, cryptographic components can use this to\n    #: sign cookies and other things. Set this to a complex random value\n    #: when you want to use the secure cookie for instance.\n    #:\n    #: This attribute can also be configured from the config with the\n    #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.\n    secret_key = ConfigAttribute[str | bytes | None](\"SECRET_KEY\")\n\n    #: A :class:`~datetime.timedelta` which is used to set the expiration\n    #: date of a permanent session.  The default is 31 days which makes a\n    #: permanent session survive for roughly one month.\n    #:\n    #: This attribute can also be configured from the config with the\n    #: ``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to\n    #: ``timedelta(days=31)``\n    permanent_session_lifetime = ConfigAttribute[timedelta](\n        \"PERMANENT_SESSION_LIFETIME\",\n        get_converter=_make_timedelta,  # type: ignore[arg-type]\n    )\n\n    json_provider_class: type[JSONProvider] = DefaultJSONProvider\n    \"\"\"A subclass of :class:`~flask.json.provider.JSONProvider`. An\n    instance is created and assigned to :attr:`app.json` when creating\n    the app.\n\n    The default, :class:`~flask.json.provider.DefaultJSONProvider`, uses\n    Python's built-in :mod:`json` library. A different provider can use\n    a different JSON library.\n\n    .. versionadded:: 2.2\n    \"\"\"\n\n    #: Options that are passed to the Jinja environment in\n    #: :meth:`create_jinja_environment`. Changing these options after", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._the_environment_is_cre_App.response_class": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._the_environment_is_cre_App.response_class", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 241, "end_line": 277, "span_ids": ["App"], "tokens": 317}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n    #: the environment is created (accessing :attr:`jinja_env`) will\n    #: have no effect.\n    #:\n    #: .. versionchanged:: 1.1.0\n    #:     This is a ``dict`` instead of an ``ImmutableDict`` to allow\n    #:     easier configuration.\n    #:\n    jinja_options: dict[str, t.Any] = {}\n\n    #: The rule object to use for URL rules created.  This is used by\n    #: :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.\n    #:\n    #: .. versionadded:: 0.7\n    url_rule_class = Rule\n\n    #: The map object to use for storing the URL rules and routing\n    #: configuration parameters. Defaults to :class:`werkzeug.routing.Map`.\n    #:\n    #: .. versionadded:: 1.1.0\n    url_map_class = Map\n\n    #: The :meth:`test_client` method creates an instance of this test\n    #: client class. Defaults to :class:`~flask.testing.FlaskClient`.\n    #:\n    #: .. versionadded:: 0.7\n    test_client_class: type[FlaskClient] | None = None\n\n    #: The :class:`~click.testing.CliRunner` subclass, by default\n    #: :class:`~flask.testing.FlaskCliRunner` that is used by\n    #: :meth:`test_cli_runner`. Its ``__init__`` method should take a\n    #: Flask app object as the first argument.\n    #:\n    #: .. versionadded:: 1.0\n    test_cli_runner_class: type[FlaskCliRunner] | None = None\n\n    default_config: dict[str, t.Any]\n    response_class: type[Response]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.__init___App.__init__.self._got_first_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.__init___App.__init__.self._got_first_request", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 279, "end_line": 408, "span_ids": ["App.__init__"], "tokens": 1069}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def __init__(\n        self,\n        import_name: str,\n        static_url_path: str | None = None,\n        static_folder: str | os.PathLike[str] | None = \"static\",\n        static_host: str | None = None,\n        host_matching: bool = False,\n        subdomain_matching: bool = False,\n        template_folder: str | os.PathLike[str] | None = \"templates\",\n        instance_path: str | None = None,\n        instance_relative_config: bool = False,\n        root_path: str | None = None,\n    ) -> None:\n        super().__init__(\n            import_name=import_name,\n            static_folder=static_folder,\n            static_url_path=static_url_path,\n            template_folder=template_folder,\n            root_path=root_path,\n        )\n\n        if instance_path is None:\n            instance_path = self.auto_find_instance_path()\n        elif not os.path.isabs(instance_path):\n            raise ValueError(\n                \"If an instance path is provided it must be absolute.\"\n                \" A relative path was given instead.\"\n            )\n\n        #: Holds the path to the instance folder.\n        #:\n        #: .. versionadded:: 0.8\n        self.instance_path = instance_path\n\n        #: The configuration dictionary as :class:`Config`.  This behaves\n        #: exactly like a regular dictionary but supports additional methods\n        #: to load a config from files.\n        self.config = self.make_config(instance_relative_config)\n\n        #: An instance of :attr:`aborter_class` created by\n        #: :meth:`make_aborter`. This is called by :func:`flask.abort`\n        #: to raise HTTP errors, and can be called directly as well.\n        #:\n        #: .. versionadded:: 2.2\n        #:     Moved from ``flask.abort``, which calls this object.\n        self.aborter = self.make_aborter()\n\n        self.json: JSONProvider = self.json_provider_class(self)\n        \"\"\"Provides access to JSON methods. Functions in ``flask.json``\n        will call methods on this provider when the application context\n        is active. Used for handling JSON requests and responses.\n\n        An instance of :attr:`json_provider_class`. Can be customized by\n        changing that attribute on a subclass, or by assigning to this\n        attribute afterwards.\n\n        The default, :class:`~flask.json.provider.DefaultJSONProvider`,\n        uses Python's built-in :mod:`json` library. A different provider\n        can use a different JSON library.\n\n        .. versionadded:: 2.2\n        \"\"\"\n\n        #: A list of functions that are called by\n        #: :meth:`handle_url_build_error` when :meth:`.url_for` raises a\n        #: :exc:`~werkzeug.routing.BuildError`. Each function is called\n        #: with ``error``, ``endpoint`` and ``values``. If a function\n        #: returns ``None`` or raises a ``BuildError``, it is skipped.\n        #: Otherwise, its return value is returned by ``url_for``.\n        #:\n        #: .. versionadded:: 0.9\n        self.url_build_error_handlers: list[\n            t.Callable[[Exception, str, dict[str, t.Any]], str]\n        ] = []\n\n        #: A list of functions that are called when the application context\n        #: is destroyed.  Since the application context is also torn down\n        #: if the request ends this is the place to store code that disconnects\n        #: from databases.\n        #:\n        #: .. versionadded:: 0.9\n        self.teardown_appcontext_funcs: list[ft.TeardownCallable] = []\n\n        #: A list of shell context processor functions that should be run\n        #: when a shell context is created.\n        #:\n        #: .. versionadded:: 0.11\n        self.shell_context_processors: list[ft.ShellContextProcessorCallable] = []\n\n        #: Maps registered blueprint names to blueprint objects. The\n        #: dict retains the order the blueprints were registered in.\n        #: Blueprints can be registered multiple times, this dict does\n        #: not track how often they were attached.\n        #:\n        #: .. versionadded:: 0.7\n        self.blueprints: dict[str, Blueprint] = {}\n\n        #: a place where extensions can store application specific state.  For\n        #: example this is where an extension could store database engines and\n        #: similar things.\n        #:\n        #: The key must match the name of the extension module. For example in\n        #: case of a \"Flask-Foo\" extension in `flask_foo`, the key would be\n        #: ``'foo'``.\n        #:\n        #: .. versionadded:: 0.7\n        self.extensions: dict[str, t.Any] = {}\n\n        #: The :class:`~werkzeug.routing.Map` for this instance.  You can use\n        #: this to change the routing converters after the class was created\n        #: but before any routes are connected.  Example::\n        #:\n        #:    from werkzeug.routing import BaseConverter\n        #:\n        #:    class ListConverter(BaseConverter):\n        #:        def to_python(self, value):\n        #:            return value.split(',')\n        #:        def to_url(self, values):\n        #:            return ','.join(super(ListConverter, self).to_url(value)\n        #:                            for value in values)\n        #:\n        #:    app = Flask(__name__)\n        #:    app.url_map.converters['list'] = ListConverter\n        self.url_map = self.url_map_class(host_matching=host_matching)\n\n        self.subdomain_matching = subdomain_matching\n\n        # tracks internally if the application already handled at least one\n        # request.\n        self._got_first_request = False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._check_setup_finished_App._check_setup_finished": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App._check_setup_finished_App._check_setup_finished", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 410, "end_line": 420, "span_ids": ["App._check_setup_finished"], "tokens": 104}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def _check_setup_finished(self, f_name: str) -> None:\n        if self._got_first_request:\n            raise AssertionError(\n                f\"The setup method '{f_name}' can no longer be called\"\n                \" on the application. It has already handled its first\"\n                \" request, any changes will not be applied\"\n                \" consistently.\\n\"\n                \"Make sure all imports, decorators, functions, etc.\"\n                \" needed to set up the application are done before\"\n                \" running it.\"\n            )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.name_App.name": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.name_App.name", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 422, "end_line": 437, "span_ids": ["App.name"], "tokens": 154}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @cached_property\n    def name(self) -> str:\n        \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        if self.import_name == \"__main__\":\n            fn: str | None = getattr(sys.modules[\"__main__\"], \"__file__\", None)\n            if fn is None:\n                return \"__main__\"\n            return os.path.splitext(os.path.basename(fn))[0]\n        return self.import_name", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.logger_App.logger.return_create_logger_self": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.logger_App.logger.return_create_logger_self", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 439, "end_line": 464, "span_ids": ["App.logger"], "tokens": 243}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @cached_property\n    def logger(self) -> logging.Logger:\n        \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        return create_logger(self)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.jinja_env_App.make_config": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.jinja_env_App.make_config", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 466, "end_line": 493, "span_ids": ["App.create_jinja_environment", "App.jinja_env", "App.make_config"], "tokens": 219}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @cached_property\n    def jinja_env(self) -> Environment:\n        \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\n        return self.create_jinja_environment()\n\n    def create_jinja_environment(self) -> Environment:\n        raise NotImplementedError()\n\n    def make_config(self, instance_relative: bool = False) -> Config:\n        \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        root_path = self.root_path\n        if instance_relative:\n            root_path = self.instance_path\n        defaults = dict(self.default_config)\n        defaults[\"DEBUG\"] = get_debug_flag()\n        return self.config_class(root_path, defaults)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.make_aborter_App.make_aborter": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.make_aborter_App.make_aborter", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 495, "end_line": 505, "span_ids": ["App.make_aborter"], "tokens": 102}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def make_aborter(self) -> Aborter:\n        \"\"\"Create the object to assign to :attr:`aborter`. That object\n        is called by :func:`flask.abort` to raise HTTP errors, and can\n        be called directly as well.\n\n        By default, this creates an instance of :attr:`aborter_class`,\n        which defaults to :class:`werkzeug.exceptions.Aborter`.\n\n        .. versionadded:: 2.2\n        \"\"\"\n        return self.aborter_class()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.auto_find_instance_path_App.auto_find_instance_path": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.auto_find_instance_path_App.auto_find_instance_path", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 507, "end_line": 518, "span_ids": ["App.auto_find_instance_path"], "tokens": 119}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def auto_find_instance_path(self) -> str:\n        \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        prefix, package_path = find_package(self.import_name)\n        if prefix is None:\n            return os.path.join(package_path, \"instance\")\n        return os.path.join(prefix, \"var\", f\"{self.name}-instance\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.create_global_jinja_loader_App.create_global_jinja_loader": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.create_global_jinja_loader_App.create_global_jinja_loader", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 520, "end_line": 531, "span_ids": ["App.create_global_jinja_loader"], "tokens": 113}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def create_global_jinja_loader(self) -> DispatchingJinjaLoader:\n        \"\"\"Creates the loader for the Jinja environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        return DispatchingJinjaLoader(self)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.select_jinja_autoescape_App.select_jinja_autoescape": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.select_jinja_autoescape_App.select_jinja_autoescape", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 533, "end_line": 544, "span_ids": ["App.select_jinja_autoescape"], "tokens": 114}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def select_jinja_autoescape(self, filename: str) -> bool:\n        \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionchanged:: 2.2\n            Autoescaping is now enabled by default for ``.svg`` files.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if filename is None:\n            return True\n        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.debug_App.debug_11": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.debug_App.debug_11", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 546, "end_line": 564, "span_ids": ["App.debug", "App.debug_11"], "tokens": 167}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @property\n    def debug(self) -> bool:\n        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the\n        development server, an interactive debugger will be shown for unhandled\n        exceptions, and the server will be reloaded when code changes. This maps to the\n        :data:`DEBUG` config key. It may not behave as expected if set late.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``False``\n        \"\"\"\n        return self.config[\"DEBUG\"]  # type: ignore[no-any-return]\n\n    @debug.setter\n    def debug(self, value: bool) -> None:\n        self.config[\"DEBUG\"] = value\n\n        if self.config[\"TEMPLATES_AUTO_RELOAD\"] is None:\n            self.jinja_env.auto_reload = value", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.register_blueprint_App.iter_blueprints": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.register_blueprint_App.iter_blueprints", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 566, "end_line": 599, "span_ids": ["App.iter_blueprints", "App.register_blueprint"], "tokens": 315}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @setupmethod\n    def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None:\n        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        blueprint.register(self, options)\n\n    def iter_blueprints(self) -> t.ValuesView[Blueprint]:\n        \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.blueprints.values()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_url_rule_App.add_url_rule.if_view_func_is_not_None_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_url_rule_App.add_url_rule.if_view_func_is_not_None_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 601, "end_line": 658, "span_ids": ["App.add_url_rule"], "tokens": 464}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @setupmethod\n    def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        if endpoint is None:\n            endpoint = _endpoint_from_view_func(view_func)  # type: ignore\n        options[\"endpoint\"] = endpoint\n        methods = options.pop(\"methods\", None)\n\n        # if the methods are not given and the view_func object knows its\n        # methods we can use that instead.  If neither exists, we go with\n        # a tuple of only ``GET`` as default.\n        if methods is None:\n            methods = getattr(view_func, \"methods\", None) or (\"GET\",)\n        if isinstance(methods, str):\n            raise TypeError(\n                \"Allowed methods must be a list of strings, for\"\n                ' example: @app.route(..., methods=[\"POST\"])'\n            )\n        methods = {item.upper() for item in methods}\n\n        # Methods that should always be added\n        required_methods: set[str] = set(getattr(view_func, \"required_methods\", ()))\n\n        # starting with Flask 0.8 the view_func object can disable and\n        # force-enable the automatic options handling.\n        if provide_automatic_options is None:\n            provide_automatic_options = getattr(\n                view_func, \"provide_automatic_options\", None\n            )\n\n        if provide_automatic_options is None:\n            if \"OPTIONS\" not in methods and self.config[\"PROVIDE_AUTOMATIC_OPTIONS\"]:\n                provide_automatic_options = True\n                required_methods.add(\"OPTIONS\")\n            else:\n                provide_automatic_options = False\n\n        # Add the required methods now.\n        methods |= required_methods\n\n        rule_obj = self.url_rule_class(rule, methods=methods, **options)\n        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]\n\n        self.url_map.add(rule_obj)\n        if view_func is not None:\n            old_func = self.view_functions.get(endpoint)\n            if old_func is not None and old_func != view_func:\n                raise AssertionError(\n                    \"View function mapping is overwriting an existing\"\n                    f\" endpoint function: {endpoint}\"\n                )\n            self.view_functions[endpoint] = view_func", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_filter_App.template_filter_17.return_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_filter_App.template_filter_17.return_decorator", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 660, "end_line": 693, "span_ids": ["App.template_filter", "App.template_filter_16", "App.template_filter_17"], "tokens": 252}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @t.overload\n    def template_filter(self, name: T_template_filter) -> T_template_filter: ...\n    @t.overload\n    def template_filter(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_filter], T_template_filter]: ...\n    @setupmethod\n    def template_filter(\n        self, name: T_template_filter | str | None = None\n    ) -> T_template_filter | t.Callable[[T_template_filter], T_template_filter]:\n        \"\"\"Decorate a function to register it as a custom Jinja filter. The name\n        is optional. The decorator may be used without parentheses.\n\n        .. code-block:: python\n\n            @app.template_filter(\"reverse\")\n            def reverse_filter(s):\n                return reversed(s)\n\n        The :meth:`add_template_filter` method may be used to register a\n        function later rather than decorating.\n\n        :param name: The name to register the filter as. If not given, uses the\n            function's name.\n        \"\"\"\n        if callable(name):\n            self.add_template_filter(name)\n            return name\n\n        def decorator(f: T_template_filter) -> T_template_filter:\n            self.add_template_filter(f, name=name)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_filter_App.template_test_20": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_filter_App.template_test_20", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 695, "end_line": 715, "span_ids": ["App.add_template_filter", "App.template_test", "App.template_test_20"], "tokens": 181}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @setupmethod\n    def add_template_filter(\n        self, f: ft.TemplateFilterCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a function to use as a custom Jinja filter.\n\n        The :meth:`template_filter` decorator can be used to register a function\n        by decorating instead.\n\n        :param f: The function to register.\n        :param name: The name to register the filter as. If not given, uses the\n            function's name.\n        \"\"\"\n        self.jinja_env.filters[name or f.__name__] = f\n\n    @t.overload\n    def template_test(self, name: T_template_test) -> T_template_test: ...\n    @t.overload\n    def template_test(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_test], T_template_test]: ...", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_test_21_App.template_test_21.return_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_test_21_App.template_test_21.return_decorator", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 716, "end_line": 750, "span_ids": ["App.template_test_21"], "tokens": 245}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n    @setupmethod\n    def template_test(\n        self, name: T_template_test | str | None = None\n    ) -> T_template_test | t.Callable[[T_template_test], T_template_test]:\n        \"\"\"Decorate a function to register it as a custom Jinja test. The name\n        is optional. The decorator may be used without parentheses.\n\n        .. code-block:: python\n\n            @app.template_test(\"prime\")\n            def is_prime_test(n):\n                if n == 2:\n                    return True\n                for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                    if n % i == 0:\n                        return False\n              return True\n\n        The :meth:`add_template_test` method may be used to register a function\n        later rather than decorating.\n\n        :param name: The name to register the filter as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        if callable(name):\n            self.add_template_test(name)\n            return name\n\n        def decorator(f: T_template_test) -> T_template_test:\n            self.add_template_test(f, name=name)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_test_App.template_global_24": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_test_App.template_global_24", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 752, "end_line": 774, "span_ids": ["App.add_template_test", "App.template_global", "App.template_global_24"], "tokens": 191}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @setupmethod\n    def add_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a function to use as a custom Jinja test.\n\n        The :meth:`template_test` decorator can be used to register a function\n        by decorating instead.\n\n        :param f: The function to register.\n        :param name: The name to register the test as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        self.jinja_env.tests[name or f.__name__] = f\n\n    @t.overload\n    def template_global(self, name: T_template_global) -> T_template_global: ...\n    @t.overload\n    def template_global(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_global], T_template_global]: ...", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_global_25_App.template_global_25.return_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.template_global_25_App.template_global_25.return_decorator", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 775, "end_line": 804, "span_ids": ["App.template_global_25"], "tokens": 201}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n    @setupmethod\n    def template_global(\n        self, name: T_template_global | str | None = None\n    ) -> T_template_global | t.Callable[[T_template_global], T_template_global]:\n        \"\"\"Decorate a function to register it as a custom Jinja global. The name\n        is optional. The decorator may be used without parentheses.\n\n        .. code-block:: python\n\n            @app.template_global\n            def double(n):\n                return 2 * n\n\n        The :meth:`add_template_global` method may be used to register a\n        function later rather than decorating.\n\n        :param name: The name to register the global as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        if callable(name):\n            self.add_template_global(name)\n            return name\n\n        def decorator(f: T_template_global) -> T_template_global:\n            self.add_template_global(f, name=name)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_global_App.add_template_global": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.add_template_global_App.add_template_global", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 806, "end_line": 821, "span_ids": ["App.add_template_global"], "tokens": 132}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @setupmethod\n    def add_template_global(\n        self, f: ft.TemplateGlobalCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a function to use as a custom Jinja global.\n\n        The :meth:`template_global` decorator can be used to register a function\n        by decorating instead.\n\n        :param f: The function to register.\n        :param name: The name to register the global as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        self.jinja_env.globals[name or f.__name__] = f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.teardown_appcontext_App.teardown_appcontext.return_f": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.teardown_appcontext_App.teardown_appcontext.return_f", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 823, "end_line": 852, "span_ids": ["App.teardown_appcontext"], "tokens": 235}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @setupmethod\n    def teardown_appcontext(self, f: T_teardown) -> T_teardown:\n        \"\"\"Registers a function to be called when the app context is popped. The\n        context is popped at the end of a request, CLI command, or manual ``with``\n        block.\n\n        .. code-block:: python\n\n            with app.app_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        teardown functions are called just before the app context is\n        made inactive.\n\n        When a teardown function was called because of an unhandled\n        exception it will be passed an error object. If an\n        :meth:`errorhandler` is registered, it will handle the exception\n        and the teardown will not receive it.\n\n        Teardown functions must avoid raising exceptions. If they\n        execute code that might fail they must surround that code with a\n        ``try``/``except`` block and log any errors.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        self.teardown_appcontext_funcs.append(f)\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.shell_context_processor_App._find_error_handler": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.shell_context_processor_App._find_error_handler", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 854, "end_line": 888, "span_ids": ["App._find_error_handler", "App.shell_context_processor"], "tokens": 253}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    @setupmethod\n    def shell_context_processor(\n        self, f: T_shell_context_processor\n    ) -> T_shell_context_processor:\n        \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        self.shell_context_processors.append(f)\n        return f\n\n    def _find_error_handler(\n        self, e: Exception, blueprints: list[str]\n    ) -> ft.ErrorHandlerCallable | None:\n        \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\n        exc_class, code = self._get_exc_class_and_code(type(e))\n        names = (*blueprints, None)\n\n        for c in (code, None) if code is not None else (None,):\n            for name in names:\n                handler_map = self.error_handler_spec[name][c]\n\n                if not handler_map:\n                    continue\n\n                for cls in exc_class.__mro__:\n                    handler = handler_map.get(cls)\n\n                    if handler is not None:\n                        return handler\n        return None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.trap_http_exception_App.trap_http_exception.return_False": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.trap_http_exception_App.trap_http_exception.return_False", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 890, "end_line": 923, "span_ids": ["App.trap_http_exception"], "tokens": 261}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def trap_http_exception(self, e: Exception) -> bool:\n        \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        if self.config[\"TRAP_HTTP_EXCEPTIONS\"]:\n            return True\n\n        trap_bad_request = self.config[\"TRAP_BAD_REQUEST_ERRORS\"]\n\n        # if unset, trap key errors in debug mode\n        if (\n            trap_bad_request is None\n            and self.debug\n            and isinstance(e, BadRequestKeyError)\n        ):\n            return True\n\n        if trap_bad_request:\n            return isinstance(e, BadRequest)\n\n        return False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.should_ignore_error_App.redirect": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.should_ignore_error_App.redirect", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 925, "end_line": 951, "span_ids": ["App.redirect", "App.should_ignore_error"], "tokens": 209}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def should_ignore_error(self, error: BaseException | None) -> bool:\n        \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return False\n\n    def redirect(self, location: str, code: int = 302) -> BaseResponse:\n        \"\"\"Create a redirect response object.\n\n        This is called by :func:`flask.redirect`, and can be called\n        directly as well.\n\n        :param location: The URL to redirect to.\n        :param code: The status code for the redirect.\n\n        .. versionadded:: 2.2\n            Moved from ``flask.redirect``, which calls this method.\n        \"\"\"\n        return _wz_redirect(\n            location,\n            code=code,\n            Response=self.response_class,  # type: ignore[arg-type]\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.inject_url_defaults_App.inject_url_defaults": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.inject_url_defaults_App.inject_url_defaults", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 953, "end_line": 972, "span_ids": ["App.inject_url_defaults"], "tokens": 167}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def inject_url_defaults(self, endpoint: str, values: dict[str, t.Any]) -> None:\n        \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        names: t.Iterable[str | None] = (None,)\n\n        # url_for may be called outside a request context, parse the\n        # passed endpoint instead of using request.blueprints.\n        if \".\" in endpoint:\n            names = chain(\n                names, reversed(_split_blueprint_path(endpoint.rpartition(\".\")[0]))\n            )\n\n        for name in names:\n            if name in self.url_default_functions:\n                for func in self.url_default_functions[name]:\n                    func(endpoint, values)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.handle_url_build_error_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/app.py_App.handle_url_build_error_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 974, "end_line": 1007, "span_ids": ["App.handle_url_build_error"], "tokens": 276}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class App(Scaffold):\n\n    def handle_url_build_error(\n        self, error: BuildError, endpoint: str, values: dict[str, t.Any]\n    ) -> str:\n        \"\"\"Called by :meth:`.url_for` if a\n        :exc:`~werkzeug.routing.BuildError` was raised. If this returns\n        a value, it will be returned by ``url_for``, otherwise the error\n        will be re-raised.\n\n        Each function in :attr:`url_build_error_handlers` is called with\n        ``error``, ``endpoint`` and ``values``. If a function returns\n        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,\n        its return value is returned by ``url_for``.\n\n        :param error: The active ``BuildError`` being handled.\n        :param endpoint: The endpoint being built.\n        :param values: The keyword arguments passed to ``url_for``.\n        \"\"\"\n        for handler in self.url_build_error_handlers:\n            try:\n                rv = handler(error, endpoint, values)\n            except BuildError as e:\n                # make error available outside except block\n                error = e\n            else:\n                if rv is not None:\n                    return rv\n\n        # Re-raise if called with an active exception, otherwise raise\n        # the passed in exception.\n        if error is sys.exc_info()[1]:\n            raise\n\n        raise error", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_from___future___import_an_T_url_value_preprocessor": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_from___future___import_an_T_url_value_preprocessor", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 31, "span_ids": ["imports"], "tokens": 299}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport os\nimport typing as t\nfrom collections import defaultdict\nfrom functools import update_wrapper\n\nfrom .. import typing as ft\nfrom .scaffold import _endpoint_from_view_func\nfrom .scaffold import _sentinel\nfrom .scaffold import Scaffold\nfrom .scaffold import setupmethod\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from .app import App\n\nDeferredSetupFunction = t.Callable[[\"BlueprintSetupState\"], None]\nT_after_request = t.TypeVar(\"T_after_request\", bound=ft.AfterRequestCallable[t.Any])\nT_before_request = t.TypeVar(\"T_before_request\", bound=ft.BeforeRequestCallable)\nT_error_handler = t.TypeVar(\"T_error_handler\", bound=ft.ErrorHandlerCallable)\nT_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\nT_template_context_processor = t.TypeVar(\n    \"T_template_context_processor\", bound=ft.TemplateContextProcessorCallable\n)\nT_template_filter = t.TypeVar(\"T_template_filter\", bound=ft.TemplateFilterCallable)\nT_template_global = t.TypeVar(\"T_template_global\", bound=ft.TemplateGlobalCallable)\nT_template_test = t.TypeVar(\"T_template_test\", bound=ft.TemplateTestCallable)\nT_url_defaults = t.TypeVar(\"T_url_defaults\", bound=ft.URLDefaultCallable)\nT_url_value_preprocessor = t.TypeVar(\n    \"T_url_value_preprocessor\", bound=ft.URLValuePreprocessorCallable\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_BlueprintSetupState_BlueprintSetupState.__init__.self_url_defaults_update_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_BlueprintSetupState_BlueprintSetupState.__init__.self_url_defaults_update_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 34, "end_line": 85, "span_ids": ["BlueprintSetupState", "BlueprintSetupState.__init__"], "tokens": 364}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class BlueprintSetupState:\n    \"\"\"Temporary holder object for registering a blueprint with the\n    application.  An instance of this class is created by the\n    :meth:`~flask.Blueprint.make_setup_state` method and later passed\n    to all register callback functions.\n    \"\"\"\n\n    def __init__(\n        self,\n        blueprint: Blueprint,\n        app: App,\n        options: t.Any,\n        first_registration: bool,\n    ) -> None:\n        #: a reference to the current application\n        self.app = app\n\n        #: a reference to the blueprint that created this setup state.\n        self.blueprint = blueprint\n\n        #: a dictionary with all options that were passed to the\n        #: :meth:`~flask.Flask.register_blueprint` method.\n        self.options = options\n\n        #: as blueprints can be registered multiple times with the\n        #: application and not everything wants to be registered\n        #: multiple times on it, this attribute can be used to figure\n        #: out if the blueprint was registered in the past already.\n        self.first_registration = first_registration\n\n        subdomain = self.options.get(\"subdomain\")\n        if subdomain is None:\n            subdomain = self.blueprint.subdomain\n\n        #: The subdomain that the blueprint should be active for, ``None``\n        #: otherwise.\n        self.subdomain = subdomain\n\n        url_prefix = self.options.get(\"url_prefix\")\n        if url_prefix is None:\n            url_prefix = self.blueprint.url_prefix\n        #: The prefix that should be used for all URLs defined on the\n        #: blueprint.\n        self.url_prefix = url_prefix\n\n        self.name = self.options.get(\"name\", blueprint.name)\n        self.name_prefix = self.options.get(\"name_prefix\", \"\")\n\n        #: A dictionary with URL defaults that is added to each and every\n        #: URL that was defined with the blueprint.\n        self.url_defaults = dict(self.blueprint.url_values_defaults)\n        self.url_defaults.update(self.options.get(\"url_defaults\", ()))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_BlueprintSetupState.add_url_rule_BlueprintSetupState.add_url_rule.self_app_add_url_rule_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_BlueprintSetupState.add_url_rule_BlueprintSetupState.add_url_rule.self_app_add_url_rule_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 87, "end_line": 116, "span_ids": ["BlueprintSetupState.add_url_rule"], "tokens": 217}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class BlueprintSetupState:\n\n    def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"A helper method to register a rule (and optionally a view function)\n        to the application.  The endpoint is automatically prefixed with the\n        blueprint's name.\n        \"\"\"\n        if self.url_prefix is not None:\n            if rule:\n                rule = \"/\".join((self.url_prefix.rstrip(\"/\"), rule.lstrip(\"/\")))\n            else:\n                rule = self.url_prefix\n        options.setdefault(\"subdomain\", self.subdomain)\n        if endpoint is None:\n            endpoint = _endpoint_from_view_func(view_func)  # type: ignore\n        defaults = self.url_defaults\n        if \"defaults\" in options:\n            defaults = dict(defaults, **options.pop(\"defaults\"))\n\n        self.app.add_url_rule(\n            rule,\n            f\"{self.name_prefix}.{self.name}.{endpoint}\".lstrip(\".\"),\n            view_func,\n            defaults=defaults,\n            **options,\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint_Blueprint._got_registered_once": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint_Blueprint._got_registered_once", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 119, "end_line": 172, "span_ids": ["Blueprint"], "tokens": 553}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n    \"\"\"Represents a blueprint, a collection of routes and other\n    app-related functions that can be registered on a real application\n    later.\n\n    A blueprint is an object that allows defining application functions\n    without requiring an application object ahead of time. It uses the\n    same decorators as :class:`~flask.Flask`, but defers the need for an\n    application by recording them for later registration.\n\n    Decorating a function with a blueprint creates a deferred function\n    that is called with :class:`~flask.blueprints.BlueprintSetupState`\n    when the blueprint is registered on an application.\n\n    See :doc:`/blueprints` for more information.\n\n    :param name: The name of the blueprint. Will be prepended to each\n        endpoint name.\n    :param import_name: The name of the blueprint package, usually\n        ``__name__``. This helps locate the ``root_path`` for the\n        blueprint.\n    :param static_folder: A folder with static files that should be\n        served by the blueprint's static route. The path is relative to\n        the blueprint's root path. Blueprint static files are disabled\n        by default.\n    :param static_url_path: The url to serve static files from.\n        Defaults to ``static_folder``. If the blueprint does not have\n        a ``url_prefix``, the app's static route will take precedence,\n        and the blueprint's static files won't be accessible.\n    :param template_folder: A folder with templates that should be added\n        to the app's template search path. The path is relative to the\n        blueprint's root path. Blueprint templates are disabled by\n        default. Blueprint templates have a lower precedence than those\n        in the app's templates folder.\n    :param url_prefix: A path to prepend to all of the blueprint's URLs,\n        to make them distinct from the rest of the app's routes.\n    :param subdomain: A subdomain that blueprint routes will match on by\n        default.\n    :param url_defaults: A dict of default values that blueprint routes\n        will receive by default.\n    :param root_path: By default, the blueprint will automatically set\n        this based on ``import_name``. In certain situations this\n        automatic detection can fail, so the path can be specified\n        manually instead.\n\n    .. versionchanged:: 1.1.0\n        Blueprints have a ``cli`` group to register nested CLI commands.\n        The ``cli_group`` parameter controls the name of the group under\n        the ``flask`` command.\n\n    .. versionadded:: 0.7\n    \"\"\"\n\n    _got_registered_once = False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.__init___Blueprint.__init__.self._blueprints": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.__init___Blueprint.__init__.self._blueprints", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 174, "end_line": 211, "span_ids": ["Blueprint.__init__"], "tokens": 277}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    def __init__(\n        self,\n        name: str,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        url_prefix: str | None = None,\n        subdomain: str | None = None,\n        url_defaults: dict[str, t.Any] | None = None,\n        root_path: str | None = None,\n        cli_group: str | None = _sentinel,  # type: ignore[assignment]\n    ):\n        super().__init__(\n            import_name=import_name,\n            static_folder=static_folder,\n            static_url_path=static_url_path,\n            template_folder=template_folder,\n            root_path=root_path,\n        )\n\n        if not name:\n            raise ValueError(\"'name' may not be empty.\")\n\n        if \".\" in name:\n            raise ValueError(\"'name' may not contain a dot '.' character.\")\n\n        self.name = name\n        self.url_prefix = url_prefix\n        self.subdomain = subdomain\n        self.deferred_functions: list[DeferredSetupFunction] = []\n\n        if url_defaults is None:\n            url_defaults = {}\n\n        self.url_values_defaults = url_defaults\n        self.cli_group = cli_group\n        self._blueprints: list[tuple[Blueprint, dict[str, t.Any]]] = []", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint._check_setup_finished_Blueprint._check_setup_finished": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint._check_setup_finished_Blueprint._check_setup_finished", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 213, "end_line": 221, "span_ids": ["Blueprint._check_setup_finished"], "tokens": 104}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    def _check_setup_finished(self, f_name: str) -> None:\n        if self._got_registered_once:\n            raise AssertionError(\n                f\"The setup method '{f_name}' can no longer be called on the blueprint\"\n                f\" '{self.name}'. It has already been registered at least once, any\"\n                \" changes will not be applied consistently.\\n\"\n                \"Make sure all imports, decorators, functions, etc. needed to set up\"\n                \" the blueprint are done before registering it.\"\n            )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.record_Blueprint.record_once": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.record_Blueprint.record_once", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 223, "end_line": 244, "span_ids": ["Blueprint.record", "Blueprint.record_once"], "tokens": 177}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def record(self, func: DeferredSetupFunction) -> None:\n        \"\"\"Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        \"\"\"\n        self.deferred_functions.append(func)\n\n    @setupmethod\n    def record_once(self, func: DeferredSetupFunction) -> None:\n        \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n        def wrapper(state: BlueprintSetupState) -> None:\n            if state.first_registration:\n                func(state)\n\n        self.record(update_wrapper(wrapper, func))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.make_setup_state_Blueprint.register_blueprint": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.make_setup_state_Blueprint.register_blueprint", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 246, "end_line": 271, "span_ids": ["Blueprint.make_setup_state", "Blueprint.register_blueprint"], "tokens": 254}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    def make_setup_state(\n        self, app: App, options: dict[str, t.Any], first_registration: bool = False\n    ) -> BlueprintSetupState:\n        \"\"\"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\n        object that is later passed to the register callback functions.\n        Subclasses can override this to return a subclass of the setup state.\n        \"\"\"\n        return BlueprintSetupState(self, app, options, first_registration)\n\n    @setupmethod\n    def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None:\n        \"\"\"Register a :class:`~flask.Blueprint` on this blueprint. Keyword\n        arguments passed to this method will override the defaults set\n        on the blueprint.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        if blueprint is self:\n            raise ValueError(\"Cannot register a blueprint on itself\")\n        self._blueprints.append((blueprint, options))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.register_Blueprint.register.if_self_cli_commands_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.register_Blueprint.register.if_self_cli_commands_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 273, "end_line": 347, "span_ids": ["Blueprint.register"], "tokens": 608}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    def register(self, app: App, options: dict[str, t.Any]) -> None:\n        \"\"\"Called by :meth:`Flask.register_blueprint` to register all\n        views and callbacks registered on the blueprint with the\n        application. Creates a :class:`.BlueprintSetupState` and calls\n        each :meth:`record` callback with it.\n\n        :param app: The application this blueprint is being registered\n            with.\n        :param options: Keyword arguments forwarded from\n            :meth:`~Flask.register_blueprint`.\n\n        .. versionchanged:: 2.3\n            Nested blueprints now correctly apply subdomains.\n\n        .. versionchanged:: 2.1\n            Registering the same blueprint with the same name multiple\n            times is an error.\n\n        .. versionchanged:: 2.0.1\n            Nested blueprints are registered with their dotted name.\n            This allows different blueprints with the same name to be\n            nested at different locations.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n        \"\"\"\n        name_prefix = options.get(\"name_prefix\", \"\")\n        self_name = options.get(\"name\", self.name)\n        name = f\"{name_prefix}.{self_name}\".lstrip(\".\")\n\n        if name in app.blueprints:\n            bp_desc = \"this\" if app.blueprints[name] is self else \"a different\"\n            existing_at = f\" '{name}'\" if self_name != name else \"\"\n\n            raise ValueError(\n                f\"The name '{self_name}' is already registered for\"\n                f\" {bp_desc} blueprint{existing_at}. Use 'name=' to\"\n                f\" provide a unique name.\"\n            )\n\n        first_bp_registration = not any(bp is self for bp in app.blueprints.values())\n        first_name_registration = name not in app.blueprints\n\n        app.blueprints[name] = self\n        self._got_registered_once = True\n        state = self.make_setup_state(app, options, first_bp_registration)\n\n        if self.has_static_folder:\n            state.add_url_rule(\n                f\"{self.static_url_path}/<path:filename>\",\n                view_func=self.send_static_file,  # type: ignore[attr-defined]\n                endpoint=\"static\",\n            )\n\n        # Merge blueprint data into parent.\n        if first_bp_registration or first_name_registration:\n            self._merge_blueprint_funcs(app, name)\n\n        for deferred in self.deferred_functions:\n            deferred(state)\n\n        cli_resolved_group = options.get(\"cli_group\", self.cli_group)\n\n        if self.cli.commands:\n            if cli_resolved_group is None:\n                app.cli.commands.update(self.cli.commands)\n            elif cli_resolved_group is _sentinel:\n                self.cli.name = name\n                app.cli.add_command(self.cli)\n            else:\n                self.cli.name = cli_resolved_group\n                app.cli.add_command(self.cli)\n        # ... other code", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.register.for_blueprint_bp_options_Blueprint.register.for_blueprint_bp_options.blueprint_register_app_b": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.register.for_blueprint_bp_options_Blueprint.register.for_blueprint_bp_options.blueprint_register_app_b", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 349, "end_line": 377, "span_ids": ["Blueprint.register"], "tokens": 242}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    def register(self, app: App, options: dict[str, t.Any]) -> None:\n        # ... other code\n\n        for blueprint, bp_options in self._blueprints:\n            bp_options = bp_options.copy()\n            bp_url_prefix = bp_options.get(\"url_prefix\")\n            bp_subdomain = bp_options.get(\"subdomain\")\n\n            if bp_subdomain is None:\n                bp_subdomain = blueprint.subdomain\n\n            if state.subdomain is not None and bp_subdomain is not None:\n                bp_options[\"subdomain\"] = bp_subdomain + \".\" + state.subdomain\n            elif bp_subdomain is not None:\n                bp_options[\"subdomain\"] = bp_subdomain\n            elif state.subdomain is not None:\n                bp_options[\"subdomain\"] = state.subdomain\n\n            if bp_url_prefix is None:\n                bp_url_prefix = blueprint.url_prefix\n\n            if state.url_prefix is not None and bp_url_prefix is not None:\n                bp_options[\"url_prefix\"] = (\n                    state.url_prefix.rstrip(\"/\") + \"/\" + bp_url_prefix.lstrip(\"/\")\n                )\n            elif bp_url_prefix is not None:\n                bp_options[\"url_prefix\"] = bp_url_prefix\n            elif state.url_prefix is not None:\n                bp_options[\"url_prefix\"] = state.url_prefix\n\n            bp_options[\"name_prefix\"] = name\n            blueprint.register(app, bp_options)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint._merge_blueprint_funcs_Blueprint._merge_blueprint_funcs.extend_self_template_cont": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint._merge_blueprint_funcs_Blueprint._merge_blueprint_funcs.extend_self_template_cont", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 379, "end_line": 410, "span_ids": ["Blueprint._merge_blueprint_funcs"], "tokens": 262}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    def _merge_blueprint_funcs(self, app: App, name: str) -> None:\n        def extend(\n            bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n            parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n        ) -> None:\n            for key, values in bp_dict.items():\n                key = name if key is None else f\"{name}.{key}\"\n                parent_dict[key].extend(values)\n\n        for key, value in self.error_handler_spec.items():\n            key = name if key is None else f\"{name}.{key}\"\n            value = defaultdict(\n                dict,\n                {\n                    code: {exc_class: func for exc_class, func in code_values.items()}\n                    for code, code_values in value.items()\n                },\n            )\n            app.error_handler_spec[key] = value\n\n        for endpoint, func in self.view_functions.items():\n            app.view_functions[endpoint] = func\n\n        extend(self.before_request_funcs, app.before_request_funcs)\n        extend(self.after_request_funcs, app.after_request_funcs)\n        extend(\n            self.teardown_request_funcs,\n            app.teardown_request_funcs,\n        )\n        extend(self.url_default_functions, app.url_default_functions)\n        extend(self.url_value_preprocessors, app.url_value_preprocessors)\n        extend(self.template_context_processors, app.template_context_processors)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_url_rule_Blueprint.add_url_rule.self_record_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_url_rule_Blueprint.add_url_rule.self_record_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 412, "end_line": 441, "span_ids": ["Blueprint.add_url_rule"], "tokens": 224}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\n        full documentation.\n\n        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\n        used with :func:`url_for`, is prefixed with the blueprint's name.\n        \"\"\"\n        if endpoint and \".\" in endpoint:\n            raise ValueError(\"'endpoint' may not contain a dot '.' character.\")\n\n        if view_func and hasattr(view_func, \"__name__\") and \".\" in view_func.__name__:\n            raise ValueError(\"'view_func' name may not contain a dot '.' character.\")\n\n        self.record(\n            lambda s: s.add_url_rule(\n                rule,\n                endpoint,\n                view_func,\n                provide_automatic_options=provide_automatic_options,\n                **options,\n            )\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_filter_Blueprint.app_template_filter_10": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_filter_Blueprint.app_template_filter_10", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 443, "end_line": 473, "span_ids": ["Blueprint.app_template_filter", "Blueprint.app_template_filter_10", "Blueprint.app_template_filter_9"], "tokens": 267}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @t.overload\n    def app_template_filter(self, name: T_template_filter) -> T_template_filter: ...\n    @t.overload\n    def app_template_filter(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_filter], T_template_filter]: ...\n    @setupmethod\n    def app_template_filter(\n        self, name: T_template_filter | str | None = None\n    ) -> T_template_filter | t.Callable[[T_template_filter], T_template_filter]:\n        \"\"\"Decorate a function to register it as a custom Jinja filter. The name\n        is optional. The decorator may be used without parentheses.\n\n        The :meth:`add_app_template_filter` method may be used to register a\n        function later rather than decorating.\n\n        The filter is available in all templates, not only those under this\n        blueprint. Equivalent to :meth:`.Flask.template_filter`.\n\n        :param name: The name to register the filter as. If not given, uses the\n            function's name.\n        \"\"\"\n        if callable(name):\n            self.add_app_template_filter(name)\n            return name\n\n        def decorator(f: T_template_filter) -> T_template_filter:\n            self.add_app_template_filter(f, name=name)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_filter_Blueprint.app_template_test_13": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_filter_Blueprint.app_template_test_13", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 475, "end_line": 502, "span_ids": ["Blueprint.add_app_template_filter", "Blueprint.app_template_test", "Blueprint.app_template_test_13"], "tokens": 233}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def add_app_template_filter(\n        self, f: ft.TemplateFilterCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a function to use as a custom Jinja filter.\n\n        The :meth:`app_template_filter` decorator can be used to register a\n        function by decorating instead.\n\n        The filter is available in all templates, not only those under this\n        blueprint. Equivalent to :meth:`.Flask.add_template_filter`.\n\n        :param f: The function to register.\n        :param name: The name to register the filter as. If not given, uses the\n            function's name.\n        \"\"\"\n\n        def register_template_filter(state: BlueprintSetupState) -> None:\n            state.app.add_template_filter(f, name=name)\n\n        self.record_once(register_template_filter)\n\n    @t.overload\n    def app_template_test(self, name: T_template_test) -> T_template_test: ...\n    @t.overload\n    def app_template_test(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_test], T_template_test]: ...", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_test_14_Blueprint.app_template_test_14.return_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_test_14_Blueprint.app_template_test_14.return_decorator", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 503, "end_line": 529, "span_ids": ["Blueprint.app_template_test_14"], "tokens": 209}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n    @setupmethod\n    def app_template_test(\n        self, name: T_template_test | str | None = None\n    ) -> T_template_test | t.Callable[[T_template_test], T_template_test]:\n        \"\"\"Decorate a function to register it as a custom Jinja test. The name\n        is optional. The decorator may be used without parentheses.\n\n        The :meth:`add_app_template_test` method may be used to register a\n        function later rather than decorating.\n\n        The test is available in all templates, not only those under this\n        blueprint. Equivalent to :meth:`.Flask.template_test`.\n\n        :param name: The name to register the filter as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        if callable(name):\n            self.add_app_template_test(name)\n            return name\n\n        def decorator(f: T_template_test) -> T_template_test:\n            self.add_app_template_test(f, name=name)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_test_Blueprint.app_template_global_17": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_test_Blueprint.app_template_global_17", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 531, "end_line": 560, "span_ids": ["Blueprint.add_app_template_test", "Blueprint.app_template_global", "Blueprint.app_template_global_17"], "tokens": 243}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def add_app_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a function to use as a custom Jinja test.\n\n        The :meth:`app_template_test` decorator can be used to register a\n        function by decorating instead.\n\n        The test is available in all templates, not only those under this\n        blueprint. Equivalent to :meth:`.Flask.add_template_test`.\n\n        :param f: The function to register.\n        :param name: The name to register the test as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n\n        def register_template_test(state: BlueprintSetupState) -> None:\n            state.app.add_template_test(f, name=name)\n\n        self.record_once(register_template_test)\n\n    @t.overload\n    def app_template_global(self, name: T_template_global) -> T_template_global: ...\n    @t.overload\n    def app_template_global(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_global], T_template_global]: ...", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_global_18_Blueprint.app_template_global_18.return_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_template_global_18_Blueprint.app_template_global_18.return_decorator", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 561, "end_line": 587, "span_ids": ["Blueprint.app_template_global_18"], "tokens": 209}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n    @setupmethod\n    def app_template_global(\n        self, name: T_template_global | str | None = None\n    ) -> T_template_global | t.Callable[[T_template_global], T_template_global]:\n        \"\"\"Decorate a function to register it as a custom Jinja global. The name\n        is optional. The decorator may be used without parentheses.\n\n        The :meth:`add_app_template_global` method may be used to register a\n        function later rather than decorating.\n\n        The global is available in all templates, not only those under this\n        blueprint. Equivalent to :meth:`.Flask.template_global`.\n\n        :param name: The name to register the global as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        if callable(name):\n            self.add_app_template_global(name)\n            return name\n\n        def decorator(f: T_template_global) -> T_template_global:\n            self.add_app_template_global(f, name=name)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_global_Blueprint.add_app_template_global": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.add_app_template_global_Blueprint.add_app_template_global", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 589, "end_line": 611, "span_ids": ["Blueprint.add_app_template_global"], "tokens": 181}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def add_app_template_global(\n        self, f: ft.TemplateGlobalCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a function to use as a custom Jinja global.\n\n        The :meth:`app_template_global` decorator can be used to register a function\n        by decorating instead.\n\n        The global is available in all templates, not only those under this\n        blueprint. Equivalent to :meth:`.Flask.add_template_global`.\n\n        :param f: The function to register.\n        :param name: The name to register the global as. If not given, uses the\n            function's name.\n\n        .. versionadded:: 0.10\n        \"\"\"\n\n        def register_template_global(state: BlueprintSetupState) -> None:\n            state.app.add_template_global(f, name=name)\n\n        self.record_once(register_template_global)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.before_app_request_Blueprint.app_context_processor": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.before_app_request_Blueprint.app_context_processor", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 613, "end_line": 653, "span_ids": ["Blueprint.after_app_request", "Blueprint.app_context_processor", "Blueprint.before_app_request", "Blueprint.teardown_app_request"], "tokens": 350}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def before_app_request(self, f: T_before_request) -> T_before_request:\n        \"\"\"Like :meth:`before_request`, but before every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.before_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)\n        )\n        return f\n\n    @setupmethod\n    def after_app_request(self, f: T_after_request) -> T_after_request:\n        \"\"\"Like :meth:`after_request`, but after every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.after_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)\n        )\n        return f\n\n    @setupmethod\n    def teardown_app_request(self, f: T_teardown) -> T_teardown:\n        \"\"\"Like :meth:`teardown_request`, but after every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)\n        )\n        return f\n\n    @setupmethod\n    def app_context_processor(\n        self, f: T_template_context_processor\n    ) -> T_template_context_processor:\n        \"\"\"Like :meth:`context_processor`, but for templates rendered by every view, not\n        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.template_context_processors.setdefault(None, []).append(f)\n        )\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_errorhandler_Blueprint.app_errorhandler": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_errorhandler_Blueprint.app_errorhandler", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 655, "end_line": 670, "span_ids": ["Blueprint.app_errorhandler"], "tokens": 124}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def app_errorhandler(\n        self, code: type[Exception] | int\n    ) -> t.Callable[[T_error_handler], T_error_handler]:\n        \"\"\"Like :meth:`errorhandler`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.\n        \"\"\"\n\n        def decorator(f: T_error_handler) -> T_error_handler:\n            def from_blueprint(state: BlueprintSetupState) -> None:\n                state.app.errorhandler(code)(f)\n\n            self.record_once(from_blueprint)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_url_value_preprocessor_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/blueprints.py_Blueprint.app_url_value_preprocessor_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/blueprints.py", "file_name": "blueprints.py", "file_type": "text/x-python", "category": "implementation", "start_line": 672, "end_line": 693, "span_ids": ["Blueprint.app_url_defaults", "Blueprint.app_url_value_preprocessor"], "tokens": 185}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Blueprint(Scaffold):\n\n    @setupmethod\n    def app_url_value_preprocessor(\n        self, f: T_url_value_preprocessor\n    ) -> T_url_value_preprocessor:\n        \"\"\"Like :meth:`url_value_preprocessor`, but for every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)\n        )\n        return f\n\n    @setupmethod\n    def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n        \"\"\"Like :meth:`url_defaults`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n        )\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_from___future___import_an_setupmethod": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_from___future___import_an_setupmethod", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 49, "span_ids": ["imports", "setupmethod"], "tokens": 375}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport importlib.util\nimport os\nimport pathlib\nimport sys\nimport typing as t\nfrom collections import defaultdict\nfrom functools import update_wrapper\n\nfrom jinja2 import BaseLoader\nfrom jinja2 import FileSystemLoader\nfrom werkzeug.exceptions import default_exceptions\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.utils import cached_property\n\nfrom .. import typing as ft\nfrom ..helpers import get_root_path\nfrom ..templating import _default_template_ctx_processor\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from click import Group\n\n# a singleton sentinel value for parameter defaults\n_sentinel = object()\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\nT_after_request = t.TypeVar(\"T_after_request\", bound=ft.AfterRequestCallable[t.Any])\nT_before_request = t.TypeVar(\"T_before_request\", bound=ft.BeforeRequestCallable)\nT_error_handler = t.TypeVar(\"T_error_handler\", bound=ft.ErrorHandlerCallable)\nT_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\nT_template_context_processor = t.TypeVar(\n    \"T_template_context_processor\", bound=ft.TemplateContextProcessorCallable\n)\nT_url_defaults = t.TypeVar(\"T_url_defaults\", bound=ft.URLDefaultCallable)\nT_url_value_preprocessor = t.TypeVar(\n    \"T_url_value_preprocessor\", bound=ft.URLValuePreprocessorCallable\n)\nT_route = t.TypeVar(\"T_route\", bound=ft.RouteCallable)\n\n\ndef setupmethod(f: F) -> F:\n    f_name = f.__name__\n\n    def wrapper_func(self: Scaffold, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        self._check_setup_finished(f_name)\n        return f(self, *args, **kwargs)\n\n    return t.cast(F, update_wrapper(wrapper_func, f))", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold_Scaffold._static_url_path": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold_Scaffold._static_url_path", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 52, "end_line": 73, "span_ids": ["Scaffold"], "tokens": 209}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n    \"\"\"Common behavior shared between :class:`~flask.Flask` and\n    :class:`~flask.blueprints.Blueprint`.\n\n    :param import_name: The import name of the module where this object\n        is defined. Usually :attr:`__name__` should be used.\n    :param static_folder: Path to a folder of static files to serve.\n        If this is set, a static route will be added.\n    :param static_url_path: URL prefix for the static route.\n    :param template_folder: Path to a folder containing template files.\n        for rendering. If this is set, a Jinja loader will be added.\n    :param root_path: The path that static, template, and resource files\n        are relative to. Typically not set, it is discovered based on\n        the ``import_name``.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    cli: Group\n    name: str\n    _static_folder: str | None = None\n    _static_url_path: str | None = None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.__init___Scaffold.__init__.self.url_default_functions": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.__init___Scaffold.__init__.self.url_default_functions", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 75, "end_line": 215, "span_ids": ["Scaffold.__init__"], "tokens": 1220}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    def __init__(\n        self,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        root_path: str | None = None,\n    ):\n        #: The name of the package or module that this object belongs\n        #: to. Do not change this once it is set by the constructor.\n        self.import_name = import_name\n\n        self.static_folder = static_folder\n        self.static_url_path = static_url_path\n\n        #: The path to the templates folder, relative to\n        #: :attr:`root_path`, to add to the template loader. ``None`` if\n        #: templates should not be added.\n        self.template_folder = template_folder\n\n        if root_path is None:\n            root_path = get_root_path(self.import_name)\n\n        #: Absolute path to the package on the filesystem. Used to look\n        #: up resources contained in the package.\n        self.root_path = root_path\n\n        #: A dictionary mapping endpoint names to view functions.\n        #:\n        #: To register a view function, use the :meth:`route` decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.view_functions: dict[str, ft.RouteCallable] = {}\n\n        #: A data structure of registered error handlers, in the format\n        #: ``{scope: {code: {class: handler}}}``. The ``scope`` key is\n        #: the name of a blueprint the handlers are active for, or\n        #: ``None`` for all requests. The ``code`` key is the HTTP\n        #: status code for ``HTTPException``, or ``None`` for\n        #: other exceptions. The innermost dictionary maps exception\n        #: classes to handler functions.\n        #:\n        #: To register an error handler, use the :meth:`errorhandler`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.error_handler_spec: dict[\n            ft.AppOrBlueprintKey,\n            dict[int | None, dict[type[Exception], ft.ErrorHandlerCallable]],\n        ] = defaultdict(lambda: defaultdict(dict))\n\n        #: A data structure of functions to call at the beginning of\n        #: each request, in the format ``{scope: [functions]}``. The\n        #: ``scope`` key is the name of a blueprint the functions are\n        #: active for, or ``None`` for all requests.\n        #:\n        #: To register a function, use the :meth:`before_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.before_request_funcs: dict[\n            ft.AppOrBlueprintKey, list[ft.BeforeRequestCallable]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call at the end of each\n        #: request, in the format ``{scope: [functions]}``. The\n        #: ``scope`` key is the name of a blueprint the functions are\n        #: active for, or ``None`` for all requests.\n        #:\n        #: To register a function, use the :meth:`after_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.after_request_funcs: dict[\n            ft.AppOrBlueprintKey, list[ft.AfterRequestCallable[t.Any]]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call at the end of each\n        #: request even if an exception is raised, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`teardown_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.teardown_request_funcs: dict[\n            ft.AppOrBlueprintKey, list[ft.TeardownCallable]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call to pass extra context\n        #: values when rendering templates, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`context_processor`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.template_context_processors: dict[\n            ft.AppOrBlueprintKey, list[ft.TemplateContextProcessorCallable]\n        ] = defaultdict(list, {None: [_default_template_ctx_processor]})\n\n        #: A data structure of functions to call to modify the keyword\n        #: arguments passed to the view function, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the\n        #: :meth:`url_value_preprocessor` decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.url_value_preprocessors: dict[\n            ft.AppOrBlueprintKey,\n            list[ft.URLValuePreprocessorCallable],\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call to modify the keyword\n        #: arguments when generating URLs, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`url_defaults`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.url_default_functions: dict[\n            ft.AppOrBlueprintKey, list[ft.URLDefaultCallable]\n        ] = defaultdict(list)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.__repr___Scaffold.has_static_folder": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.__repr___Scaffold.has_static_folder", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 217, "end_line": 246, "span_ids": ["Scaffold.__repr__", "Scaffold._check_setup_finished", "Scaffold.has_static_folder", "Scaffold.static_folder", "Scaffold.static_folder_3"], "tokens": 212}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {self.name!r}>\"\n\n    def _check_setup_finished(self, f_name: str) -> None:\n        raise NotImplementedError\n\n    @property\n    def static_folder(self) -> str | None:\n        \"\"\"The absolute path to the configured static folder. ``None``\n        if no static folder is set.\n        \"\"\"\n        if self._static_folder is not None:\n            return os.path.join(self.root_path, self._static_folder)\n        else:\n            return None\n\n    @static_folder.setter\n    def static_folder(self, value: str | os.PathLike[str] | None) -> None:\n        if value is not None:\n            value = os.fspath(value).rstrip(r\"\\/\")\n\n        self._static_folder = value\n\n    @property\n    def has_static_folder(self) -> bool:\n        \"\"\"``True`` if :attr:`static_folder` is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        return self.static_folder is not None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.static_url_path_Scaffold.static_url_path_6": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.static_url_path_Scaffold.static_url_path_6", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 248, "end_line": 269, "span_ids": ["Scaffold.static_url_path", "Scaffold.static_url_path_6"], "tokens": 146}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @property\n    def static_url_path(self) -> str | None:\n        \"\"\"The URL prefix that the static route will be accessible from.\n\n        If it was not configured during init, it is derived from\n        :attr:`static_folder`.\n        \"\"\"\n        if self._static_url_path is not None:\n            return self._static_url_path\n\n        if self.static_folder is not None:\n            basename = os.path.basename(self.static_folder)\n            return f\"/{basename}\".rstrip(\"/\")\n\n        return None\n\n    @static_url_path.setter\n    def static_url_path(self, value: str | None) -> None:\n        if value is not None:\n            value = value.rstrip(\"/\")\n\n        self._static_url_path = value", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.jinja_loader_Scaffold.jinja_loader": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.jinja_loader_Scaffold.jinja_loader", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 271, "end_line": 282, "span_ids": ["Scaffold.jinja_loader"], "tokens": 104}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @cached_property\n    def jinja_loader(self) -> BaseLoader | None:\n        \"\"\"The Jinja loader for this object's templates. By default this\n        is a class :class:`jinja2.loaders.FileSystemLoader` to\n        :attr:`template_folder` if it is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if self.template_folder is not None:\n            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\n        else:\n            return None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold._method_route_Scaffold.patch": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold._method_route_Scaffold.patch", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 284, "end_line": 333, "span_ids": ["Scaffold._method_route", "Scaffold.delete", "Scaffold.get", "Scaffold.patch", "Scaffold.post", "Scaffold.put"], "tokens": 439}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    def _method_route(\n        self,\n        method: str,\n        rule: str,\n        options: dict[str, t.Any],\n    ) -> t.Callable[[T_route], T_route]:\n        if \"methods\" in options:\n            raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n\n        return self.route(rule, methods=[method], **options)\n\n    @setupmethod\n    def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"GET\", rule, options)\n\n    @setupmethod\n    def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"POST\", rule, options)\n\n    @setupmethod\n    def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PUT\", rule, options)\n\n    @setupmethod\n    def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"DELETE\", rule, options)\n\n    @setupmethod\n    def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PATCH\", rule, options)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.route_Scaffold.route.return_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.route_Scaffold.route.return_decorator", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 335, "end_line": 365, "span_ids": ["Scaffold.route"], "tokens": 229}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n        ``OPTIONS`` are added automatically.\n\n        :param rule: The URL rule string.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n\n        def decorator(f: T_route) -> T_route:\n            endpoint = options.pop(\"endpoint\", None)\n            self.add_url_rule(rule, endpoint, f, **options)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.add_url_rule_Scaffold.add_url_rule.raise_NotImplementedError": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.add_url_rule_Scaffold.add_url_rule.raise_NotImplementedError", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 367, "end_line": 433, "span_ids": ["Scaffold.add_url_rule"], "tokens": 490}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Register a rule for routing incoming requests and building\n        URLs. The :meth:`route` decorator is a shortcut to call this\n        with the ``view_func`` argument. These are equivalent:\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                ...\n\n        .. code-block:: python\n\n            def index():\n                ...\n\n            app.add_url_rule(\"/\", view_func=index)\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed. An error\n        will be raised if a function has already been registered for the\n        endpoint.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is\n        always added automatically, and ``OPTIONS`` is added\n        automatically by default.\n\n        ``view_func`` does not necessarily need to be passed, but if the\n        rule should participate in routing an endpoint name must be\n        associated with a view function at some point with the\n        :meth:`endpoint` decorator.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/\", endpoint=\"index\")\n\n            @app.endpoint(\"index\")\n            def index():\n                ...\n\n        If ``view_func`` has a ``required_methods`` attribute, those\n        methods are added to the passed and automatic methods. If it\n        has a ``provide_automatic_methods`` attribute, it is used as the\n        default if the parameter is not passed.\n\n        :param rule: The URL rule string.\n        :param endpoint: The endpoint name to associate with the rule\n            and view function. Used when routing and building URLs.\n            Defaults to ``view_func.__name__``.\n        :param view_func: The view function to associate with the\n            endpoint name.\n        :param provide_automatic_options: Add the ``OPTIONS`` method and\n            respond to ``OPTIONS`` requests automatically.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n        raise NotImplementedError", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.endpoint_Scaffold.endpoint": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.endpoint_Scaffold.endpoint", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 435, "end_line": 457, "span_ids": ["Scaffold.endpoint"], "tokens": 139}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def endpoint(self, endpoint: str) -> t.Callable[[F], F]:\n        \"\"\"Decorate a view function to register it for the given\n        endpoint. Used if a rule is added without a ``view_func`` with\n        :meth:`add_url_rule`.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n            @app.endpoint(\"example\")\n            def example():\n                ...\n\n        :param endpoint: The endpoint name to associate with the view\n            function.\n        \"\"\"\n\n        def decorator(f: F) -> F:\n            self.view_functions[endpoint] = f\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.before_request_Scaffold.before_request.return_f": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.before_request_Scaffold.before_request.return_f", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 459, "end_line": 484, "span_ids": ["Scaffold.before_request"], "tokens": 227}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def before_request(self, f: T_before_request) -> T_before_request:\n        \"\"\"Register a function to run before each request.\n\n        For example, this can be used to open a database connection, or\n        to load the logged in user from the session.\n\n        .. code-block:: python\n\n            @app.before_request\n            def load_user():\n                if \"user_id\" in session:\n                    g.user = db.session.get(session[\"user_id\"])\n\n        The function will be called without any arguments. If it returns\n        a non-``None`` value, the value is handled as if it was the\n        return value from the view, and further request handling is\n        stopped.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes before every request. When used on a blueprint, this executes before\n        every request that the blueprint handles. To register with a blueprint and\n        execute before every request, use :meth:`.Blueprint.before_app_request`.\n        \"\"\"\n        self.before_request_funcs.setdefault(None, []).append(f)\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.after_request_Scaffold.after_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.after_request_Scaffold.after_request", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 486, "end_line": 505, "span_ids": ["Scaffold.after_request"], "tokens": 210}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def after_request(self, f: T_after_request) -> T_after_request:\n        \"\"\"Register a function to run after each request to this object.\n\n        The function is called with the response object, and must return\n        a response object. This allows the functions to modify or\n        replace the response before it is sent.\n\n        If a function raises an exception, any remaining\n        ``after_request`` functions will not be called. Therefore, this\n        should not be used for actions that must execute, such as to\n        close resources. Use :meth:`teardown_request` for that.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes after every request. When used on a blueprint, this executes after\n        every request that the blueprint handles. To register with a blueprint and\n        execute after every request, use :meth:`.Blueprint.after_app_request`.\n        \"\"\"\n        self.after_request_funcs.setdefault(None, []).append(f)\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.teardown_request_Scaffold.teardown_request.return_f": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.teardown_request_Scaffold.teardown_request.return_f", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 507, "end_line": 539, "span_ids": ["Scaffold.teardown_request"], "tokens": 295}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def teardown_request(self, f: T_teardown) -> T_teardown:\n        \"\"\"Register a function to be called when the request context is\n        popped. Typically, this happens at the end of each request, but\n        contexts may be pushed manually during testing.\n\n        .. code-block:: python\n\n            with app.test_request_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        teardown functions are called just before the request context is\n        made inactive.\n\n        When a teardown function was called because of an unhandled\n        exception it will be passed an error object. If an\n        :meth:`errorhandler` is registered, it will handle the exception\n        and the teardown will not receive it.\n\n        Teardown functions must avoid raising exceptions. If they\n        execute code that might fail they must surround that code with a\n        ``try``/``except`` block and log any errors.\n\n        The return values of teardown functions are ignored.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes after every request. When used on a blueprint, this executes after\n        every request that the blueprint handles. To register with a blueprint and\n        execute after every request, use :meth:`.Blueprint.teardown_app_request`.\n        \"\"\"\n        self.teardown_request_funcs.setdefault(None, []).append(f)\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.context_processor_Scaffold.context_processor": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.context_processor_Scaffold.context_processor", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 541, "end_line": 556, "span_ids": ["Scaffold.context_processor"], "tokens": 149}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def context_processor(\n        self,\n        f: T_template_context_processor,\n    ) -> T_template_context_processor:\n        \"\"\"Registers a template context processor function. These functions run before\n        rendering a template. The keys of the returned dict are added as variables\n        available in the template.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every rendered template. When used on a blueprint, this is called\n        for templates rendered from the blueprint's views. To register with a blueprint\n        and affect every template, use :meth:`.Blueprint.app_context_processor`.\n        \"\"\"\n        self.template_context_processors[None].append(f)\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.url_value_preprocessor_Scaffold.url_value_preprocessor": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.url_value_preprocessor_Scaffold.url_value_preprocessor", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 558, "end_line": 581, "span_ids": ["Scaffold.url_value_preprocessor"], "tokens": 228}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def url_value_preprocessor(\n        self,\n        f: T_url_value_preprocessor,\n    ) -> T_url_value_preprocessor:\n        \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every request. When used on a blueprint, this is called for\n        requests that the blueprint handles. To register with a blueprint and affect\n        every request, use :meth:`.Blueprint.app_url_value_preprocessor`.\n        \"\"\"\n        self.url_value_preprocessors[None].append(f)\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.url_defaults_Scaffold.url_defaults": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.url_defaults_Scaffold.url_defaults", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 583, "end_line": 595, "span_ids": ["Scaffold.url_defaults"], "tokens": 140}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n        \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every request. When used on a blueprint, this is called for\n        requests that the blueprint handles. To register with a blueprint and affect\n        every request, use :meth:`.Blueprint.app_url_defaults`.\n        \"\"\"\n        self.url_default_functions[None].append(f)\n        return f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.errorhandler_Scaffold.errorhandler.return_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.errorhandler_Scaffold.errorhandler.return_decorator", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 597, "end_line": 639, "span_ids": ["Scaffold.errorhandler"], "tokens": 341}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def errorhandler(\n        self, code_or_exception: type[Exception] | int\n    ) -> t.Callable[[T_error_handler], T_error_handler]:\n        \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        This is available on both app and blueprint objects. When used on an app, this\n        can handle errors from every request. When used on a blueprint, this can handle\n        errors from requests that the blueprint handles. To register with a blueprint\n        and affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\n\n        def decorator(f: T_error_handler) -> T_error_handler:\n            self.register_error_handler(code_or_exception, f)\n            return f\n\n        return decorator", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.register_error_handler_Scaffold.register_error_handler": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold.register_error_handler_Scaffold.register_error_handler", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 641, "end_line": 654, "span_ids": ["Scaffold.register_error_handler"], "tokens": 111}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @setupmethod\n    def register_error_handler(\n        self,\n        code_or_exception: type[Exception] | int,\n        f: ft.ErrorHandlerCallable,\n    ) -> None:\n        \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        exc_class, code = self._get_exc_class_and_code(code_or_exception)\n        self.error_handler_spec[None][code][exc_class] = f", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold._get_exc_class_and_code__endpoint_from_view_func": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_Scaffold._get_exc_class_and_code__endpoint_from_view_func", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 656, "end_line": 706, "span_ids": ["Scaffold._get_exc_class_and_code", "_endpoint_from_view_func"], "tokens": 374}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Scaffold:\n\n    @staticmethod\n    def _get_exc_class_and_code(\n        exc_class_or_code: type[Exception] | int,\n    ) -> tuple[type[Exception], int | None]:\n        \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\n        exc_class: type[Exception]\n\n        if isinstance(exc_class_or_code, int):\n            try:\n                exc_class = default_exceptions[exc_class_or_code]\n            except KeyError:\n                raise ValueError(\n                    f\"'{exc_class_or_code}' is not a recognized HTTP\"\n                    \" error code. Use a subclass of HTTPException with\"\n                    \" that code instead.\"\n                ) from None\n        else:\n            exc_class = exc_class_or_code\n\n        if isinstance(exc_class, Exception):\n            raise TypeError(\n                f\"{exc_class!r} is an instance, not a class. Handlers\"\n                \" can only be registered for Exception classes or HTTP\"\n                \" error codes.\"\n            )\n\n        if not issubclass(exc_class, Exception):\n            raise ValueError(\n                f\"'{exc_class.__name__}' is not a subclass of Exception.\"\n                \" Handlers can only be registered for Exception classes\"\n                \" or HTTP error codes.\"\n            )\n\n        if issubclass(exc_class, HTTPException):\n            return exc_class, exc_class.code\n        else:\n            return exc_class, None\n\n\ndef _endpoint_from_view_func(view_func: ft.RouteCallable) -> str:\n    \"\"\"Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    \"\"\"\n    assert view_func is not None, \"expected view func if endpoint is not provided.\"\n    return view_func.__name__", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py__find_package_path__find_package_path.if_root_spec_submodule_se.else_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py__find_package_path__find_package_path.if_root_spec_submodule_se.else_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 709, "end_line": 751, "span_ids": ["_find_package_path"], "tokens": 335}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _find_package_path(import_name: str) -> str:\n    \"\"\"Find the path that contains the package or module.\"\"\"\n    root_mod_name, _, _ = import_name.partition(\".\")\n\n    try:\n        root_spec = importlib.util.find_spec(root_mod_name)\n\n        if root_spec is None:\n            raise ValueError(\"not found\")\n    except (ImportError, ValueError):\n        # ImportError: the machinery told us it does not exist\n        # ValueError:\n        #    - the module name was invalid\n        #    - the module name is __main__\n        #    - we raised `ValueError` due to `root_spec` being `None`\n        return os.getcwd()\n\n    if root_spec.submodule_search_locations:\n        if root_spec.origin is None or root_spec.origin == \"namespace\":\n            # namespace package\n            package_spec = importlib.util.find_spec(import_name)\n\n            if package_spec is not None and package_spec.submodule_search_locations:\n                # Pick the path in the namespace that contains the submodule.\n                package_path = pathlib.Path(\n                    os.path.commonpath(package_spec.submodule_search_locations)\n                )\n                search_location = next(\n                    location\n                    for location in root_spec.submodule_search_locations\n                    if package_path.is_relative_to(location)\n                )\n            else:\n                # Pick the first path.\n                search_location = root_spec.submodule_search_locations[0]\n\n            return os.path.dirname(search_location)\n        else:\n            # package with __init__.py\n            return os.path.dirname(os.path.dirname(root_spec.origin))\n    else:\n        # module\n        return os.path.dirname(root_spec.origin)  # type: ignore[type-var, return-value]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_find_package_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sansio/scaffold.py_find_package_", "embedding": null, "metadata": {"file_path": "src/flask/sansio/scaffold.py", "file_name": "scaffold.py", "file_type": "text/x-python", "category": "implementation", "start_line": 754, "end_line": 793, "span_ids": ["find_package"], "tokens": 308}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def find_package(import_name: str) -> tuple[str | None, str]:\n    \"\"\"Find the prefix that a package is installed under, and the path\n    that it would be imported from.\n\n    The prefix is the directory containing the standard directory\n    hierarchy (lib, bin, etc.). If the package is not installed to the\n    system (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n    ``None`` is returned.\n\n    The path is the entry in :attr:`sys.path` that contains the package\n    for import. If the package is not installed, it's assumed that the\n    package was imported from the current working directory.\n    \"\"\"\n    package_path = _find_package_path(import_name)\n    py_prefix = os.path.abspath(sys.prefix)\n\n    # installed to the system\n    if pathlib.PurePath(package_path).is_relative_to(py_prefix):\n        return py_prefix, package_path\n\n    site_parent, site_folder = os.path.split(package_path)\n\n    # installed to a virtualenv\n    if site_folder.lower() == \"site-packages\":\n        parent, folder = os.path.split(site_parent)\n\n        # Windows (prefix/lib/site-packages)\n        if folder.lower() == \"lib\":\n            return parent, package_path\n\n        # Unix (prefix/lib/pythonX.Y/site-packages)\n        if os.path.basename(parent).lower() == \"lib\":\n            return os.path.dirname(parent), package_path\n\n        # something else (prefix/site-packages)\n        return site_parent, package_path\n\n    # not installed\n    return None, package_path", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_from___future___import_an_if_t_TYPE_CHECKING_pr": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_from___future___import_an_if_t_TYPE_CHECKING_pr", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 21, "span_ids": ["imports"], "tokens": 109}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport collections.abc as c\nimport hashlib\nimport typing as t\nfrom collections.abc import MutableMapping\nfrom datetime import datetime\nfrom datetime import timezone\n\nfrom itsdangerous import BadSignature\nfrom itsdangerous import URLSafeTimedSerializer\nfrom werkzeug.datastructures import CallbackDict\n\nfrom .json.tag import TaggedJSONSerializer\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    import typing_extensions as te\n\n    from .app import Flask\n    from .wrappers import Request\n    from .wrappers import Response", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionMixin_SessionMixin.accessed": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionMixin_SessionMixin.accessed", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 24, "end_line": 49, "span_ids": ["SessionMixin", "SessionMixin.permanent", "SessionMixin.permanent_1", "SessionMixin:3"], "tokens": 185}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionMixin(MutableMapping[str, t.Any]):\n    \"\"\"Expands a basic dictionary with session attributes.\"\"\"\n\n    @property\n    def permanent(self) -> bool:\n        \"\"\"This reflects the ``'_permanent'`` key in the dict.\"\"\"\n        return self.get(\"_permanent\", False)\n\n    @permanent.setter\n    def permanent(self, value: bool) -> None:\n        self[\"_permanent\"] = bool(value)\n\n    #: Some implementations can detect whether a session is newly\n    #: created, but that is not guaranteed. Use with caution. The mixin\n    # default is hard-coded ``False``.\n    new = False\n\n    #: Some implementations can detect changes to the session and set\n    #: this when that happens. The mixin default is hard coded to\n    #: ``True``.\n    modified = True\n\n    #: Some implementations can detect when session data is read or\n    #: written and set this when that happens. The mixin default is hard\n    #: coded to ``True``.\n    accessed = True", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSession_SecureCookieSession.setdefault": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSession_SecureCookieSession.setdefault", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 52, "end_line": 94, "span_ids": ["SecureCookieSession", "SecureCookieSession.__getitem__", "SecureCookieSession.__init__", "SecureCookieSession.get", "SecureCookieSession.setdefault"], "tokens": 388}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SecureCookieSession(CallbackDict[str, t.Any], SessionMixin):\n    \"\"\"Base class for sessions based on signed cookies.\n\n    This session backend will set the :attr:`modified` and\n    :attr:`accessed` attributes. It cannot reliably track whether a\n    session is new (vs. empty), so :attr:`new` remains hard coded to\n    ``False``.\n    \"\"\"\n\n    #: When data is changed, this is set to ``True``. Only the session\n    #: dictionary itself is tracked; if the session contains mutable\n    #: data (for example a nested dict) then this must be set to\n    #: ``True`` manually when modifying that data. The session cookie\n    #: will only be written to the response if this is ``True``.\n    modified = False\n\n    #: When data is read or written, this is set to ``True``. Used by\n    # :class:`.SecureCookieSessionInterface` to add a ``Vary: Cookie``\n    #: header, which allows caching proxies to cache different pages for\n    #: different users.\n    accessed = False\n\n    def __init__(\n        self,\n        initial: c.Mapping[str, t.Any] | c.Iterable[tuple[str, t.Any]] | None = None,\n    ) -> None:\n        def on_update(self: te.Self) -> None:\n            self.modified = True\n            self.accessed = True\n\n        super().__init__(initial, on_update)\n\n    def __getitem__(self, key: str) -> t.Any:\n        self.accessed = True\n        return super().__getitem__(key)\n\n    def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)\n\n    def setdefault(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().setdefault(key, default)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_NullSession_NullSession.del__fail": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_NullSession_NullSession.del__fail", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 97, "end_line": 111, "span_ids": ["NullSession", "NullSession._fail", "NullSession:3"], "tokens": 137}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class NullSession(SecureCookieSession):\n    \"\"\"Class used to generate nicer error messages if sessions are not\n    available.  Will still allow read-only access to the empty session\n    but fail on setting.\n    \"\"\"\n\n    def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:\n        raise RuntimeError(\n            \"The session is unavailable because no secret \"\n            \"key was set.  Set the secret_key on the \"\n            \"application to something unique and secret.\"\n        )\n\n    __setitem__ = __delitem__ = clear = pop = popitem = update = setdefault = _fail  # noqa: B950\n    del _fail", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface_SessionInterface.pickle_based": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface_SessionInterface.pickle_based", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 114, "end_line": 162, "span_ids": ["SessionInterface"], "tokens": 449}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionInterface:\n    \"\"\"The basic interface you have to implement in order to replace the\n    default session interface which uses werkzeug's securecookie\n    implementation.  The only methods you have to implement are\n    :meth:`open_session` and :meth:`save_session`, the others have\n    useful defaults which you don't need to change.\n\n    The session object returned by the :meth:`open_session` method has to\n    provide a dictionary like interface plus the properties and methods\n    from the :class:`SessionMixin`.  We recommend just subclassing a dict\n    and adding that mixin::\n\n        class Session(dict, SessionMixin):\n            pass\n\n    If :meth:`open_session` returns ``None`` Flask will call into\n    :meth:`make_null_session` to create a session that acts as replacement\n    if the session support cannot work because some requirement is not\n    fulfilled.  The default :class:`NullSession` class that is created\n    will complain that the secret key was not set.\n\n    To replace the session interface on an application all you have to do\n    is to assign :attr:`flask.Flask.session_interface`::\n\n        app = Flask(__name__)\n        app.session_interface = MySessionInterface()\n\n    Multiple requests with the same session may be sent and handled\n    concurrently. When implementing a new session interface, consider\n    whether reads or writes to the backing store must be synchronized.\n    There is no guarantee on the order in which the session for each\n    request is opened or saved, it will occur in the order that requests\n    begin and end processing.\n\n    .. versionadded:: 0.8\n    \"\"\"\n\n    #: :meth:`make_null_session` will look here for the class that should\n    #: be created when a null session is requested.  Likewise the\n    #: :meth:`is_null_session` method will perform a typecheck against\n    #: this type.\n    null_session_class = NullSession\n\n    #: A flag that indicates if the session interface is pickle based.\n    #: This can be used by Flask extensions to make a decision in regards\n    #: to how to deal with the session object.\n    #:\n    #: .. versionadded:: 0.10\n    pickle_based = False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.make_null_session_SessionInterface.make_null_session": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.make_null_session_SessionInterface.make_null_session", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 164, "end_line": 174, "span_ids": ["SessionInterface.make_null_session"], "tokens": 110}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionInterface:\n\n    def make_null_session(self, app: Flask) -> NullSession:\n        \"\"\"Creates a null session which acts as a replacement object if the\n        real session support could not be loaded due to a configuration\n        error.  This mainly aids the user experience because the job of the\n        null session is to still support lookup without complaining but\n        modifications are answered with a helpful error message of what\n        failed.\n\n        This creates an instance of :attr:`null_session_class` by default.\n        \"\"\"\n        return self.null_session_class()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.is_null_session_SessionInterface.get_cookie_name": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.is_null_session_SessionInterface.get_cookie_name", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 176, "end_line": 187, "span_ids": ["SessionInterface.get_cookie_name", "SessionInterface.is_null_session"], "tokens": 122}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionInterface:\n\n    def is_null_session(self, obj: object) -> bool:\n        \"\"\"Checks if a given object is a null session.  Null sessions are\n        not asked to be saved.\n\n        This checks if the object is an instance of :attr:`null_session_class`\n        by default.\n        \"\"\"\n        return isinstance(obj, self.null_session_class)\n\n    def get_cookie_name(self, app: Flask) -> str:\n        \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"\n        return app.config[\"SESSION_COOKIE_NAME\"]  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.get_cookie_domain_SessionInterface.get_cookie_domain": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.get_cookie_domain_SessionInterface.get_cookie_domain", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 189, "end_line": 199, "span_ids": ["SessionInterface.get_cookie_domain"], "tokens": 127}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionInterface:\n\n    def get_cookie_domain(self, app: Flask) -> str | None:\n        \"\"\"The value of the ``Domain`` parameter on the session cookie. If not set,\n        browsers will only send the cookie to the exact domain it was set from.\n        Otherwise, they will send it to any subdomain of the given value as well.\n\n        Uses the :data:`SESSION_COOKIE_DOMAIN` config.\n\n        .. versionchanged:: 2.3\n            Not set by default, does not fall back to ``SERVER_NAME``.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_DOMAIN\"]  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.get_cookie_path_SessionInterface.get_expiration_time": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.get_cookie_path_SessionInterface.get_expiration_time", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 201, "end_line": 245, "span_ids": ["SessionInterface.get_cookie_httponly", "SessionInterface.get_cookie_partitioned", "SessionInterface.get_cookie_path", "SessionInterface.get_cookie_samesite", "SessionInterface.get_cookie_secure", "SessionInterface.get_expiration_time"], "tokens": 499}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionInterface:\n\n    def get_cookie_path(self, app: Flask) -> str:\n        \"\"\"Returns the path for which the cookie should be valid.  The\n        default implementation uses the value from the ``SESSION_COOKIE_PATH``\n        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n        uses ``/`` if it's ``None``.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_PATH\"] or app.config[\"APPLICATION_ROOT\"]  # type: ignore[no-any-return]\n\n    def get_cookie_httponly(self, app: Flask) -> bool:\n        \"\"\"Returns True if the session cookie should be httponly.  This\n        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\n        config var.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_HTTPONLY\"]  # type: ignore[no-any-return]\n\n    def get_cookie_secure(self, app: Flask) -> bool:\n        \"\"\"Returns True if the cookie should be secure.  This currently\n        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_SECURE\"]  # type: ignore[no-any-return]\n\n    def get_cookie_samesite(self, app: Flask) -> str | None:\n        \"\"\"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n        ``SameSite`` attribute. This currently just returns the value of\n        the :data:`SESSION_COOKIE_SAMESITE` setting.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_SAMESITE\"]  # type: ignore[no-any-return]\n\n    def get_cookie_partitioned(self, app: Flask) -> bool:\n        \"\"\"Returns True if the cookie should be partitioned. By default, uses\n        the value of :data:`SESSION_COOKIE_PARTITIONED`.\n\n        .. versionadded:: 3.1\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_PARTITIONED\"]  # type: ignore[no-any-return]\n\n    def get_expiration_time(self, app: Flask, session: SessionMixin) -> datetime | None:\n        \"\"\"A helper method that returns an expiration date for the session\n        or ``None`` if the session is linked to the browser session.  The\n        default implementation returns now + the permanent session\n        lifetime configured on the application.\n        \"\"\"\n        if session.permanent:\n            return datetime.now(timezone.utc) + app.permanent_session_lifetime\n        return None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.should_set_cookie_SessionInterface.should_set_cookie": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.should_set_cookie_SessionInterface.should_set_cookie", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 247, "end_line": 261, "span_ids": ["SessionInterface.should_set_cookie"], "tokens": 137}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionInterface:\n\n    def should_set_cookie(self, app: Flask, session: SessionMixin) -> bool:\n        \"\"\"Used by session backends to determine if a ``Set-Cookie`` header\n        should be set for this session cookie for this response. If the session\n        has been modified, the cookie is set. If the session is permanent and\n        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\n        always set.\n\n        This check is usually skipped if the session was deleted.\n\n        .. versionadded:: 0.11\n        \"\"\"\n\n        return session.modified or (\n            session.permanent and app.config[\"SESSION_REFRESH_EACH_REQUEST\"]\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.open_session_SessionInterface.save_session": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SessionInterface.open_session_SessionInterface.save_session", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 263, "end_line": 284, "span_ids": ["SessionInterface.open_session", "SessionInterface.save_session"], "tokens": 196}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SessionInterface:\n\n    def open_session(self, app: Flask, request: Request) -> SessionMixin | None:\n        \"\"\"This is called at the beginning of each request, after\n        pushing the request context, before matching the URL.\n\n        This must return an object which implements a dictionary-like\n        interface as well as the :class:`SessionMixin` interface.\n\n        This will return ``None`` to indicate that loading failed in\n        some way that is not immediately an error. The request\n        context will fall back to using :meth:`make_null_session`\n        in this case.\n        \"\"\"\n        raise NotImplementedError()\n\n    def save_session(\n        self, app: Flask, session: SessionMixin, response: Response\n    ) -> None:\n        \"\"\"This is called at the end of each request, after generating\n        a response, before removing the request context. It is skipped\n        if :meth:`is_null_session` returns ``True``.\n        \"\"\"\n        raise NotImplementedError()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_session_json_serializer_SecureCookieSessionInterface.session_class": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_session_json_serializer_SecureCookieSessionInterface.session_class", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 287, "end_line": 315, "span_ids": ["SecureCookieSessionInterface", "_lazy_sha1", "impl:2"], "tokens": 241}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "session_json_serializer = TaggedJSONSerializer()\n\n\ndef _lazy_sha1(string: bytes = b\"\") -> t.Any:\n    \"\"\"Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\n    SHA-1, in which case the import and use as a default would fail before the\n    developer can configure something else.\n    \"\"\"\n    return hashlib.sha1(string)\n\n\nclass SecureCookieSessionInterface(SessionInterface):\n    \"\"\"The default session interface that stores sessions in signed cookies\n    through the :mod:`itsdangerous` module.\n    \"\"\"\n\n    #: the salt that should be applied on top of the secret key for the\n    #: signing of cookie based sessions.\n    salt = \"cookie-session\"\n    #: the hash function to use for the signature.  The default is sha1\n    digest_method = staticmethod(_lazy_sha1)\n    #: the name of the itsdangerous supported key derivation.  The default\n    #: is hmac.\n    key_derivation = \"hmac\"\n    #: A python serializer for the payload.  The default is a compact\n    #: JSON derived serializer with support for some extra Python types\n    #: such as datetime objects or tuples.\n    serializer = session_json_serializer\n    session_class = SecureCookieSession", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.get_signing_serializer_SecureCookieSessionInterface.get_signing_serializer": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.get_signing_serializer_SecureCookieSessionInterface.get_signing_serializer", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 317, "end_line": 335, "span_ids": ["SecureCookieSessionInterface.get_signing_serializer"], "tokens": 138}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SecureCookieSessionInterface(SessionInterface):\n\n    def get_signing_serializer(self, app: Flask) -> URLSafeTimedSerializer | None:\n        if not app.secret_key:\n            return None\n\n        keys: list[str | bytes] = []\n\n        if fallbacks := app.config[\"SECRET_KEY_FALLBACKS\"]:\n            keys.extend(fallbacks)\n\n        keys.append(app.secret_key)  # itsdangerous expects current key at top\n        return URLSafeTimedSerializer(\n            keys,  # type: ignore[arg-type]\n            salt=self.salt,\n            serializer=self.serializer,\n            signer_kwargs={\n                \"key_derivation\": self.key_derivation,\n                \"digest_method\": self.digest_method,\n            },\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.open_session_SecureCookieSessionInterface.open_session": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.open_session_SecureCookieSessionInterface.open_session", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 337, "end_line": 349, "span_ids": ["SecureCookieSessionInterface.open_session"], "tokens": 110}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SecureCookieSessionInterface(SessionInterface):\n\n    def open_session(self, app: Flask, request: Request) -> SecureCookieSession | None:\n        s = self.get_signing_serializer(app)\n        if s is None:\n            return None\n        val = request.cookies.get(self.get_cookie_name(app))\n        if not val:\n            return self.session_class()\n        max_age = int(app.permanent_session_lifetime.total_seconds())\n        try:\n            data = s.loads(val, max_age=max_age)\n            return self.session_class(data)\n        except BadSignature:\n            return self.session_class()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.save_session_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/sessions.py_SecureCookieSessionInterface.save_session_", "embedding": null, "metadata": {"file_path": "src/flask/sessions.py", "file_name": "sessions.py", "file_type": "text/x-python", "category": "implementation", "start_line": 351, "end_line": 400, "span_ids": ["SecureCookieSessionInterface.save_session"], "tokens": 325}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class SecureCookieSessionInterface(SessionInterface):\n\n    def save_session(\n        self, app: Flask, session: SessionMixin, response: Response\n    ) -> None:\n        name = self.get_cookie_name(app)\n        domain = self.get_cookie_domain(app)\n        path = self.get_cookie_path(app)\n        secure = self.get_cookie_secure(app)\n        partitioned = self.get_cookie_partitioned(app)\n        samesite = self.get_cookie_samesite(app)\n        httponly = self.get_cookie_httponly(app)\n\n        # Add a \"Vary: Cookie\" header if the session was accessed at all.\n        if session.accessed:\n            response.vary.add(\"Cookie\")\n\n        # If the session is modified to be empty, remove the cookie.\n        # If the session is empty, return without setting the cookie.\n        if not session:\n            if session.modified:\n                response.delete_cookie(\n                    name,\n                    domain=domain,\n                    path=path,\n                    secure=secure,\n                    partitioned=partitioned,\n                    samesite=samesite,\n                    httponly=httponly,\n                )\n                response.vary.add(\"Cookie\")\n\n            return\n\n        if not self.should_set_cookie(app, session):\n            return\n\n        expires = self.get_expiration_time(app, session)\n        val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore[union-attr]\n        response.set_cookie(\n            name,\n            val,\n            expires=expires,\n            httponly=httponly,\n            domain=domain,\n            path=path,\n            secure=secure,\n            partitioned=partitioned,\n            samesite=samesite,\n        )\n        response.vary.add(\"Cookie\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/signals.py_from___future___import_an_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/signals.py_from___future___import_an_", "embedding": null, "metadata": {"file_path": "src/flask/signals.py", "file_name": "signals.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 18, "span_ids": ["imports"], "tokens": 156}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nfrom blinker import Namespace\n\n# This namespace is only for signals provided by Flask itself.\n_signals = Namespace()\n\ntemplate_rendered = _signals.signal(\"template-rendered\")\nbefore_render_template = _signals.signal(\"before-render-template\")\nrequest_started = _signals.signal(\"request-started\")\nrequest_finished = _signals.signal(\"request-finished\")\nrequest_tearing_down = _signals.signal(\"request-tearing-down\")\ngot_request_exception = _signals.signal(\"got-request-exception\")\nappcontext_tearing_down = _signals.signal(\"appcontext-tearing-down\")\nappcontext_pushed = _signals.signal(\"appcontext-pushed\")\nappcontext_popped = _signals.signal(\"appcontext-popped\")\nmessage_flashed = _signals.signal(\"message-flashed\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_from___future___import_an__default_template_ctx_processor": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_from___future___import_an__default_template_ctx_processor", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 36, "span_ids": ["_default_template_ctx_processor", "imports"], "tokens": 211}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport typing as t\n\nfrom jinja2 import BaseLoader\nfrom jinja2 import Environment as BaseEnvironment\nfrom jinja2 import Template\nfrom jinja2 import TemplateNotFound\n\nfrom .globals import _cv_app\nfrom .globals import current_app\nfrom .helpers import stream_with_context\nfrom .signals import before_render_template\nfrom .signals import template_rendered\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from .app import Flask\n    from .sansio.app import App\n    from .sansio.scaffold import Scaffold\n\n\ndef _default_template_ctx_processor() -> dict[str, t.Any]:\n    \"\"\"Default template context processor.  Injects `request`,\n    `session` and `g`.\n    \"\"\"\n    ctx = _cv_app.get(None)\n    rv: dict[str, t.Any] = {}\n\n    if ctx is not None:\n        rv[\"g\"] = ctx.g\n\n        if ctx.has_request:\n            rv[\"request\"] = ctx.request\n            rv[\"session\"] = ctx.session\n\n    return rv", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_Environment_Environment.__init__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_Environment_Environment.__init__", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 39, "end_line": 49, "span_ids": ["Environment", "Environment.__init__"], "tokens": 103}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Environment(BaseEnvironment):\n    \"\"\"Works like a regular Jinja environment but has some additional\n    knowledge of how Flask's blueprint works so that it can prepend the\n    name of the blueprint to referenced templates if necessary.\n    \"\"\"\n\n    def __init__(self, app: App, **options: t.Any) -> None:\n        if \"loader\" not in options:\n            options[\"loader\"] = app.create_global_jinja_loader()\n        BaseEnvironment.__init__(self, **options)\n        self.app = app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader_DispatchingJinjaLoader.get_source": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader_DispatchingJinjaLoader.get_source", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 52, "end_line": 65, "span_ids": ["DispatchingJinjaLoader", "DispatchingJinjaLoader.__init__", "DispatchingJinjaLoader.get_source"], "tokens": 118}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class DispatchingJinjaLoader(BaseLoader):\n    \"\"\"A loader that looks for templates in the application and all\n    the blueprint folders.\n    \"\"\"\n\n    def __init__(self, app: App) -> None:\n        self.app = app\n\n    def get_source(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:\n            return self._get_source_explained(environment, template)\n        return self._get_source_fast(environment, template)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader._get_source_explained_DispatchingJinjaLoader._get_source_explained": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader._get_source_explained_DispatchingJinjaLoader._get_source_explained", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 67, "end_line": 89, "span_ids": ["DispatchingJinjaLoader._get_source_explained"], "tokens": 197}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class DispatchingJinjaLoader(BaseLoader):\n\n    def _get_source_explained(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        attempts = []\n        rv: tuple[str, str | None, t.Callable[[], bool] | None] | None\n        trv: None | (tuple[str, str | None, t.Callable[[], bool] | None]) = None\n\n        for srcobj, loader in self._iter_loaders(template):\n            try:\n                rv = loader.get_source(environment, template)\n                if trv is None:\n                    trv = rv\n            except TemplateNotFound:\n                rv = None\n            attempts.append((loader, srcobj, rv))\n\n        from .debughelpers import explain_template_loading_attempts\n\n        explain_template_loading_attempts(self.app, template, attempts)\n\n        if trv is not None:\n            return trv\n        raise TemplateNotFound(template)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader._get_source_fast_DispatchingJinjaLoader.list_templates": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_DispatchingJinjaLoader._get_source_fast_DispatchingJinjaLoader.list_templates", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 91, "end_line": 123, "span_ids": ["DispatchingJinjaLoader._get_source_fast", "DispatchingJinjaLoader._iter_loaders", "DispatchingJinjaLoader.list_templates"], "tokens": 234}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class DispatchingJinjaLoader(BaseLoader):\n\n    def _get_source_fast(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        for _srcobj, loader in self._iter_loaders(template):\n            try:\n                return loader.get_source(environment, template)\n            except TemplateNotFound:\n                continue\n        raise TemplateNotFound(template)\n\n    def _iter_loaders(self, template: str) -> t.Iterator[tuple[Scaffold, BaseLoader]]:\n        loader = self.app.jinja_loader\n        if loader is not None:\n            yield self.app, loader\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                yield blueprint, loader\n\n    def list_templates(self) -> list[str]:\n        result = set()\n        loader = self.app.jinja_loader\n        if loader is not None:\n            result.update(loader.list_templates())\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                for template in loader.list_templates():\n                    result.add(template)\n\n        return list(result)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py__render_render_template": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py__render_render_template", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 126, "end_line": 150, "span_ids": ["_render", "render_template"], "tokens": 218}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def _render(app: Flask, template: Template, context: dict[str, t.Any]) -> str:\n    app.update_template_context(context)\n    before_render_template.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n    rv = template.render(context)\n    template_rendered.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n    return rv\n\n\ndef render_template(\n    template_name_or_list: str | Template | list[str | Template],\n    **context: t.Any,\n) -> str:\n    \"\"\"Render a template by name with the given context.\n\n    :param template_name_or_list: The name of the template to render. If\n        a list is given, the first name to exist will be rendered.\n    :param context: The variables to make available in the template.\n    \"\"\"\n    app = current_app._get_current_object()\n    template = app.jinja_env.get_or_select_template(template_name_or_list)\n    return _render(app, template, context)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_render_template_string__stream": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_render_template_string__stream", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 153, "end_line": 179, "span_ids": ["_stream", "render_template_string"], "tokens": 205}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def render_template_string(source: str, **context: t.Any) -> str:\n    \"\"\"Render a template from the given source string with the given\n    context.\n\n    :param source: The source code of the template to render.\n    :param context: The variables to make available in the template.\n    \"\"\"\n    app = current_app._get_current_object()\n    template = app.jinja_env.from_string(source)\n    return _render(app, template, context)\n\n\ndef _stream(\n    app: Flask, template: Template, context: dict[str, t.Any]\n) -> t.Iterator[str]:\n    app.update_template_context(context)\n    before_render_template.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n\n    def generate() -> t.Iterator[str]:\n        yield from template.generate(context)\n        template_rendered.send(\n            app, _async_wrapper=app.ensure_sync, template=template, context=context\n        )\n\n    return stream_with_context(generate())", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_stream_template_stream_template": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_stream_template_stream_template", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 182, "end_line": 198, "span_ids": ["stream_template"], "tokens": 164}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def stream_template(\n    template_name_or_list: str | Template | list[str | Template],\n    **context: t.Any,\n) -> t.Iterator[str]:\n    \"\"\"Render a template by name with the given context as a stream.\n    This returns an iterator of strings, which can be used as a\n    streaming response from a view.\n\n    :param template_name_or_list: The name of the template to render. If\n        a list is given, the first name to exist will be rendered.\n    :param context: The variables to make available in the template.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    app = current_app._get_current_object()\n    template = app.jinja_env.get_or_select_template(template_name_or_list)\n    return _stream(app, template, context)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_stream_template_string_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/templating.py_stream_template_string_", "embedding": null, "metadata": {"file_path": "src/flask/templating.py", "file_name": "templating.py", "file_type": "text/x-python", "category": "implementation", "start_line": 201, "end_line": 214, "span_ids": ["stream_template_string"], "tokens": 131}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def stream_template_string(source: str, **context: t.Any) -> t.Iterator[str]:\n    \"\"\"Render a template from the given source string with the given\n    context as a stream. This returns an iterator of strings, which can\n    be used as a streaming response from a view.\n\n    :param source: The source code of the template to render.\n    :param context: The variables to make available in the template.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    app = current_app._get_current_object()\n    template = app.jinja_env.from_string(source)\n    return _stream(app, template, context)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_from___future___import_an_if_t_TYPE_CHECKING_pr": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_from___future___import_an_if_t_TYPE_CHECKING_pr", "embedding": null, "metadata": {"file_path": "src/flask/testing.py", "file_name": "testing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 24, "span_ids": ["imports"], "tokens": 126}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport importlib.metadata\nimport typing as t\nfrom contextlib import contextmanager\nfrom contextlib import ExitStack\nfrom copy import copy\nfrom types import TracebackType\nfrom urllib.parse import urlsplit\n\nimport werkzeug.test\nfrom click.testing import CliRunner\nfrom click.testing import Result\nfrom werkzeug.test import Client\nfrom werkzeug.wrappers import Request as BaseRequest\n\nfrom .cli import ScriptInfo\nfrom .sessions import SessionMixin\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from _typeshed.wsgi import WSGIEnvironment\n    from werkzeug.test import TestResponse\n\n    from .app import Flask", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_EnvironBuilder_EnvironBuilder.json_dumps": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_EnvironBuilder_EnvironBuilder.json_dumps", "embedding": null, "metadata": {"file_path": "src/flask/testing.py", "file_name": "testing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 27, "end_line": 94, "span_ids": ["EnvironBuilder", "EnvironBuilder.__init__", "EnvironBuilder.json_dumps"], "tokens": 580}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class EnvironBuilder(werkzeug.test.EnvironBuilder):\n    \"\"\"An :class:`~werkzeug.test.EnvironBuilder`, that takes defaults from the\n    application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Flask,\n        path: str = \"/\",\n        base_url: str | None = None,\n        subdomain: str | None = None,\n        url_scheme: str | None = None,\n        *args: t.Any,\n        **kwargs: t.Any,\n    ) -> None:\n        assert not (base_url or subdomain or url_scheme) or (\n            base_url is not None\n        ) != bool(subdomain or url_scheme), (\n            'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'\n        )\n\n        if base_url is None:\n            http_host = app.config.get(\"SERVER_NAME\") or \"localhost\"\n            app_root = app.config[\"APPLICATION_ROOT\"]\n\n            if subdomain:\n                http_host = f\"{subdomain}.{http_host}\"\n\n            if url_scheme is None:\n                url_scheme = app.config[\"PREFERRED_URL_SCHEME\"]\n\n            url = urlsplit(path)\n            base_url = (\n                f\"{url.scheme or url_scheme}://{url.netloc or http_host}\"\n                f\"/{app_root.lstrip('/')}\"\n            )\n            path = url.path\n\n            if url.query:\n                path = f\"{path}?{url.query}\"\n\n        self.app = app\n        super().__init__(path, base_url, *args, **kwargs)\n\n    def json_dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize ``obj`` to a JSON-formatted string.\n\n        The serialization will be configured according to the config associated\n        with this EnvironBuilder's ``app``.\n        \"\"\"\n        return self.app.json.dumps(obj, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py__werkzeug_version_FlaskClient.__init__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py__werkzeug_version_FlaskClient.__init__", "embedding": null, "metadata": {"file_path": "src/flask/testing.py", "file_name": "testing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 97, "end_line": 133, "span_ids": ["FlaskClient", "FlaskClient.__init__", "_get_werkzeug_version", "impl:2"], "tokens": 286}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "_werkzeug_version = \"\"\n\n\ndef _get_werkzeug_version() -> str:\n    global _werkzeug_version\n\n    if not _werkzeug_version:\n        _werkzeug_version = importlib.metadata.version(\"werkzeug\")\n\n    return _werkzeug_version\n\n\nclass FlaskClient(Client):\n    \"\"\"Works like a regular Werkzeug test client, with additional behavior for\n    Flask. Can defer the cleanup of the request context until the end of a\n    ``with`` block. For general information about how to use this class refer to\n    :class:`werkzeug.test.Client`.\n\n    .. versionchanged:: 0.12\n       `app.test_client()` includes preset default environment, which can be\n       set after instantiation of the `app.test_client()` object in\n       `client.environ_base`.\n\n    Basic usage is outlined in the :doc:`/testing` chapter.\n    \"\"\"\n\n    application: Flask\n\n    def __init__(self, *args: t.Any, **kwargs: t.Any) -> None:\n        super().__init__(*args, **kwargs)\n        self.preserve_context = False\n        self._new_contexts: list[t.ContextManager[t.Any]] = []\n        self._context_stack = ExitStack()\n        self.environ_base = {\n            \"REMOTE_ADDR\": \"127.0.0.1\",\n            \"HTTP_USER_AGENT\": f\"Werkzeug/{_get_werkzeug_version()}\",\n        }", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient.session_transaction_FlaskClient.session_transaction.self__update_cookies_from": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient.session_transaction_FlaskClient.session_transaction.self__update_cookies_from", "embedding": null, "metadata": {"file_path": "src/flask/testing.py", "file_name": "testing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 135, "end_line": 183, "span_ids": ["FlaskClient.session_transaction"], "tokens": 320}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskClient(Client):\n\n    @contextmanager\n    def session_transaction(\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Iterator[SessionMixin]:\n        \"\"\"When used in combination with a ``with`` statement this opens a\n        session transaction.  This can be used to modify the session that\n        the test client uses.  Once the ``with`` block is left the session is\n        stored back.\n\n        ::\n\n            with client.session_transaction() as session:\n                session['value'] = 42\n\n        Internally this is implemented by going through a temporary test\n        request context and since session handling could depend on\n        request variables this function accepts the same arguments as\n        :meth:`~flask.Flask.test_request_context` which are directly\n        passed through.\n        \"\"\"\n        if self._cookies is None:\n            raise TypeError(\n                \"Cookies are disabled. Create a client with 'use_cookies=True'.\"\n            )\n\n        app = self.application\n        ctx = app.test_request_context(*args, **kwargs)\n        self._add_cookies_to_wsgi(ctx.request.environ)\n\n        with ctx:\n            sess = app.session_interface.open_session(app, ctx.request)\n\n        if sess is None:\n            raise RuntimeError(\"Session backend did not open a session.\")\n\n        yield sess\n        resp = app.response_class()\n\n        if app.session_interface.is_null_session(sess):\n            return\n\n        with ctx:\n            app.session_interface.save_session(app, sess, resp)\n\n        self._update_cookies_from_response(\n            ctx.request.host.partition(\":\")[0],\n            ctx.request.path,\n            resp.headers.getlist(\"Set-Cookie\"),\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient._copy_environ_FlaskClient._request_from_builder_args": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient._copy_environ_FlaskClient._request_from_builder_args", "embedding": null, "metadata": {"file_path": "src/flask/testing.py", "file_name": "testing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 185, "end_line": 202, "span_ids": ["FlaskClient._copy_environ", "FlaskClient._request_from_builder_args"], "tokens": 145}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskClient(Client):\n\n    def _copy_environ(self, other: WSGIEnvironment) -> WSGIEnvironment:\n        out = {**self.environ_base, **other}\n\n        if self.preserve_context:\n            out[\"werkzeug.debug.preserve_context\"] = self._new_contexts.append\n\n        return out\n\n    def _request_from_builder_args(\n        self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]\n    ) -> BaseRequest:\n        kwargs[\"environ_base\"] = self._copy_environ(kwargs.get(\"environ_base\", {}))\n        builder = EnvironBuilder(self.application, *args, **kwargs)\n\n        try:\n            return builder.get_request()\n        finally:\n            builder.close()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient.open_FlaskClient.__exit__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskClient.open_FlaskClient.__exit__", "embedding": null, "metadata": {"file_path": "src/flask/testing.py", "file_name": "testing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 204, "end_line": 262, "span_ids": ["FlaskClient.__enter__", "FlaskClient.__exit__", "FlaskClient.open"], "tokens": 415}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskClient(Client):\n\n    def open(\n        self,\n        *args: t.Any,\n        buffered: bool = False,\n        follow_redirects: bool = False,\n        **kwargs: t.Any,\n    ) -> TestResponse:\n        if args and isinstance(\n            args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)\n        ):\n            if isinstance(args[0], werkzeug.test.EnvironBuilder):\n                builder = copy(args[0])\n                builder.environ_base = self._copy_environ(builder.environ_base or {})  # type: ignore[arg-type]\n                request = builder.get_request()\n            elif isinstance(args[0], dict):\n                request = EnvironBuilder.from_environ(\n                    args[0], app=self.application, environ_base=self._copy_environ({})\n                ).get_request()\n            else:\n                # isinstance(args[0], BaseRequest)\n                request = copy(args[0])\n                request.environ = self._copy_environ(request.environ)\n        else:\n            # request is None\n            request = self._request_from_builder_args(args, kwargs)\n\n        # Pop any previously preserved contexts. This prevents contexts\n        # from being preserved across redirects or multiple requests\n        # within a single block.\n        self._context_stack.close()\n\n        response = super().open(\n            request,\n            buffered=buffered,\n            follow_redirects=follow_redirects,\n        )\n        response.json_module = self.application.json  # type: ignore[assignment]\n\n        # Re-push contexts that were preserved during the request.\n        for cm in self._new_contexts:\n            self._context_stack.enter_context(cm)\n\n        self._new_contexts.clear()\n        return response\n\n    def __enter__(self) -> FlaskClient:\n        if self.preserve_context:\n            raise RuntimeError(\"Cannot nest client invocations\")\n        self.preserve_context = True\n        return self\n\n    def __exit__(\n        self,\n        exc_type: type | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.preserve_context = False\n        self._context_stack.close()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskCliRunner_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/testing.py_FlaskCliRunner_", "embedding": null, "metadata": {"file_path": "src/flask/testing.py", "file_name": "testing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 265, "end_line": 299, "span_ids": ["FlaskCliRunner", "FlaskCliRunner.__init__", "FlaskCliRunner.invoke"], "tokens": 318}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class FlaskCliRunner(CliRunner):\n    \"\"\"A :class:`~click.testing.CliRunner` for testing a Flask app's\n    CLI commands. Typically created using\n    :meth:`~flask.Flask.test_cli_runner`. See :ref:`testing-cli`.\n    \"\"\"\n\n    def __init__(self, app: Flask, **kwargs: t.Any) -> None:\n        self.app = app\n        super().__init__(**kwargs)\n\n    def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n    ) -> Result:\n        \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.\n\n        If the ``obj`` argument is not given, passes an instance of\n        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask\n        app being tested.\n\n        :param cli: Command object to invoke. Default is the app's\n            :attr:`~flask.app.Flask.cli` group.\n        :param args: List of strings to invoke the command with.\n\n        :return: a :class:`~click.testing.Result` object.\n        \"\"\"\n        if cli is None:\n            cli = self.app.cli\n\n        if \"obj\" not in kwargs:\n            kwargs[\"obj\"] = ScriptInfo(create_app=lambda: self.app)\n\n        return super().invoke(cli, args, **kwargs)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/typing.py_from___future___import_an_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/typing.py_from___future___import_an_", "embedding": null, "metadata": {"file_path": "src/flask/typing.py", "file_name": "typing.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 88, "span_ids": ["impl:12", "imports"], "tokens": 760}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport collections.abc as cabc\nimport typing as t\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from _typeshed.wsgi import WSGIApplication  # noqa: F401\n    from werkzeug.datastructures import Headers  # noqa: F401\n    from werkzeug.sansio.response import Response  # noqa: F401\n\n# The possible types that are directly convertible or are a Response object.\nResponseValue = t.Union[\n    \"Response\",\n    str,\n    bytes,\n    list[t.Any],\n    # Only dict is actually accepted, but Mapping allows for TypedDict.\n    t.Mapping[str, t.Any],\n    t.Iterator[str],\n    t.Iterator[bytes],\n    cabc.AsyncIterable[str],  # for Quart, until App is generic.\n    cabc.AsyncIterable[bytes],\n]\n\n# the possible types for an individual HTTP header\nHeaderValue = str | list[str] | tuple[str, ...]\n\n# the possible types for HTTP headers\nHeadersValue = t.Union[\n    \"Headers\",\n    t.Mapping[str, HeaderValue],\n    t.Sequence[tuple[str, HeaderValue]],\n]\n\n# The possible types returned by a route function.\nResponseReturnValue = t.Union[\n    ResponseValue,\n    tuple[ResponseValue, HeadersValue],\n    tuple[ResponseValue, int],\n    tuple[ResponseValue, int, HeadersValue],\n    \"WSGIApplication\",\n]\n\n# Allow any subclass of werkzeug.Response, such as the one from Flask,\n# as a callback argument. Using werkzeug.Response directly makes a\n# callback annotated with flask.Response fail type checking.\nResponseClass = t.TypeVar(\"ResponseClass\", bound=\"Response\")\n\nAppOrBlueprintKey = str | None  # The App key is None, whereas blueprints are named\nAfterRequestCallable = (\n    t.Callable[[ResponseClass], ResponseClass]\n    | t.Callable[[ResponseClass], t.Awaitable[ResponseClass]]\n)\nBeforeFirstRequestCallable = t.Callable[[], None] | t.Callable[[], t.Awaitable[None]]\nBeforeRequestCallable = (\n    t.Callable[[], ResponseReturnValue | None]\n    | t.Callable[[], t.Awaitable[ResponseReturnValue | None]]\n)\nShellContextProcessorCallable = t.Callable[[], dict[str, t.Any]]\nTeardownCallable = (\n    t.Callable[[BaseException | None], None]\n    | t.Callable[[BaseException | None], t.Awaitable[None]]\n)\nTemplateContextProcessorCallable = (\n    t.Callable[[], dict[str, t.Any]] | t.Callable[[], t.Awaitable[dict[str, t.Any]]]\n)\nTemplateFilterCallable = t.Callable[..., t.Any]\nTemplateGlobalCallable = t.Callable[..., t.Any]\nTemplateTestCallable = t.Callable[..., bool]\nURLDefaultCallable = t.Callable[[str, dict[str, t.Any]], None]\nURLValuePreprocessorCallable = t.Callable[[str | None, dict[str, t.Any] | None], None]\n\n# This should take Exception, but that either breaks typing the argument\n# with a specific exception, or decorating multiple times with different\n# exceptions (and using a union type on the argument).\n# https://github.com/pallets/flask/issues/4095\n# https://github.com/pallets/flask/issues/4295\n# https://github.com/pallets/flask/issues/4297\nErrorHandlerCallable = (\n    t.Callable[[t.Any], ResponseReturnValue]\n    | t.Callable[[t.Any], t.Awaitable[ResponseReturnValue]]\n)\n\nRouteCallable = (\n    t.Callable[..., ResponseReturnValue]\n    | t.Callable[..., t.Awaitable[ResponseReturnValue]]\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_from___future___import_an_View.dispatch_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_from___future___import_an_View.dispatch_request", "embedding": null, "metadata": {"file_path": "src/flask/views.py", "file_name": "views.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 83, "span_ids": ["View", "View.dispatch_request", "imports"], "tokens": 650}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport typing as t\n\nfrom . import typing as ft\nfrom .globals import current_app\nfrom .globals import request\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\n\nhttp_method_funcs = frozenset(\n    [\"get\", \"post\", \"head\", \"options\", \"delete\", \"put\", \"trace\", \"patch\"]\n)\n\n\nclass View:\n    \"\"\"Subclass this class and override :meth:`dispatch_request` to\n    create a generic class-based view. Call :meth:`as_view` to create a\n    view function that creates an instance of the class with the given\n    arguments and calls its ``dispatch_request`` method with any URL\n    variables.\n\n    See :doc:`views` for a detailed guide.\n\n    .. code-block:: python\n\n        class Hello(View):\n            init_every_request = False\n\n            def dispatch_request(self, name):\n                return f\"Hello, {name}!\"\n\n        app.add_url_rule(\n            \"/hello/<name>\", view_func=Hello.as_view(\"hello\")\n        )\n\n    Set :attr:`methods` on the class to change what methods the view\n    accepts.\n\n    Set :attr:`decorators` on the class to apply a list of decorators to\n    the generated view function. Decorators applied to the class itself\n    will not be applied to the generated view function!\n\n    Set :attr:`init_every_request` to ``False`` for efficiency, unless\n    you need to store request-global data on ``self``.\n    \"\"\"\n\n    #: The methods this view is registered for. Uses the same default\n    #: (``[\"GET\", \"HEAD\", \"OPTIONS\"]``) as ``route`` and\n    #: ``add_url_rule`` by default.\n    methods: t.ClassVar[t.Collection[str] | None] = None\n\n    #: Control whether the ``OPTIONS`` method is handled automatically.\n    #: Uses the same default (``True``) as ``route`` and\n    #: ``add_url_rule`` by default.\n    provide_automatic_options: t.ClassVar[bool | None] = None\n\n    #: A list of decorators to apply, in order, to the generated view\n    #: function. Remember that ``@decorator`` syntax is applied bottom\n    #: to top, so the first decorator in the list would be the bottom\n    #: decorator.\n    #:\n    #: .. versionadded:: 0.8\n    decorators: t.ClassVar[list[t.Callable[..., t.Any]]] = []\n\n    #: Create a new instance of this view class for every request by\n    #: default. If a view subclass sets this to ``False``, the same\n    #: instance is used for every request.\n    #:\n    #: A single instance is more efficient, especially if complex setup\n    #: is done during init. However, storing data on ``self`` is no\n    #: longer safe across requests, and :data:`~flask.g` should be used\n    #: instead.\n    #:\n    #: .. versionadded:: 2.2\n    init_every_request: t.ClassVar[bool] = True\n\n    def dispatch_request(self) -> ft.ResponseReturnValue:\n        \"\"\"The actual view function behavior. Subclasses must override\n        this and return a valid response. Any variables from the URL\n        rule are passed as keyword arguments.\n        \"\"\"\n        raise NotImplementedError()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_View.as_view_View.as_view.return_view": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_View.as_view_View.as_view.return_view", "embedding": null, "metadata": {"file_path": "src/flask/views.py", "file_name": "views.py", "file_type": "text/x-python", "category": "implementation", "start_line": 85, "end_line": 135, "span_ids": ["View.as_view"], "tokens": 457}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class View:\n\n    @classmethod\n    def as_view(\n        cls, name: str, *class_args: t.Any, **class_kwargs: t.Any\n    ) -> ft.RouteCallable:\n        \"\"\"Convert the class into a view function that can be registered\n        for a route.\n\n        By default, the generated view will create a new instance of the\n        view class for every request and call its\n        :meth:`dispatch_request` method. If the view class sets\n        :attr:`init_every_request` to ``False``, the same instance will\n        be used for every request.\n\n        Except for ``name``, all other arguments passed to this method\n        are forwarded to the view class ``__init__`` method.\n\n        .. versionchanged:: 2.2\n            Added the ``init_every_request`` class attribute.\n        \"\"\"\n        if cls.init_every_request:\n\n            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:\n                self = view.view_class(  # type: ignore[attr-defined]\n                    *class_args, **class_kwargs\n                )\n                return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]\n\n        else:\n            self = cls(*class_args, **class_kwargs)  # pyright: ignore\n\n            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:\n                return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]\n\n        if cls.decorators:\n            view.__name__ = name\n            view.__module__ = cls.__module__\n            for decorator in cls.decorators:\n                view = decorator(view)\n\n        # We attach the view class to the view function for two reasons:\n        # first of all it allows us to easily figure out what class-based\n        # view this thing came from, secondly it's also used for instantiating\n        # the view class so you can actually replace it with something else\n        # for testing purposes and debugging.\n        view.view_class = cls  # type: ignore\n        view.__name__ = name\n        view.__doc__ = cls.__doc__\n        view.__module__ = cls.__module__\n        view.methods = cls.methods  # type: ignore\n        view.provide_automatic_options = cls.provide_automatic_options  # type: ignore\n        return view", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView_MethodView._Dispatches_request_met": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView_MethodView._Dispatches_request_met", "embedding": null, "metadata": {"file_path": "src/flask/views.py", "file_name": "views.py", "file_type": "text/x-python", "category": "implementation", "start_line": 138, "end_line": 163, "span_ids": ["MethodView"], "tokens": 170}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class MethodView(View):\n    \"\"\"Dispatches request methods to the corresponding instance methods.\n    For example, if you implement a ``get`` method, it will be used to\n    handle ``GET`` requests.\n\n    This can be useful for defining a REST API.\n\n    :attr:`methods` is automatically set based on the methods defined on\n    the class.\n\n    See :doc:`views` for a detailed guide.\n\n    .. code-block:: python\n\n        class CounterAPI(MethodView):\n            def get(self):\n                return str(session.get(\"counter\", 0))\n\n            def post(self):\n                session[\"counter\"] = session.get(\"counter\", 0) + 1\n                return redirect(url_for(\"counter\"))\n\n        app.add_url_rule(\n            \"/counter\", view_func=CounterAPI.as_view(\"counter\")\n        )\n    \"\"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView.__init_subclass___MethodView.__init_subclass__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView.__init_subclass___MethodView.__init_subclass__", "embedding": null, "metadata": {"file_path": "src/flask/views.py", "file_name": "views.py", "file_type": "text/x-python", "category": "implementation", "start_line": 165, "end_line": 180, "span_ids": ["MethodView.__init_subclass__"], "tokens": 107}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class MethodView(View):\n\n    def __init_subclass__(cls, **kwargs: t.Any) -> None:\n        super().__init_subclass__(**kwargs)\n\n        if \"methods\" not in cls.__dict__:\n            methods = set()\n\n            for base in cls.__bases__:\n                if getattr(base, \"methods\", None):\n                    methods.update(base.methods)  # type: ignore[attr-defined]\n\n            for key in http_method_funcs:\n                if hasattr(cls, key):\n                    methods.add(key.upper())\n\n            if methods:\n                cls.methods = methods", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView.dispatch_request_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/views.py_MethodView.dispatch_request_", "embedding": null, "metadata": {"file_path": "src/flask/views.py", "file_name": "views.py", "file_type": "text/x-python", "category": "implementation", "start_line": 182, "end_line": 192, "span_ids": ["MethodView.dispatch_request"], "tokens": 115}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class MethodView(View):\n\n    def dispatch_request(self, **kwargs: t.Any) -> ft.ResponseReturnValue:\n        meth = getattr(self, request.method.lower(), None)\n\n        # If the request method is HEAD and we don't have a handler for it\n        # retry with GET.\n        if meth is None and request.method == \"HEAD\":\n            meth = getattr(self, \"get\", None)\n\n        assert meth is not None, f\"Unimplemented method {request.method!r}\"\n        return current_app.ensure_sync(meth)(**kwargs)  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_from___future___import_an_Request._max_form_parts": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_from___future___import_an_Request._max_form_parts", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 57, "span_ids": ["Request", "imports"], "tokens": 440}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport typing as t\n\nfrom werkzeug.exceptions import BadRequest\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.wrappers import Request as RequestBase\nfrom werkzeug.wrappers import Response as ResponseBase\n\nfrom . import json\nfrom .globals import current_app\nfrom .helpers import _split_blueprint_path\n\nif t.TYPE_CHECKING:  # pragma: no cover\n    from werkzeug.routing import Rule\n\n\nclass Request(RequestBase):\n    \"\"\"The request object used by default in Flask.  Remembers the\n    matched endpoint and view arguments.\n\n    It is what ends up as :class:`~flask.request`.  If you want to replace\n    the request object used you can subclass this and set\n    :attr:`~flask.Flask.request_class` to your subclass.\n\n    The request object is a :class:`~werkzeug.wrappers.Request` subclass and\n    provides all of the attributes Werkzeug defines plus a few Flask\n    specific ones.\n    \"\"\"\n\n    json_module: t.Any = json\n\n    #: The internal URL rule that matched the request.  This can be\n    #: useful to inspect which methods are allowed for the URL from\n    #: a before/after handler (``request.url_rule.methods``) etc.\n    #: Though if the request's method was invalid for the URL rule,\n    #: the valid list is available in ``routing_exception.valid_methods``\n    #: instead (an attribute of the Werkzeug exception\n    #: :exc:`~werkzeug.exceptions.MethodNotAllowed`)\n    #: because the request was never internally bound.\n    #:\n    #: .. versionadded:: 0.6\n    url_rule: Rule | None = None\n\n    #: A dict of view arguments that matched the request.  If an exception\n    #: happened when matching, this will be ``None``.\n    view_args: dict[str, t.Any] | None = None\n\n    #: If matching the URL failed, this is the exception that will be\n    #: raised / was raised as part of the request handling.  This is\n    #: usually a :exc:`~werkzeug.exceptions.NotFound` exception or\n    #: something similar.\n    routing_exception: HTTPException | None = None\n\n    _max_content_length: int | None = None\n    _max_form_memory_size: int | None = None\n    _max_form_parts: int | None = None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_content_length_Request.max_content_length._type_ignore_no_any_ret": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_content_length_Request.max_content_length._type_ignore_no_any_ret", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 59, "end_line": 86, "span_ids": ["Request.max_content_length"], "tokens": 273}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Request(RequestBase):\n\n    @property\n    def max_content_length(self) -> int | None:\n        \"\"\"The maximum number of bytes that will be read during this request. If\n        this limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\n        error is raised. If it is set to ``None``, no limit is enforced at the\n        Flask application level. However, if it is ``None`` and the request has\n        no ``Content-Length`` header and the WSGI server does not indicate that\n        it terminates the stream, then no data is read to avoid an infinite\n        stream.\n\n        Each request defaults to the :data:`MAX_CONTENT_LENGTH` config, which\n        defaults to ``None``. It can be set on a specific ``request`` to apply\n        the limit to that specific view. This should be set appropriately based\n        on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This can be set per-request.\n\n        .. versionchanged:: 0.6\n            This is configurable through Flask config.\n        \"\"\"\n        if self._max_content_length is not None:\n            return self._max_content_length\n\n        if not current_app:\n            return super().max_content_length\n\n        return current_app.config[\"MAX_CONTENT_LENGTH\"]  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_content_length_1_Request.max_form_memory_size": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_content_length_1_Request.max_form_memory_size", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 88, "end_line": 113, "span_ids": ["Request.max_content_length_1", "Request.max_form_memory_size"], "tokens": 259}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Request(RequestBase):\n\n    @max_content_length.setter\n    def max_content_length(self, value: int | None) -> None:\n        self._max_content_length = value\n\n    @property\n    def max_form_memory_size(self) -> int | None:\n        \"\"\"The maximum size in bytes any non-file form field may be in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\n        defaults to ``500_000``. It can be set on a specific ``request`` to\n        apply the limit to that specific view. This should be set appropriately\n        based on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This is configurable through Flask config.\n        \"\"\"\n        if self._max_form_memory_size is not None:\n            return self._max_form_memory_size\n\n        if not current_app:\n            return super().max_form_memory_size\n\n        return current_app.config[\"MAX_FORM_MEMORY_SIZE\"]  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_form_memory_size_3_Request.max_form_parts": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_form_memory_size_3_Request.max_form_parts", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 115, "end_line": 140, "span_ids": ["Request.max_form_memory_size_3", "Request.max_form_parts"], "tokens": 262}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Request(RequestBase):\n\n    @max_form_memory_size.setter\n    def max_form_memory_size(self, value: int | None) -> None:\n        self._max_form_memory_size = value\n\n    @property  # type: ignore[override]\n    def max_form_parts(self) -> int | None:\n        \"\"\"The maximum number of fields that may be present in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_PARTS` config, which\n        defaults to ``1_000``. It can be set on a specific ``request`` to apply\n        the limit to that specific view. This should be set appropriately based\n        on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This is configurable through Flask config.\n        \"\"\"\n        if self._max_form_parts is not None:\n            return self._max_form_parts\n\n        if not current_app:\n            return super().max_form_parts\n\n        return current_app.config[\"MAX_FORM_PARTS\"]  # type: ignore[no-any-return]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_form_parts_5_Request.endpoint": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.max_form_parts_5_Request.endpoint", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 142, "end_line": 159, "span_ids": ["Request.endpoint", "Request.max_form_parts_5"], "tokens": 127}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Request(RequestBase):\n\n    @max_form_parts.setter\n    def max_form_parts(self, value: int | None) -> None:\n        self._max_form_parts = value\n\n    @property\n    def endpoint(self) -> str | None:\n        \"\"\"The endpoint that matched the request URL.\n\n        This will be ``None`` if matching failed or has not been\n        performed yet.\n\n        This in combination with :attr:`view_args` can be used to\n        reconstruct the same URL or a modified URL.\n        \"\"\"\n        if self.url_rule is not None:\n            return self.url_rule.endpoint  # type: ignore[no-any-return]\n\n        return None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.blueprint_Request.blueprints": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request.blueprint_Request.blueprints", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 161, "end_line": 195, "span_ids": ["Request.blueprint", "Request.blueprints"], "tokens": 206}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Request(RequestBase):\n\n    @property\n    def blueprint(self) -> str | None:\n        \"\"\"The registered name of the current blueprint.\n\n        This will be ``None`` if the endpoint is not part of a\n        blueprint, or if URL matching failed or has not been performed\n        yet.\n\n        This does not necessarily match the name the blueprint was\n        created with. It may have been nested, or registered with a\n        different name.\n        \"\"\"\n        endpoint = self.endpoint\n\n        if endpoint is not None and \".\" in endpoint:\n            return endpoint.rpartition(\".\")[0]\n\n        return None\n\n    @property\n    def blueprints(self) -> list[str]:\n        \"\"\"The registered names of the current blueprint upwards through\n        parent blueprints.\n\n        This will be an empty list if there is no current blueprint, or\n        if URL matching failed.\n\n        .. versionadded:: 2.0.1\n        \"\"\"\n        name = self.blueprint\n\n        if name is None:\n            return []\n\n        return _split_blueprint_path(name)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request._load_form_data_Request.on_json_loading_failed": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Request._load_form_data_Request.on_json_loading_failed", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 197, "end_line": 219, "span_ids": ["Request._load_form_data", "Request.on_json_loading_failed"], "tokens": 159}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Request(RequestBase):\n\n    def _load_form_data(self) -> None:\n        super()._load_form_data()\n\n        # In debug mode we're replacing the files multidict with an ad-hoc\n        # subclass that raises a different error for key errors.\n        if (\n            current_app\n            and current_app.debug\n            and self.mimetype != \"multipart/form-data\"\n            and not self.files\n        ):\n            from .debughelpers import attach_enctype_error_multidict\n\n            attach_enctype_error_multidict(self)\n\n    def on_json_loading_failed(self, e: ValueError | None) -> t.Any:\n        try:\n            return super().on_json_loading_failed(e)\n        except BadRequest as ebr:\n            if current_app and current_app.debug:\n                raise\n\n            raise BadRequest() from ebr", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Response_Response.autocorrect_location_header": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Response_Response.autocorrect_location_header", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 222, "end_line": 244, "span_ids": ["Response"], "tokens": 190}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Response(ResponseBase):\n    \"\"\"The response object that is used by default in Flask.  Works like the\n    response object from Werkzeug but is set to have an HTML mimetype by\n    default.  Quite often you don't have to create this object yourself because\n    :meth:`~flask.Flask.make_response` will take care of that for you.\n\n    If you want to replace the response object used you can subclass this and\n    set :attr:`~flask.Flask.response_class` to your subclass.\n\n    .. versionchanged:: 1.0\n        JSON support is added to the response, like the request. This is useful\n        when testing to get the test client response data as JSON.\n\n    .. versionchanged:: 1.0\n\n        Added :attr:`max_cookie_size`.\n    \"\"\"\n\n    default_mimetype: str | None = \"text/html\"\n\n    json_module = json\n\n    autocorrect_location_header = False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Response.max_cookie_size_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/src/flask/wrappers.py_Response.max_cookie_size_", "embedding": null, "metadata": {"file_path": "src/flask/wrappers.py", "file_name": "wrappers.py", "file_type": "text/x-python", "category": "implementation", "start_line": 246, "end_line": 258, "span_ids": ["Response.max_cookie_size"], "tokens": 105}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class Response(ResponseBase):\n\n    @property\n    def max_cookie_size(self) -> int:  # type: ignore\n        \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\n        See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in\n        Werkzeug's docs.\n        \"\"\"\n        if current_app:\n            return current_app.config[\"MAX_COOKIE_SIZE\"]  # type: ignore[no-any-return]\n\n        # return Werkzeug's default when not in an app context\n        return super().max_cookie_size", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/conftest.py_os__standard_os_environ": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/conftest.py_os__standard_os_environ", "embedding": null, "metadata": {"file_path": "tests/conftest.py", "file_name": "conftest.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 33, "span_ids": ["_standard_os_environ", "imports"], "tokens": 233}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import os\nimport sys\n\nimport pytest\nfrom _pytest import monkeypatch\n\nfrom flask import Flask\nfrom flask.globals import app_ctx as _app_ctx\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef _standard_os_environ():\n    \"\"\"Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    \"\"\"\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, \"FLASK_ENV_FILE\", monkeypatch.notset),\n        (os.environ, \"FLASK_APP\", monkeypatch.notset),\n        (os.environ, \"FLASK_DEBUG\", monkeypatch.notset),\n        (os.environ, \"FLASK_RUN_FROM_CLI\", monkeypatch.notset),\n        (os.environ, \"WERKZEUG_RUN_MAIN\", monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/conftest.py__reset_os_environ_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/conftest.py__reset_os_environ_", "embedding": null, "metadata": {"file_path": "tests/conftest.py", "file_name": "conftest.py", "file_type": "text/x-python", "category": "implementation", "start_line": 36, "end_line": 130, "span_ids": ["_reset_os_environ", "app", "app_ctx", "client", "leak_detector", "modules_tmp_path", "modules_tmp_path_prefix", "purge_module", "req_ctx", "site_packages", "test_apps"], "tokens": 533}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.fixture(autouse=True)\ndef _reset_os_environ(monkeypatch, _standard_os_environ):\n    \"\"\"Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    \"\"\"\n    monkeypatch._setitem.extend(_standard_os_environ)\n\n\n@pytest.fixture\ndef app():\n    app = Flask(\"flask_test\", root_path=os.path.dirname(__file__))\n    app.config.update(\n        TESTING=True,\n        SECRET_KEY=\"test key\",\n    )\n    return app\n\n\n@pytest.fixture\ndef app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx\n\n\n@pytest.fixture\ndef req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx\n\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()\n\n\n@pytest.fixture\ndef test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), \"test_apps\"))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise \"import app\"\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key)\n\n\n@pytest.fixture(autouse=True)\ndef leak_detector():\n    \"\"\"Fails if any app contexts are still pushed when a test ends. Pops all\n    contexts so subsequent tests are not affected.\n    \"\"\"\n    yield\n    leaks = []\n\n    while _app_ctx:\n        leaks.append(_app_ctx._get_current_object())\n        _app_ctx.pop()\n\n    assert not leaks\n\n\n@pytest.fixture\ndef modules_tmp_path(tmp_path, monkeypatch):\n    \"\"\"A temporary directory added to sys.path.\"\"\"\n    rv = tmp_path / \"modules_tmp\"\n    rv.mkdir()\n    monkeypatch.syspath_prepend(os.fspath(rv))\n    return rv\n\n\n@pytest.fixture\ndef modules_tmp_path_prefix(modules_tmp_path, monkeypatch):\n    monkeypatch.setattr(sys, \"prefix\", os.fspath(modules_tmp_path))\n    return modules_tmp_path\n\n\n@pytest.fixture\ndef site_packages(modules_tmp_path, monkeypatch):\n    \"\"\"Create a fake site-packages.\"\"\"\n    py_dir = f\"python{sys.version_info.major}.{sys.version_info.minor}\"\n    rv = modules_tmp_path / \"lib\" / py_dir / \"site-packages\"\n    rv.mkdir(parents=True)\n    monkeypatch.syspath_prepend(os.fspath(rv))\n    return rv\n\n\n@pytest.fixture\ndef purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_pytest_test_app_tearing_down_with_handled_exception_by_except_block": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_pytest_test_app_tearing_down_with_handled_exception_by_except_block", "embedding": null, "metadata": {"file_path": "tests/test_appctx.py", "file_name": "test_appctx.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 87, "span_ids": ["imports", "test_app_context_provides_current_app", "test_app_tearing_down", "test_app_tearing_down_with_handled_exception_by_except_block", "test_app_tearing_down_with_previous_exception", "test_basic_url_generation", "test_request_context_means_app_context", "test_url_generation_requires_server_name", "test_url_generation_without_context_fails"], "tokens": 387}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\n\nimport flask\nfrom flask.globals import app_ctx\n\n\ndef test_basic_url_generation(app):\n    app.config[\"SERVER_NAME\"] = \"localhost\"\n    app.config[\"PREFERRED_URL_SCHEME\"] = \"https\"\n\n    @app.route(\"/\")\n    def index():\n        pass\n\n    with app.app_context():\n        rv = flask.url_for(\"index\")\n        assert rv == \"https://localhost/\"\n\n\ndef test_url_generation_requires_server_name(app):\n    with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for(\"index\")\n\n\ndef test_url_generation_without_context_fails():\n    with pytest.raises(RuntimeError):\n        flask.url_for(\"index\")\n\n\ndef test_request_context_means_app_context(app):\n    with app.test_request_context():\n        assert flask.current_app._get_current_object() is app\n    assert not flask.current_app\n\n\ndef test_app_context_provides_current_app(app):\n    with app.app_context():\n        assert flask.current_app._get_current_object() is app\n    assert not flask.current_app\n\n\ndef test_app_tearing_down(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None]\n\n\ndef test_app_tearing_down_with_previous_exception(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    try:\n        raise Exception(\"dummy\")\n    except Exception:\n        pass\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None]\n\n\ndef test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception(\"dummy\")\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_tearing_down_with_handled_exception_by_app_handler_test_app_tearing_down_with_handled_exception_by_app_handler": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_tearing_down_with_handled_exception_by_app_handler_test_app_tearing_down_with_handled_exception_by_app_handler", "embedding": null, "metadata": {"file_path": "tests/test_appctx.py", "file_name": "test_appctx.py", "file_type": "text/x-python", "category": "test", "start_line": 90, "end_line": 110, "span_ids": ["test_app_tearing_down_with_handled_exception_by_app_handler"], "tokens": 121}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n    app.config[\"PROPAGATE_EXCEPTIONS\"] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route(\"/\")\n    def index():\n        raise Exception(\"dummy\")\n\n    @app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f))\n\n    with app.app_context():\n        client.get(\"/\")\n\n    # teardown request context, and with block context\n    assert cleanup_stuff == [None, None]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_tearing_down_with_unhandled_exception_test_app_tearing_down_with_unhandled_exception": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_tearing_down_with_unhandled_exception_test_app_tearing_down_with_unhandled_exception", "embedding": null, "metadata": {"file_path": "tests/test_appctx.py", "file_name": "test_appctx.py", "file_type": "text/x-python", "category": "test", "start_line": 113, "end_line": 133, "span_ids": ["test_app_tearing_down_with_unhandled_exception"], "tokens": 149}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_app_tearing_down_with_unhandled_exception(app, client):\n    app.config[\"PROPAGATE_EXCEPTIONS\"] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route(\"/\")\n    def index():\n        raise ValueError(\"dummy\")\n\n    with pytest.raises(ValueError, match=\"dummy\"):\n        with app.app_context():\n            client.get(\"/\")\n\n    assert len(cleanup_stuff) == 2\n    assert isinstance(cleanup_stuff[0], ValueError)\n    assert str(cleanup_stuff[0]) == \"dummy\"\n    # exception propagated, seen by request context and with block context\n    assert cleanup_stuff[0] is cleanup_stuff[1]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_ctx_globals_methods_test_custom_app_ctx_globals_class": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_app_ctx_globals_methods_test_custom_app_ctx_globals_class", "embedding": null, "metadata": {"file_path": "tests/test_appctx.py", "file_name": "test_appctx.py", "file_type": "text/x-python", "category": "test", "start_line": 136, "end_line": 166, "span_ids": ["test_app_ctx_globals_methods", "test_custom_app_ctx_globals_class"], "tokens": 272}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get(\"foo\") is None\n    assert flask.g.get(\"foo\", \"bar\") == \"bar\"\n    # __contains__\n    assert \"foo\" not in flask.g\n    flask.g.foo = \"bar\"\n    assert \"foo\" in flask.g\n    # setdefault\n    flask.g.setdefault(\"bar\", \"the cake is a lie\")\n    flask.g.setdefault(\"bar\", \"hello world\")\n    assert flask.g.bar == \"the cake is a lie\"\n    # pop\n    assert flask.g.pop(\"bar\") == \"the cake is a lie\"\n    with pytest.raises(KeyError):\n        flask.g.pop(\"bar\")\n    assert flask.g.pop(\"bar\", \"more cake\") == \"more cake\"\n    # __iter__\n    assert list(flask.g) == [\"foo\"]\n    # __repr__\n    assert repr(flask.g) == \"<flask.g of 'flask_test'>\"\n\n\ndef test_custom_app_ctx_globals_class(app):\n    class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = \"eggs\"\n\n    app.app_ctx_globals_class = CustomRequestGlobals\n    with app.app_context():\n        assert flask.render_template_string(\"{{ g.spam }}\") == \"eggs\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_context_refcounts_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_appctx.py_test_context_refcounts_", "embedding": null, "metadata": {"file_path": "tests/test_appctx.py", "file_name": "test_appctx.py", "file_type": "text/x-python", "category": "test", "start_line": 169, "end_line": 211, "span_ids": ["test_clean_pop", "test_context_refcounts"], "tokens": 214}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_context_refcounts(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        called.append(\"request\")\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append(\"app\")\n\n    @app.route(\"/\")\n    def index():\n        with app_ctx:\n            pass\n\n        assert flask.request.environ[\"werkzeug.request\"] is not None\n        return \"\"\n\n    res = client.get(\"/\")\n    assert res.status_code == 200\n    assert res.data == b\"\"\n    assert called == [\"request\", \"app\"]\n\n\ndef test_clean_pop(app):\n    app.testing = False\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        raise ZeroDivisionError\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append(\"TEARDOWN\")\n\n    with app.app_context():\n        called.append(flask.current_app.name)\n\n    assert called == [\"flask_test\", \"TEARDOWN\"]\n    assert not flask.current_app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/__init__.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/__init__.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/blueprintapp/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 10, "span_ids": ["imports"], "tokens": 53}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\napp = Flask(__name__)\napp.config[\"DEBUG\"] = True\nfrom blueprintapp.apps.admin import admin  # noqa: E402\nfrom blueprintapp.apps.frontend import frontend  # noqa: E402\n\napp.register_blueprint(admin)\napp.register_blueprint(frontend)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/apps/admin/__init__.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/apps/admin/__init__.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/blueprintapp/apps/admin/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 21, "span_ids": ["imports", "index", "index2"], "tokens": 74}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Blueprint\nfrom flask import render_template\n\nadmin = Blueprint(\n    \"admin\",\n    __name__,\n    url_prefix=\"/admin\",\n    template_folder=\"templates\",\n    static_folder=\"static\",\n)\n\n\n@admin.route(\"/\")\ndef index():\n    return render_template(\"admin/index.html\")\n\n\n@admin.route(\"/index2\")\ndef index2():\n    return render_template(\"./admin/index.html\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/apps/frontend/__init__.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/blueprintapp/apps/frontend/__init__.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/blueprintapp/apps/frontend/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 15, "span_ids": ["imports", "index", "missing_template"], "tokens": 58}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Blueprint\nfrom flask import render_template\n\nfrontend = Blueprint(\"frontend\", __name__, template_folder=\"templates\")\n\n\n@frontend.route(\"/\")\ndef index():\n    return render_template(\"frontend/index.html\")\n\n\n@frontend.route(\"/missing\")\ndef missing_template():\n    return render_template(\"missing_template.html\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/app.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/app.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/cliapp/app.py", "file_name": "app.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 4, "span_ids": ["imports"], "tokens": 12}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\ntestapp = Flask(\"testapp\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/factory.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/factory.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/cliapp/factory.py", "file_name": "factory.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 14, "span_ids": ["create_app", "create_app2", "imports", "no_app"], "tokens": 42}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\n\ndef create_app():\n    return Flask(\"app\")\n\n\ndef create_app2(foo, bar):\n    return Flask(\"_\".join([\"app2\", foo, bar]))\n\n\ndef no_app():\n    pass", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/importerrorapp.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/importerrorapp.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/cliapp/importerrorapp.py", "file_name": "importerrorapp.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 6, "span_ids": ["imports"], "tokens": 15}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\nraise ImportError()\n\ntestapp = Flask(\"testapp\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/inner1/__init__.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/inner1/__init__.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/cliapp/inner1/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 4, "span_ids": ["imports"], "tokens": 10}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\napplication = Flask(__name__)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/inner1/inner2/flask.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/inner1/inner2/flask.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/cliapp/inner1/inner2/flask.py", "file_name": "flask.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 4, "span_ids": ["imports"], "tokens": 10}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\napp = Flask(__name__)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/multiapp.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/cliapp/multiapp.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/cliapp/multiapp.py", "file_name": "multiapp.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 5, "span_ids": ["imports"], "tokens": 20}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\napp1 = Flask(\"app1\")\napp2 = Flask(\"app2\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/helloworld/hello.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/helloworld/hello.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/helloworld/hello.py", "file_name": "hello.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 9, "span_ids": ["hello", "imports"], "tokens": 22}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/helloworld/wsgi.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/helloworld/wsgi.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/helloworld/wsgi.py", "file_name": "wsgi.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 2, "span_ids": ["imports"], "tokens": 9}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from hello import app  # noqa: F401", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/subdomaintestmodule/__init__.py__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_apps/subdomaintestmodule/__init__.py__", "embedding": null, "metadata": {"file_path": "tests/test_apps/subdomaintestmodule/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 4, "span_ids": ["imports"], "tokens": 18}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from flask import Module\n\nmod = Module(__name__, \"foo\", subdomain=\"foo\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_asyncio_AsyncMethodView.post": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_asyncio_AsyncMethodView.post", "embedding": null, "metadata": {"file_path": "tests/test_async.py", "file_name": "test_async.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 37, "span_ids": ["AppError", "AsyncMethodView", "AsyncMethodView.get", "AsyncMethodView.post", "AsyncView", "AsyncView.dispatch_request", "BlueprintError", "imports"], "tokens": 120}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import asyncio\n\nimport pytest\n\nfrom flask import Blueprint\nfrom flask import Flask\nfrom flask import request\nfrom flask.views import MethodView\nfrom flask.views import View\n\npytest.importorskip(\"asgiref\")\n\n\nclass AppError(Exception):\n    pass\n\n\nclass BlueprintError(Exception):\n    pass\n\n\nclass AsyncView(View):\n    methods = [\"GET\", \"POST\"]\n\n    async def dispatch_request(self):\n        await asyncio.sleep(0)\n        return request.method\n\n\nclass AsyncMethodView(MethodView):\n    async def get(self):\n        await asyncio.sleep(0)\n        return \"GET\"\n\n    async def post(self):\n        await asyncio.sleep(0)\n        return \"POST\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_handle_handle.return_app": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_handle_handle.return_app", "embedding": null, "metadata": {"file_path": "tests/test_async.py", "file_name": "test_async.py", "file_type": "text/x-python", "category": "test", "start_line": 40, "end_line": 78, "span_ids": ["handle"], "tokens": 218}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.fixture(name=\"async_app\")\ndef _async_app():\n    app = Flask(__name__)\n\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    @app.route(\"/home\", methods=[\"GET\", \"POST\"])\n    async def index():\n        await asyncio.sleep(0)\n        return request.method\n\n    @app.errorhandler(AppError)\n    async def handle(_):\n        return \"\", 412\n\n    @app.route(\"/error\")\n    async def error():\n        raise AppError()\n\n    blueprint = Blueprint(\"bp\", __name__)\n\n    @blueprint.route(\"/\", methods=[\"GET\", \"POST\"])\n    async def bp_index():\n        await asyncio.sleep(0)\n        return request.method\n\n    @blueprint.errorhandler(BlueprintError)\n    async def bp_handle(_):\n        return \"\", 412\n\n    @blueprint.route(\"/error\")\n    async def bp_error():\n        raise BlueprintError()\n\n    app.register_blueprint(blueprint, url_prefix=\"/bp\")\n\n    app.add_url_rule(\"/view\", view_func=AsyncView.as_view(\"view\"))\n    app.add_url_rule(\"/methodview\", view_func=AsyncMethodView.as_view(\"methodview\"))\n\n    return app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_test_async_route_test_async_error_handler": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_test_async_route_test_async_error_handler", "embedding": null, "metadata": {"file_path": "tests/test_async.py", "file_name": "test_async.py", "file_type": "text/x-python", "category": "test", "start_line": 81, "end_line": 94, "span_ids": ["test_async_error_handler", "test_async_route"], "tokens": 127}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"path\", [\"/\", \"/home\", \"/bp/\", \"/view\", \"/methodview\"])\ndef test_async_route(path, async_app):\n    test_client = async_app.test_client()\n    response = test_client.get(path)\n    assert b\"GET\" in response.get_data()\n    response = test_client.post(path)\n    assert b\"POST\" in response.get_data()\n\n\n@pytest.mark.parametrize(\"path\", [\"/error\", \"/bp/error\"])\ndef test_async_error_handler(path, async_app):\n    test_client = async_app.test_client()\n    response = test_client.get(path)\n    assert response.status_code == 412", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_before_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_async.py_before_", "embedding": null, "metadata": {"file_path": "tests/test_async.py", "file_name": "test_async.py", "file_type": "text/x-python", "category": "test", "start_line": 97, "end_line": 146, "span_ids": ["before"], "tokens": 215}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_async_before_after_request():\n    app_before_called = False\n    app_after_called = False\n    bp_before_called = False\n    bp_after_called = False\n\n    app = Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return \"\"\n\n    @app.before_request\n    async def before():\n        nonlocal app_before_called\n        app_before_called = True\n\n    @app.after_request\n    async def after(response):\n        nonlocal app_after_called\n        app_after_called = True\n        return response\n\n    blueprint = Blueprint(\"bp\", __name__)\n\n    @blueprint.route(\"/\")\n    def bp_index():\n        return \"\"\n\n    @blueprint.before_request\n    async def bp_before():\n        nonlocal bp_before_called\n        bp_before_called = True\n\n    @blueprint.after_request\n    async def bp_after(response):\n        nonlocal bp_after_called\n        bp_after_called = True\n        return response\n\n    app.register_blueprint(blueprint, url_prefix=\"/bp\")\n\n    test_client = app.test_client()\n    test_client.get(\"/\")\n    assert app_before_called\n    assert app_after_called\n    test_client.get(\"/bp/\")\n    assert bp_before_called\n    assert bp_after_called", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_gc_test_method_route_no_methods": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_gc_test_method_route_no_methods", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 67, "span_ids": ["imports", "test_method_route", "test_method_route_no_methods", "test_options_on_multiple_rules", "test_options_work"], "tokens": 369}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import gc\nimport re\nimport typing as t\nimport uuid\nimport warnings\nimport weakref\nfrom contextlib import nullcontext\nfrom datetime import datetime\nfrom datetime import timezone\nfrom platform import python_implementation\n\nimport pytest\nimport werkzeug.serving\nfrom markupsafe import Markup\nfrom werkzeug.exceptions import BadRequest\nfrom werkzeug.exceptions import Forbidden\nfrom werkzeug.exceptions import NotFound\nfrom werkzeug.http import parse_date\nfrom werkzeug.routing import BuildError\nfrom werkzeug.routing import RequestRedirect\n\nimport flask\n\nrequire_cpython_gc = pytest.mark.skipif(\n    python_implementation() != \"CPython\",\n    reason=\"Requires CPython GC behavior\",\n)\n\n\ndef test_options_work(app, client):\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    def index():\n        return \"Hello World\"\n\n    rv = client.open(\"/\", method=\"OPTIONS\")\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n    assert rv.data == b\"\"\n\n\ndef test_options_on_multiple_rules(app, client):\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    def index():\n        return \"Hello World\"\n\n    @app.route(\"/\", methods=[\"PUT\"])\n    def index_put():\n        return \"Aha!\"\n\n    rv = client.open(\"/\", method=\"OPTIONS\")\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\"]\n\n\n@pytest.mark.parametrize(\"method\", [\"get\", \"post\", \"put\", \"delete\", \"patch\"])\ndef test_method_route(app, client, method):\n    method_route = getattr(app, method)\n    client_method = getattr(client, method)\n\n    @method_route(\"/\")\n    def hello():\n        return \"Hello\"\n\n    assert client_method(\"/\").data == b\"Hello\"\n\n\ndef test_method_route_no_methods(app):\n    with pytest.raises(TypeError):\n        app.get(\"/\", methods=[\"GET\", \"POST\"])", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_provide_automatic_options_attr_test_provide_automatic_options_attr": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_provide_automatic_options_attr_test_provide_automatic_options_attr", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 70, "end_line": 89, "span_ids": ["test_provide_automatic_options_attr"], "tokens": 133}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_provide_automatic_options_attr():\n    app = flask.Flask(__name__)\n\n    def index():\n        return \"Hello World!\"\n\n    index.provide_automatic_options = False\n    app.route(\"/\")(index)\n    rv = app.test_client().open(\"/\", method=\"OPTIONS\")\n    assert rv.status_code == 405\n\n    app = flask.Flask(__name__)\n\n    def index2():\n        return \"Hello World!\"\n\n    index2.provide_automatic_options = True\n    app.route(\"/\", methods=[\"OPTIONS\"])(index2)\n    rv = app.test_client().open(\"/\", method=\"OPTIONS\")\n    assert sorted(rv.allow) == [\"OPTIONS\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_provide_automatic_options_kwarg_test_provide_automatic_options_kwarg.assert_rv_status_code__10": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_provide_automatic_options_kwarg_test_provide_automatic_options_kwarg.assert_rv_status_code__10", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 92, "end_line": 126, "span_ids": ["test_provide_automatic_options_kwarg"], "tokens": 218}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_provide_automatic_options_kwarg(app, client):\n    def index():\n        return flask.request.method\n\n    def more():\n        return flask.request.method\n\n    app.add_url_rule(\"/\", view_func=index, provide_automatic_options=False)\n    app.add_url_rule(\n        \"/more\",\n        view_func=more,\n        methods=[\"GET\", \"POST\"],\n        provide_automatic_options=False,\n    )\n    assert client.get(\"/\").data == b\"GET\"\n\n    rv = client.post(\"/\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\"]\n\n    rv = client.open(\"/\", method=\"OPTIONS\")\n    assert rv.status_code == 405\n\n    rv = client.head(\"/\")\n    assert rv.status_code == 200\n    assert not rv.data  # head truncates\n    assert client.post(\"/more\").data == b\"POST\"\n    assert client.get(\"/more\").data == b\"GET\"\n\n    rv = client.delete(\"/more\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"POST\"]\n\n    rv = client.open(\"/more\", method=\"OPTIONS\")\n    assert rv.status_code == 405", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_dispatching_test_disallow_string_for_allowed_methods": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_dispatching_test_disallow_string_for_allowed_methods", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 129, "end_line": 154, "span_ids": ["test_disallow_string_for_allowed_methods", "test_request_dispatching"], "tokens": 210}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_request_dispatching(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.request.method\n\n    @app.route(\"/more\", methods=[\"GET\", \"POST\"])\n    def more():\n        return flask.request.method\n\n    assert client.get(\"/\").data == b\"GET\"\n    rv = client.post(\"/\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\"]\n    rv = client.head(\"/\")\n    assert rv.status_code == 200\n    assert not rv.data  # head truncates\n    assert client.post(\"/more\").data == b\"POST\"\n    assert client.get(\"/more\").data == b\"GET\"\n    rv = client.delete(\"/more\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n\n\ndef test_disallow_string_for_allowed_methods(app):\n    with pytest.raises(TypeError):\n        app.add_url_rule(\"/\", methods=\"GET POST\", endpoint=\"test\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_url_mapping_test_url_mapping.assert_random_uuid4_in_rv": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_url_mapping_test_url_mapping.assert_random_uuid4_in_rv", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 157, "end_line": 190, "span_ids": ["test_url_mapping"], "tokens": 274}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_url_mapping(app, client):\n    random_uuid4 = \"7eb41166-9ebf-4d26-b771-ea3f54f8b383\"\n\n    def index():\n        return flask.request.method\n\n    def more():\n        return flask.request.method\n\n    def options():\n        return random_uuid4\n\n    app.add_url_rule(\"/\", \"index\", index)\n    app.add_url_rule(\"/more\", \"more\", more, methods=[\"GET\", \"POST\"])\n\n    # Issue 1288: Test that automatic options are not added\n    #             when non-uppercase 'options' in methods\n    app.add_url_rule(\"/options\", \"options\", options, methods=[\"options\"])\n\n    assert client.get(\"/\").data == b\"GET\"\n    rv = client.post(\"/\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\"]\n    rv = client.head(\"/\")\n    assert rv.status_code == 200\n    assert not rv.data  # head truncates\n    assert client.post(\"/more\").data == b\"POST\"\n    assert client.get(\"/more\").data == b\"GET\"\n    rv = client.delete(\"/more\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n    rv = client.open(\"/options\", method=\"OPTIONS\")\n    assert rv.status_code == 200\n    assert random_uuid4 in rv.data.decode(\"utf-8\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_werkzeug_routing_test_werkzeug_routing": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_werkzeug_routing_test_werkzeug_routing", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 193, "end_line": 211, "span_ids": ["test_werkzeug_routing"], "tokens": 123}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_werkzeug_routing(app, client):\n    from werkzeug.routing import Rule\n    from werkzeug.routing import Submount\n\n    app.url_map.add(\n        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n    )\n\n    def bar():\n        return \"bar\"\n\n    def index():\n        return \"index\"\n\n    app.view_functions[\"bar\"] = bar\n    app.view_functions[\"index\"] = index\n\n    assert client.get(\"/foo/\").data == b\"index\"\n    assert client.get(\"/foo/bar\").data == b\"bar\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_endpoint_decorator_test_endpoint_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_endpoint_decorator_test_endpoint_decorator", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 214, "end_line": 231, "span_ids": ["test_endpoint_decorator"], "tokens": 115}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n    from werkzeug.routing import Submount\n\n    app.url_map.add(\n        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n    )\n\n    @app.endpoint(\"bar\")\n    def bar():\n        return \"bar\"\n\n    @app.endpoint(\"index\")\n    def index():\n        return \"index\"\n\n    assert client.get(\"/foo/\").data == b\"index\"\n    assert client.get(\"/foo/bar\").data == b\"bar\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_test_session": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_test_session", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 234, "end_line": 254, "span_ids": ["test_session"], "tokens": 159}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session(app, client):\n    @app.route(\"/set\", methods=[\"POST\"])\n    def set():\n        assert not flask.session.accessed\n        assert not flask.session.modified\n        flask.session[\"value\"] = flask.request.form[\"value\"]\n        assert flask.session.accessed\n        assert flask.session.modified\n        return \"value set\"\n\n    @app.route(\"/get\")\n    def get():\n        assert not flask.session.accessed\n        assert not flask.session.modified\n        v = flask.session.get(\"value\", \"None\")\n        assert flask.session.accessed\n        assert not flask.session.modified\n        return v\n\n    assert client.post(\"/set\", data={\"value\": \"42\"}).data == b\"value set\"\n    assert client.get(\"/get\").data == b\"42\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_path_test_session_using_application_root": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_path_test_session_using_application_root", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 257, "end_line": 288, "span_ids": ["test_session_path", "test_session_using_application_root"], "tokens": 229}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_path(app, client):\n    app.config.update(APPLICATION_ROOT=\"/foo\")\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"testing\"] = 42\n        return \"Hello World\"\n\n    rv = client.get(\"/\", \"http://example.com:8080/foo\")\n    assert \"path=/foo\" in rv.headers[\"set-cookie\"].lower()\n\n\ndef test_session_using_application_root(app, client):\n    class PrefixPathMiddleware:\n        def __init__(self, app, prefix):\n            self.app = app\n            self.prefix = prefix\n\n        def __call__(self, environ, start_response):\n            environ[\"SCRIPT_NAME\"] = self.prefix\n            return self.app(environ, start_response)\n\n    app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, \"/bar\")\n    app.config.update(APPLICATION_ROOT=\"/bar\")\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"testing\"] = 42\n        return \"Hello World\"\n\n    rv = client.get(\"/\", \"http://example.com:8080/\")\n    assert \"path=/bar\" in rv.headers[\"set-cookie\"].lower()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_using_session_settings_test_session_using_session_settings.assert_partitioned_in_c_11": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_using_session_settings_test_session_using_session_settings.assert_partitioned_in_c_11", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 291, "end_line": 331, "span_ids": ["test_session_using_session_settings"], "tokens": 309}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_using_session_settings(app, client):\n    app.config.update(\n        SERVER_NAME=\"www.example.com:8080\",\n        APPLICATION_ROOT=\"/test\",\n        SESSION_COOKIE_DOMAIN=\".example.com\",\n        SESSION_COOKIE_HTTPONLY=False,\n        SESSION_COOKIE_SECURE=True,\n        SESSION_COOKIE_PARTITIONED=True,\n        SESSION_COOKIE_SAMESITE=\"Lax\",\n        SESSION_COOKIE_PATH=\"/\",\n    )\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"testing\"] = 42\n        return \"Hello World\"\n\n    @app.route(\"/clear\")\n    def clear():\n        flask.session.pop(\"testing\", None)\n        return \"Goodbye World\"\n\n    rv = client.get(\"/\", \"http://www.example.com:8080/test/\")\n    cookie = rv.headers[\"set-cookie\"].lower()\n    # or condition for Werkzeug < 2.3\n    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n    assert \"path=/\" in cookie\n    assert \"secure\" in cookie\n    assert \"httponly\" not in cookie\n    assert \"samesite\" in cookie\n    assert \"partitioned\" in cookie\n\n    rv = client.get(\"/clear\", \"http://www.example.com:8080/test/\")\n    cookie = rv.headers[\"set-cookie\"].lower()\n    assert \"session=;\" in cookie\n    # or condition for Werkzeug < 2.3\n    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n    assert \"path=/\" in cookie\n    assert \"secure\" in cookie\n    assert \"samesite\" in cookie\n    assert \"partitioned\" in cookie", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_using_samesite_attribute_test_session_using_samesite_attribute": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_using_samesite_attribute_test_session_using_samesite_attribute", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 334, "end_line": 358, "span_ids": ["test_session_using_samesite_attribute"], "tokens": 185}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_using_samesite_attribute(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.session[\"testing\"] = 42\n        return \"Hello World\"\n\n    app.config.update(SESSION_COOKIE_SAMESITE=\"invalid\")\n\n    with pytest.raises(ValueError):\n        client.get(\"/\")\n\n    app.config.update(SESSION_COOKIE_SAMESITE=None)\n    rv = client.get(\"/\")\n    cookie = rv.headers[\"set-cookie\"].lower()\n    assert \"samesite\" not in cookie\n\n    app.config.update(SESSION_COOKIE_SAMESITE=\"Strict\")\n    rv = client.get(\"/\")\n    cookie = rv.headers[\"set-cookie\"].lower()\n    assert \"samesite=strict\" in cookie\n\n    app.config.update(SESSION_COOKIE_SAMESITE=\"Lax\")\n    rv = client.get(\"/\")\n    cookie = rv.headers[\"set-cookie\"].lower()\n    assert \"samesite=lax\" in cookie", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_missing_session_test_missing_session": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_missing_session_test_missing_session", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 361, "end_line": 371, "span_ids": ["test_missing_session"], "tokens": 105}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_missing_session(app):\n    app.secret_key = None\n\n    def expect_exception(f, *args, **kwargs):\n        e = pytest.raises(RuntimeError, f, *args, **kwargs)\n        assert e.value.args and \"session is unavailable\" in e.value.args[0]\n\n    with app.test_request_context():\n        assert flask.session.get(\"missing_key\") is None\n        expect_exception(flask.session.__setitem__, \"foo\", 42)\n        expect_exception(flask.session.pop, \"foo\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_secret_key_fallbacks_test_session_secret_key_fallbacks.assert_client_get_json__4": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_secret_key_fallbacks_test_session_secret_key_fallbacks.assert_client_get_json__4", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 374, "end_line": 399, "span_ids": ["test_session_secret_key_fallbacks"], "tokens": 202}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_secret_key_fallbacks(app, client) -> None:\n    @app.post(\"/\")\n    def set_session() -> str:\n        flask.session[\"a\"] = 1\n        return \"\"\n\n    @app.get(\"/\")\n    def get_session() -> dict[str, t.Any]:\n        return dict(flask.session)\n\n    # Set session with initial secret key, and two valid expiring keys\n    app.secret_key, app.config[\"SECRET_KEY_FALLBACKS\"] = (\n        \"0 key\",\n        [\"-1 key\", \"-2 key\"],\n    )\n    client.post()\n    assert client.get().json == {\"a\": 1}\n    # Change secret key, session can't be loaded and appears empty\n    app.secret_key = \"? key\"\n    assert client.get().json == {}\n    # Rotate the valid keys, session can be loaded\n    app.secret_key, app.config[\"SECRET_KEY_FALLBACKS\"] = (\n        \"+1 key\",\n        [\"0 key\", \"-1 key\"],\n    )\n    assert client.get().json == {\"a\": 1}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_expiration_test_session_expiration.assert_match_is_None": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_expiration_test_session_expiration.assert_match_is_None", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 402, "end_line": 431, "span_ids": ["test_session_expiration"], "tokens": 189}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_expiration(app, client):\n    permanent = True\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"test\"] = 42\n        flask.session.permanent = permanent\n        return \"\"\n\n    @app.route(\"/test\")\n    def test():\n        return str(flask.session.permanent)\n\n    rv = client.get(\"/\")\n    assert \"set-cookie\" in rv.headers\n    match = re.search(r\"(?i)\\bexpires=([^;]+)\", rv.headers[\"set-cookie\"])\n    expires = parse_date(match.group())\n    expected = datetime.now(timezone.utc) + app.permanent_session_lifetime\n    assert expires.year == expected.year\n    assert expires.month == expected.month\n    assert expires.day == expected.day\n\n    rv = client.get(\"/test\")\n    assert rv.data == b\"True\"\n\n    permanent = False\n    rv = client.get(\"/\")\n    assert \"set-cookie\" in rv.headers\n    match = re.search(r\"\\bexpires=([^;]+)\", rv.headers[\"set-cookie\"])\n    assert match is None", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_stored_last_test_session_special_types.dump_session_contents": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_stored_last_test_session_special_types.dump_session_contents", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 434, "end_line": 462, "span_ids": ["test_session_special_types", "test_session_stored_last"], "tokens": 236}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_stored_last(app, client):\n    @app.after_request\n    def modify_session(response):\n        flask.session[\"foo\"] = 42\n        return response\n\n    @app.route(\"/\")\n    def dump_session_contents():\n        return repr(flask.session.get(\"foo\"))\n\n    assert client.get(\"/\").data == b\"None\"\n    assert client.get(\"/\").data == b\"42\"\n\n\ndef test_session_special_types(app, client):\n    now = datetime.now(timezone.utc).replace(microsecond=0)\n    the_uuid = uuid.uuid4()\n\n    @app.route(\"/\")\n    def dump_session_contents():\n        flask.session[\"t\"] = (1, 2, 3)\n        flask.session[\"b\"] = b\"\\xff\"\n        flask.session[\"m\"] = Markup(\"<html>\")\n        flask.session[\"u\"] = the_uuid\n        flask.session[\"d\"] = now\n        flask.session[\"t_tag\"] = {\" t\": \"not-a-tuple\"}\n        flask.session[\"di_t_tag\"] = {\" t__\": \"not-a-tuple\"}\n        flask.session[\"di_tag\"] = {\" di\": \"not-a-dict\"}\n        return \"\", 204\n    # ... other code", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_special_types.with_client__test_session_special_types.with_client_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_special_types.with_client__test_session_special_types.with_client_", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 464, "end_line": 476, "span_ids": ["test_session_special_types"], "tokens": 155}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_special_types(app, client):\n    # ... other code\n\n    with client:\n        client.get(\"/\")\n        s = flask.session\n        assert s[\"t\"] == (1, 2, 3)\n        assert type(s[\"b\"]) is bytes  # noqa: E721\n        assert s[\"b\"] == b\"\\xff\"\n        assert type(s[\"m\"]) is Markup  # noqa: E721\n        assert s[\"m\"] == Markup(\"<html>\")\n        assert s[\"u\"] == the_uuid\n        assert s[\"d\"] == now\n        assert s[\"t_tag\"] == {\" t\": \"not-a-tuple\"}\n        assert s[\"di_t_tag\"] == {\" t__\": \"not-a-tuple\"}\n        assert s[\"di_tag\"] == {\" di\": \"not-a-dict\"}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_cookie_setting_test_session_cookie_setting.run_test_expect_header_Fa_3": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_cookie_setting_test_session_cookie_setting.run_test_expect_header_Fa_3", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 479, "end_line": 517, "span_ids": ["test_session_cookie_setting"], "tokens": 274}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_cookie_setting(app):\n    is_permanent = True\n\n    @app.route(\"/bump\")\n    def bump():\n        rv = flask.session[\"foo\"] = flask.session.get(\"foo\", 0) + 1\n        flask.session.permanent = is_permanent\n        return str(rv)\n\n    @app.route(\"/read\")\n    def read():\n        return str(flask.session.get(\"foo\", 0))\n\n    def run_test(expect_header):\n        with app.test_client() as c:\n            assert c.get(\"/bump\").data == b\"1\"\n            assert c.get(\"/bump\").data == b\"2\"\n            assert c.get(\"/bump\").data == b\"3\"\n\n            rv = c.get(\"/read\")\n            set_cookie = rv.headers.get(\"set-cookie\")\n            assert (set_cookie is not None) == expect_header\n            assert rv.data == b\"3\"\n\n    is_permanent = True\n    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = True\n    run_test(expect_header=True)\n\n    is_permanent = True\n    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = False\n    run_test(expect_header=False)\n\n    is_permanent = False\n    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = True\n    run_test(expect_header=False)\n\n    is_permanent = False\n    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = False\n    run_test(expect_header=False)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_vary_cookie_test_session_vary_cookie.expect_no_vary_header_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_vary_cookie_test_session_vary_cookie.expect_no_vary_header_", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 520, "end_line": 578, "span_ids": ["test_session_vary_cookie"], "tokens": 340}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_vary_cookie(app, client):\n    @app.route(\"/set\")\n    def set_session():\n        flask.session[\"test\"] = \"test\"\n        return \"\"\n\n    @app.route(\"/get\")\n    def get():\n        return flask.session.get(\"test\")\n\n    @app.route(\"/getitem\")\n    def getitem():\n        return flask.session[\"test\"]\n\n    @app.route(\"/setdefault\")\n    def setdefault():\n        return flask.session.setdefault(\"test\", \"default\")\n\n    @app.route(\"/clear\")\n    def clear():\n        flask.session.clear()\n        return \"\"\n\n    @app.route(\"/vary-cookie-header-set\")\n    def vary_cookie_header_set():\n        response = flask.Response()\n        response.vary.add(\"Cookie\")\n        flask.session[\"test\"] = \"test\"\n        return response\n\n    @app.route(\"/vary-header-set\")\n    def vary_header_set():\n        response = flask.Response()\n        response.vary.update((\"Accept-Encoding\", \"Accept-Language\"))\n        flask.session[\"test\"] = \"test\"\n        return response\n\n    @app.route(\"/no-vary-header\")\n    def no_vary_header():\n        return \"\"\n\n    def expect(path, header_value=\"Cookie\"):\n        rv = client.get(path)\n\n        if header_value:\n            # The 'Vary' key should exist in the headers only once.\n            assert len(rv.headers.get_all(\"Vary\")) == 1\n            assert rv.headers[\"Vary\"] == header_value\n        else:\n            assert \"Vary\" not in rv.headers\n\n    expect(\"/set\")\n    expect(\"/get\")\n    expect(\"/getitem\")\n    expect(\"/setdefault\")\n    expect(\"/clear\")\n    expect(\"/vary-cookie-header-set\")\n    expect(\"/vary-header-set\", \"Accept-Encoding, Accept-Language, Cookie\")\n    expect(\"/no-vary-header\", None)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_refresh_vary_test_flashes": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_session_refresh_vary_test_flashes", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 581, "end_line": 604, "span_ids": ["test_flashes", "test_session_refresh_vary"], "tokens": 158}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_refresh_vary(app, client):\n    @app.get(\"/login\")\n    def login():\n        flask.session[\"user_id\"] = 1\n        flask.session.permanent = True\n        return \"\"\n\n    @app.get(\"/ignored\")\n    def ignored():\n        return \"\"\n\n    rv = client.get(\"/login\")\n    assert rv.headers[\"Vary\"] == \"Cookie\"\n    rv = client.get(\"/ignored\")\n    assert rv.headers[\"Vary\"] == \"Cookie\"\n\n\ndef test_flashes(app, req_ctx):\n    assert not flask.session.modified\n    flask.flash(\"Zap\")\n    flask.session.modified = False\n    flask.flash(\"Zip\")\n    assert flask.session.modified\n    assert list(flask.get_flashed_messages()) == [\"Zap\", \"Zip\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_test.client_get_test_filters_7": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_test.client_get_test_filters_7", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 607, "end_line": 685, "span_ids": ["test"], "tokens": 504}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_extended_flashing(app):\n    # Be sure app.testing=True below, else tests can fail silently.\n    #\n    # Specifically, if app.testing is not set to True, the AssertionErrors\n    # in the view functions will cause a 500 response to the test client\n    # instead of propagating exceptions.\n\n    @app.route(\"/\")\n    def index():\n        flask.flash(\"Hello World\")\n        flask.flash(\"Hello World\", \"error\")\n        flask.flash(Markup(\"<em>Testing</em>\"), \"warning\")\n        return \"\"\n\n    @app.route(\"/test/\")\n    def test():\n        messages = flask.get_flashed_messages()\n        assert list(messages) == [\n            \"Hello World\",\n            \"Hello World\",\n            Markup(\"<em>Testing</em>\"),\n        ]\n        return \"\"\n\n    @app.route(\"/test_with_categories/\")\n    def test_with_categories():\n        messages = flask.get_flashed_messages(with_categories=True)\n        assert len(messages) == 3\n        assert list(messages) == [\n            (\"message\", \"Hello World\"),\n            (\"error\", \"Hello World\"),\n            (\"warning\", Markup(\"<em>Testing</em>\")),\n        ]\n        return \"\"\n\n    @app.route(\"/test_filter/\")\n    def test_filter():\n        messages = flask.get_flashed_messages(\n            category_filter=[\"message\"], with_categories=True\n        )\n        assert list(messages) == [(\"message\", \"Hello World\")]\n        return \"\"\n\n    @app.route(\"/test_filters/\")\n    def test_filters():\n        messages = flask.get_flashed_messages(\n            category_filter=[\"message\", \"warning\"], with_categories=True\n        )\n        assert list(messages) == [\n            (\"message\", \"Hello World\"),\n            (\"warning\", Markup(\"<em>Testing</em>\")),\n        ]\n        return \"\"\n\n    @app.route(\"/test_filters_without_returning_categories/\")\n    def test_filters2():\n        messages = flask.get_flashed_messages(category_filter=[\"message\", \"warning\"])\n        assert len(messages) == 2\n        assert messages[0] == \"Hello World\"\n        assert messages[1] == Markup(\"<em>Testing</em>\")\n        return \"\"\n\n    # Create new test client on each test to clean flashed messages.\n\n    client = app.test_client()\n    client.get(\"/\")\n    client.get(\"/test_with_categories/\")\n\n    client = app.test_client()\n    client.get(\"/\")\n    client.get(\"/test_filter/\")\n\n    client = app.test_client()\n    client.get(\"/\")\n    client.get(\"/test_filters/\")\n\n    client = app.test_client()\n    client.get(\"/\")\n    client.get(\"/test_filters_without_returning_categories/\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_processing_test_request_processing": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_processing_test_request_processing", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 688, "end_line": 710, "span_ids": ["test_request_processing"], "tokens": 133}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_request_processing(app, client):\n    evts = []\n\n    @app.before_request\n    def before_request():\n        evts.append(\"before\")\n\n    @app.after_request\n    def after_request(response):\n        response.data += b\"|after\"\n        evts.append(\"after\")\n        return response\n\n    @app.route(\"/\")\n    def index():\n        assert \"before\" in evts\n        assert \"after\" not in evts\n        return \"request\"\n\n    assert \"after\" not in evts\n    rv = client.get(\"/\").data\n    assert \"after\" in evts\n    assert rv == b\"request|after\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_preprocessing_early_return_test_request_preprocessing_early_return": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_request_preprocessing_early_return_test_request_preprocessing_early_return", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 713, "end_line": 737, "span_ids": ["test_request_preprocessing_early_return"], "tokens": 135}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_request_preprocessing_early_return(app, client):\n    evts = []\n\n    @app.before_request\n    def before_request1():\n        evts.append(1)\n\n    @app.before_request\n    def before_request2():\n        evts.append(2)\n        return \"hello\"\n\n    @app.before_request\n    def before_request3():\n        evts.append(3)\n        return \"bye\"\n\n    @app.route(\"/\")\n    def index():\n        evts.append(\"index\")\n        return \"damnit\"\n\n    rv = client.get(\"/\").data.strip()\n    assert rv == b\"hello\"\n    assert evts == [1, 2]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_after_request_processing_test_teardown_request_handler_debug_mode": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_after_request_processing_test_teardown_request_handler_debug_mode", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 740, "end_line": 788, "span_ids": ["test_after_request_processing", "test_teardown_request_handler", "test_teardown_request_handler_debug_mode"], "tokens": 256}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_after_request_processing(app, client):\n    @app.route(\"/\")\n    def index():\n        @flask.after_this_request\n        def foo(response):\n            response.headers[\"X-Foo\"] = \"a header\"\n            return response\n\n        return \"Test\"\n\n    resp = client.get(\"/\")\n    assert resp.status_code == 200\n    assert resp.headers[\"X-Foo\"] == \"a header\"\n\n\ndef test_teardown_request_handler(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_request(exc):\n        called.append(True)\n        return \"Ignored\"\n\n    @app.route(\"/\")\n    def root():\n        return \"Response\"\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 200\n    assert b\"Response\" in rv.data\n    assert len(called) == 1\n\n\ndef test_teardown_request_handler_debug_mode(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_request(exc):\n        called.append(True)\n        return \"Ignored\"\n\n    @app.route(\"/\")\n    def root():\n        return \"Response\"\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 200\n    assert b\"Response\" in rv.data\n    assert len(called) == 1", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_teardown_request_handler_error_test_teardown_request_handler_error.assert_len_called_2": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_teardown_request_handler_error_test_teardown_request_handler_error.assert_len_called_2", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 791, "end_line": 826, "span_ids": ["test_teardown_request_handler_error"], "tokens": 210}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_teardown_request_handler_error(app, client):\n    called = []\n    app.testing = False\n\n    @app.teardown_request\n    def teardown_request1(exc):\n        assert type(exc) is ZeroDivisionError\n        called.append(True)\n        # This raises a new error and blows away sys.exc_info(), so we can\n        # test that all teardown_requests get passed the same original\n        # exception.\n        try:\n            raise TypeError()\n        except Exception:\n            pass\n\n    @app.teardown_request\n    def teardown_request2(exc):\n        assert type(exc) is ZeroDivisionError\n        called.append(True)\n        # This raises a new error and blows away sys.exc_info(), so we can\n        # test that all teardown_requests get passed the same original\n        # exception.\n        try:\n            raise TypeError()\n        except Exception:\n            pass\n\n    @app.route(\"/\")\n    def fails():\n        raise ZeroDivisionError\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 500\n    assert b\"Internal Server Error\" in rv.data\n    assert len(called) == 2", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_before_after_request_order_test_before_after_request_order.assert_called_1_2_3": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_before_after_request_order_test_before_after_request_order.assert_called_1_2_3", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 829, "end_line": 864, "span_ids": ["test_before_after_request_order"], "tokens": 161}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_before_after_request_order(app, client):\n    called = []\n\n    @app.before_request\n    def before1():\n        called.append(1)\n\n    @app.before_request\n    def before2():\n        called.append(2)\n\n    @app.after_request\n    def after1(response):\n        called.append(4)\n        return response\n\n    @app.after_request\n    def after2(response):\n        called.append(3)\n        return response\n\n    @app.teardown_request\n    def finish1(exc):\n        called.append(6)\n\n    @app.teardown_request\n    def finish2(exc):\n        called.append(5)\n\n    @app.route(\"/\")\n    def index():\n        return \"42\"\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"42\"\n    assert called == [1, 2, 3, 4, 5, 6]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_error_handling_test_error_handling.assert_b_forbidden_rv": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_error_handling_test_error_handling.assert_b_forbidden_rv", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 867, "end_line": 902, "span_ids": ["test_error_handling"], "tokens": 186}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_error_handling(app, client):\n    app.testing = False\n\n    @app.errorhandler(404)\n    def not_found(e):\n        return \"not found\", 404\n\n    @app.errorhandler(500)\n    def internal_server_error(e):\n        return \"internal server error\", 500\n\n    @app.errorhandler(Forbidden)\n    def forbidden(e):\n        return \"forbidden\", 403\n\n    @app.route(\"/\")\n    def index():\n        flask.abort(404)\n\n    @app.route(\"/error\")\n    def error():\n        raise ZeroDivisionError\n\n    @app.route(\"/forbidden\")\n    def error2():\n        flask.abort(403)\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 404\n    assert rv.data == b\"not found\"\n    rv = client.get(\"/error\")\n    assert rv.status_code == 500\n    assert b\"internal server error\" == rv.data\n    rv = client.get(\"/forbidden\")\n    assert rv.status_code == 403\n    assert b\"forbidden\" == rv.data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_error_handling_processing_test_error_handling_processing": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_error_handling_processing_test_error_handling_processing", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 905, "end_line": 923, "span_ids": ["test_error_handling_processing"], "tokens": 110}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_error_handling_processing(app, client):\n    app.testing = False\n\n    @app.errorhandler(500)\n    def internal_server_error(e):\n        return \"internal server error\", 500\n\n    @app.route(\"/\")\n    def broken_func():\n        raise ZeroDivisionError\n\n    @app.after_request\n    def after_request(resp):\n        resp.mimetype = \"text/x-special\"\n        return resp\n\n    resp = client.get(\"/\")\n    assert resp.mimetype == \"text/x-special\"\n    assert resp.data == b\"internal server error\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_baseexception_error_handling_test_user_error_handling": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_baseexception_error_handling_test_user_error_handling", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 926, "end_line": 964, "span_ids": ["test_baseexception_error_handling", "test_before_request_and_routing_errors", "test_user_error_handling"], "tokens": 194}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_baseexception_error_handling(app, client):\n    app.testing = False\n\n    @app.route(\"/\")\n    def broken_func():\n        raise KeyboardInterrupt()\n\n    with pytest.raises(KeyboardInterrupt):\n        client.get(\"/\")\n\n\ndef test_before_request_and_routing_errors(app, client):\n    @app.before_request\n    def attach_something():\n        flask.g.something = \"value\"\n\n    @app.errorhandler(404)\n    def return_something(error):\n        return flask.g.something, 404\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 404\n    assert rv.data == b\"value\"\n\n\ndef test_user_error_handling(app, client):\n    class MyException(Exception):\n        pass\n\n    @app.errorhandler(MyException)\n    def handle_my_exception(e):\n        assert isinstance(e, MyException)\n        return \"42\"\n\n    @app.route(\"/\")\n    def index():\n        raise MyException()\n\n    assert client.get(\"/\").data == b\"42\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_http_error_subclass_handling_test_http_error_subclass_handling.assert_client_get_3_d": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_http_error_subclass_handling_test_http_error_subclass_handling.assert_client_get_3_d", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 967, "end_line": 996, "span_ids": ["test_http_error_subclass_handling"], "tokens": 167}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_http_error_subclass_handling(app, client):\n    class ForbiddenSubclass(Forbidden):\n        pass\n\n    @app.errorhandler(ForbiddenSubclass)\n    def handle_forbidden_subclass(e):\n        assert isinstance(e, ForbiddenSubclass)\n        return \"banana\"\n\n    @app.errorhandler(403)\n    def handle_403(e):\n        assert not isinstance(e, ForbiddenSubclass)\n        assert isinstance(e, Forbidden)\n        return \"apple\"\n\n    @app.route(\"/1\")\n    def index1():\n        raise ForbiddenSubclass()\n\n    @app.route(\"/2\")\n    def index2():\n        flask.abort(403)\n\n    @app.route(\"/3\")\n    def index3():\n        raise Forbidden()\n\n    assert client.get(\"/1\").data == b\"banana\"\n    assert client.get(\"/2\").data == b\"apple\"\n    assert client.get(\"/3\").data == b\"apple\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_errorhandler_precedence_test_errorhandler_precedence.assert_rv_data_b_E2_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_errorhandler_precedence_test_errorhandler_precedence.assert_rv_data_b_E2_", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 999, "end_line": 1029, "span_ids": ["test_errorhandler_precedence"], "tokens": 132}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_errorhandler_precedence(app, client):\n    class E1(Exception):\n        pass\n\n    class E2(Exception):\n        pass\n\n    class E3(E1, E2):\n        pass\n\n    @app.errorhandler(E2)\n    def handle_e2(e):\n        return \"E2\"\n\n    @app.errorhandler(Exception)\n    def handle_exception(e):\n        return \"Exception\"\n\n    @app.route(\"/E1\")\n    def raise_e1():\n        raise E1\n\n    @app.route(\"/E3\")\n    def raise_e3():\n        raise E3\n\n    rv = client.get(\"/E1\")\n    assert rv.data == b\"Exception\"\n\n    rv = client.get(\"/E3\")\n    assert rv.data == b\"E2\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_trap_bad_request_key_error_test_trap_bad_request_key_error.if_expect_abort_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_trap_bad_request_key_error_test_trap_bad_request_key_error.if_expect_abort_", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1032, "end_line": 1064, "span_ids": ["test_trap_bad_request_key_error"], "tokens": 235}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    (\"debug\", \"trap\", \"expect_key\", \"expect_abort\"),\n    [(False, None, True, True), (True, None, False, True), (False, True, False, False)],\n)\ndef test_trap_bad_request_key_error(app, client, debug, trap, expect_key, expect_abort):\n    app.config[\"DEBUG\"] = debug\n    app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = trap\n\n    @app.route(\"/key\")\n    def fail():\n        flask.request.form[\"missing_key\"]\n\n    @app.route(\"/abort\")\n    def allow_abort():\n        flask.abort(400)\n\n    if expect_key:\n        rv = client.get(\"/key\")\n        assert rv.status_code == 400\n        assert b\"missing_key\" not in rv.data\n    else:\n        with pytest.raises(KeyError) as exc_info:\n            client.get(\"/key\")\n\n        assert exc_info.errisinstance(BadRequest)\n        assert \"missing_key\" in exc_info.value.get_description()\n\n    if expect_abort:\n        rv = client.get(\"/abort\")\n        assert rv.status_code == 400\n    else:\n        with pytest.raises(BadRequest):\n            client.get(\"/abort\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_trapping_of_all_http_exceptions_test_error_handler_after_processor_error.for__trigger_in_before_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_trapping_of_all_http_exceptions_test_error_handler_after_processor_error.for__trigger_in_before_", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1067, "end_line": 1104, "span_ids": ["test_error_handler_after_processor_error", "test_trapping_of_all_http_exceptions"], "tokens": 189}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_trapping_of_all_http_exceptions(app, client):\n    app.config[\"TRAP_HTTP_EXCEPTIONS\"] = True\n\n    @app.route(\"/fail\")\n    def fail():\n        flask.abort(404)\n\n    with pytest.raises(NotFound):\n        client.get(\"/fail\")\n\n\ndef test_error_handler_after_processor_error(app, client):\n    app.testing = False\n\n    @app.before_request\n    def before_request():\n        if _trigger == \"before\":\n            raise ZeroDivisionError\n\n    @app.after_request\n    def after_request(response):\n        if _trigger == \"after\":\n            raise ZeroDivisionError\n\n        return response\n\n    @app.route(\"/\")\n    def index():\n        return \"Foo\"\n\n    @app.errorhandler(500)\n    def internal_server_error(e):\n        return \"Hello Server Error\", 500\n\n    for _trigger in \"before\", \"after\":\n        rv = client.get(\"/\")\n        assert rv.status_code == 500\n        assert rv.data == b\"Hello Server Error\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_enctype_debug_helper_test_enctype_debug_helper": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_enctype_debug_helper_test_enctype_debug_helper", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1107, "end_line": 1119, "span_ids": ["test_enctype_debug_helper"], "tokens": 108}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_enctype_debug_helper(app, client):\n    from flask.debughelpers import DebugFilesKeyError\n\n    app.debug = True\n\n    @app.route(\"/fail\", methods=[\"POST\"])\n    def index():\n        return flask.request.files[\"foo\"].filename\n\n    with pytest.raises(DebugFilesKeyError) as e:\n        client.post(\"/fail\", data={\"foo\": \"index.txt\"})\n    assert \"no file contents were transmitted\" in str(e.value)\n    assert \"This was submitted: 'index.txt'\" in str(e.value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_response_types_test_response_types.assert_rv_status_code__25": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_response_types_test_response_types.assert_rv_status_code__25", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1122, "end_line": 1213, "span_ids": ["test_response_types"], "tokens": 622}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_response_types(app, client):\n    @app.route(\"/text\")\n    def from_text():\n        return \"H\u00e4llo W\u00f6rld\"\n\n    @app.route(\"/bytes\")\n    def from_bytes():\n        return \"H\u00e4llo W\u00f6rld\".encode()\n\n    @app.route(\"/full_tuple\")\n    def from_full_tuple():\n        return (\n            \"Meh\",\n            400,\n            {\"X-Foo\": \"Testing\", \"Content-Type\": \"text/plain; charset=utf-8\"},\n        )\n\n    @app.route(\"/text_headers\")\n    def from_text_headers():\n        return \"Hello\", {\"X-Foo\": \"Test\", \"Content-Type\": \"text/plain; charset=utf-8\"}\n\n    @app.route(\"/text_status\")\n    def from_text_status():\n        return \"Hi, status!\", 400\n\n    @app.route(\"/response_headers\")\n    def from_response_headers():\n        return (\n            flask.Response(\n                \"Hello world\", 404, {\"Content-Type\": \"text/html\", \"X-Foo\": \"Baz\"}\n            ),\n            {\"Content-Type\": \"text/plain\", \"X-Foo\": \"Bar\", \"X-Bar\": \"Foo\"},\n        )\n\n    @app.route(\"/response_status\")\n    def from_response_status():\n        return app.response_class(\"Hello world\", 400), 500\n\n    @app.route(\"/wsgi\")\n    def from_wsgi():\n        return NotFound()\n\n    @app.route(\"/dict\")\n    def from_dict():\n        return {\"foo\": \"bar\"}, 201\n\n    @app.route(\"/list\")\n    def from_list():\n        return [\"foo\", \"bar\"], 201\n\n    assert client.get(\"/text\").data == \"H\u00e4llo W\u00f6rld\".encode()\n    assert client.get(\"/bytes\").data == \"H\u00e4llo W\u00f6rld\".encode()\n\n    rv = client.get(\"/full_tuple\")\n    assert rv.data == b\"Meh\"\n    assert rv.headers[\"X-Foo\"] == \"Testing\"\n    assert rv.status_code == 400\n    assert rv.mimetype == \"text/plain\"\n\n    rv = client.get(\"/text_headers\")\n    assert rv.data == b\"Hello\"\n    assert rv.headers[\"X-Foo\"] == \"Test\"\n    assert rv.status_code == 200\n    assert rv.mimetype == \"text/plain\"\n\n    rv = client.get(\"/text_status\")\n    assert rv.data == b\"Hi, status!\"\n    assert rv.status_code == 400\n    assert rv.mimetype == \"text/html\"\n\n    rv = client.get(\"/response_headers\")\n    assert rv.data == b\"Hello world\"\n    assert rv.content_type == \"text/plain\"\n    assert rv.headers.getlist(\"X-Foo\") == [\"Bar\"]\n    assert rv.headers[\"X-Bar\"] == \"Foo\"\n    assert rv.status_code == 404\n\n    rv = client.get(\"/response_status\")\n    assert rv.data == b\"Hello world\"\n    assert rv.status_code == 500\n\n    rv = client.get(\"/wsgi\")\n    assert b\"Not Found\" in rv.data\n    assert rv.status_code == 404\n\n    rv = client.get(\"/dict\")\n    assert rv.json == {\"foo\": \"bar\"}\n    assert rv.status_code == 201\n\n    rv = client.get(\"/list\")\n    assert rv.json == [\"foo\", \"bar\"]\n    assert rv.status_code == 201", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_response_type_errors_test_response_type_errors.with_pytest_raises_TypeEr_4": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_response_type_errors_test_response_type_errors.with_pytest_raises_TypeEr_4", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1216, "end_line": 1262, "span_ids": ["test_response_type_errors"], "tokens": 233}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_response_type_errors():\n    app = flask.Flask(__name__)\n    app.testing = True\n\n    @app.route(\"/none\")\n    def from_none():\n        pass\n\n    @app.route(\"/small_tuple\")\n    def from_small_tuple():\n        return (\"Hello\",)\n\n    @app.route(\"/large_tuple\")\n    def from_large_tuple():\n        return \"Hello\", 234, {\"X-Foo\": \"Bar\"}, \"???\"\n\n    @app.route(\"/bad_type\")\n    def from_bad_type():\n        return True\n\n    @app.route(\"/bad_wsgi\")\n    def from_bad_wsgi():\n        return lambda: None\n\n    c = app.test_client()\n\n    with pytest.raises(TypeError) as e:\n        c.get(\"/none\")\n\n    assert \"returned None\" in str(e.value)\n    assert \"from_none\" in str(e.value)\n\n    with pytest.raises(TypeError) as e:\n        c.get(\"/small_tuple\")\n\n    assert \"tuple must have the form\" in str(e.value)\n\n    with pytest.raises(TypeError):\n        c.get(\"/large_tuple\")\n\n    with pytest.raises(TypeError) as e:\n        c.get(\"/bad_type\")\n\n    assert \"it was a bool\" in str(e.value)\n\n    with pytest.raises(TypeError):\n        c.get(\"/bad_wsgi\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_make_response_test_make_response": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_make_response_test_make_response", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1265, "end_line": 1284, "span_ids": ["test_make_response"], "tokens": 163}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_make_response(app, req_ctx):\n    rv = flask.make_response()\n    assert rv.status_code == 200\n    assert rv.data == b\"\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(\"Awesome\")\n    assert rv.status_code == 200\n    assert rv.data == b\"Awesome\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(\"W00t\", 404)\n    assert rv.status_code == 404\n    assert rv.data == b\"W00t\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(c for c in \"Hello\")\n    assert rv.status_code == 200\n    assert rv.data == b\"Hello\"\n    assert rv.mimetype == \"text/html\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_make_response_with_response_instance_test_make_response_with_response_instance": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_make_response_with_response_instance_test_make_response_with_response_instance", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1287, "end_line": 1305, "span_ids": ["test_make_response_with_response_instance"], "tokens": 180}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_make_response_with_response_instance(app, req_ctx):\n    rv = flask.make_response(flask.jsonify({\"msg\": \"W00t\"}), 400)\n    assert rv.status_code == 400\n    assert rv.data == b'{\"msg\":\"W00t\"}\\n'\n    assert rv.mimetype == \"application/json\"\n\n    rv = flask.make_response(flask.Response(\"\"), 400)\n    assert rv.status_code == 400\n    assert rv.data == b\"\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(\n        flask.Response(\"\", headers={\"Content-Type\": \"text/html\"}),\n        400,\n        [(\"X-Foo\", \"bar\")],\n    )\n    assert rv.status_code == 400\n    assert rv.headers[\"Content-Type\"] == \"text/html\"\n    assert rv.headers[\"X-Foo\"] == \"bar\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_jsonify_no_prettyprint_test_url_generation": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_jsonify_no_prettyprint_test_url_generation", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1308, "end_line": 1348, "span_ids": ["test_json_dump_dataclass", "test_jsonify_args_and_kwargs_check", "test_jsonify_mimetype", "test_jsonify_no_prettyprint", "test_url_generation"], "tokens": 350}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"compact\", [True, False])\ndef test_jsonify_no_prettyprint(app, compact):\n    app.json.compact = compact\n    rv = app.json.response({\"msg\": {\"submsg\": \"W00t\"}, \"msg2\": \"foobar\"})\n    data = rv.data.strip()\n    assert (b\" \" not in data) is compact\n    assert (b\"\\n\" not in data) is compact\n\n\ndef test_jsonify_mimetype(app, req_ctx):\n    app.json.mimetype = \"application/vnd.api+json\"\n    msg = {\"msg\": {\"submsg\": \"W00t\"}}\n    rv = flask.make_response(flask.jsonify(msg), 200)\n    assert rv.mimetype == \"application/vnd.api+json\"\n\n\ndef test_json_dump_dataclass(app, req_ctx):\n    from dataclasses import make_dataclass\n\n    Data = make_dataclass(\"Data\", [(\"name\", str)])\n    value = app.json.dumps(Data(\"Flask\"))\n    value = app.json.loads(value)\n    assert value == {\"name\": \"Flask\"}\n\n\ndef test_jsonify_args_and_kwargs_check(app, req_ctx):\n    with pytest.raises(TypeError) as e:\n        flask.jsonify(\"fake args\", kwargs=\"fake\")\n    assert \"args or kwargs\" in str(e.value)\n\n\ndef test_url_generation(app, req_ctx):\n    @app.route(\"/hello/<name>\", methods=[\"POST\"])\n    def hello():\n        pass\n\n    assert flask.url_for(\"hello\", name=\"test x\") == \"/hello/test%20x\"\n    assert (\n        flask.url_for(\"hello\", name=\"test x\", _external=True)\n        == \"http://localhost/hello/test%20x\"\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_build_error_handler_test_build_error_handler": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_build_error_handler_test_build_error_handler", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1351, "end_line": 1374, "span_ids": ["test_build_error_handler"], "tokens": 182}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_build_error_handler(app):\n    # Test base case, a URL which results in a BuildError.\n    with app.test_request_context():\n        pytest.raises(BuildError, flask.url_for, \"spam\")\n\n    # Verify the error is re-raised if not the current exception.\n    try:\n        with app.test_request_context():\n            flask.url_for(\"spam\")\n    except BuildError as err:\n        error = err\n    try:\n        raise RuntimeError(\"Test case where BuildError is not current.\")\n    except RuntimeError:\n        pytest.raises(BuildError, app.handle_url_build_error, error, \"spam\", {})\n\n    # Test a custom handler.\n    def handler(error, endpoint, values):\n        # Just a test.\n        return \"/test_handler/\"\n\n    app.url_build_error_handlers.append(handler)\n    with app.test_request_context():\n        assert flask.url_for(\"spam\") == \"/test_handler/\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_build_error_handler_reraise_test_static_folder_with_ending_slash": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_build_error_handler_reraise_test_static_folder_with_ending_slash", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1377, "end_line": 1465, "span_ids": ["test_build_error_handler_reraise", "test_static_files", "test_static_folder_with_ending_slash", "test_static_folder_with_pathlib_path", "test_static_url_empty_path", "test_static_url_empty_path_default", "test_static_url_path", "test_static_url_path_with_ending_slash", "test_url_for_passes_special_values_to_build_error_handler"], "tokens": 624}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_build_error_handler_reraise(app):\n    # Test a custom handler which reraises the BuildError\n    def handler_raises_build_error(error, endpoint, values):\n        raise error\n\n    app.url_build_error_handlers.append(handler_raises_build_error)\n\n    with app.test_request_context():\n        pytest.raises(BuildError, flask.url_for, \"not.existing\")\n\n\ndef test_url_for_passes_special_values_to_build_error_handler(app):\n    @app.url_build_error_handlers.append\n    def handler(error, endpoint, values):\n        assert values == {\n            \"_external\": False,\n            \"_anchor\": None,\n            \"_method\": None,\n            \"_scheme\": None,\n        }\n        return \"handled\"\n\n    with app.test_request_context():\n        flask.url_for(\"/\")\n\n\ndef test_static_files(app, client):\n    rv = client.get(\"/static/index.html\")\n    assert rv.status_code == 200\n    assert rv.data.strip() == b\"<h1>Hello World!</h1>\"\n    with app.test_request_context():\n        assert flask.url_for(\"static\", filename=\"index.html\") == \"/static/index.html\"\n    rv.close()\n\n\ndef test_static_url_path():\n    app = flask.Flask(__name__, static_url_path=\"/foo\")\n    app.testing = True\n    rv = app.test_client().get(\"/foo/index.html\")\n    assert rv.status_code == 200\n    rv.close()\n\n    with app.test_request_context():\n        assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\"\n\n\ndef test_static_url_path_with_ending_slash():\n    app = flask.Flask(__name__, static_url_path=\"/foo/\")\n    app.testing = True\n    rv = app.test_client().get(\"/foo/index.html\")\n    assert rv.status_code == 200\n    rv.close()\n\n    with app.test_request_context():\n        assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\"\n\n\ndef test_static_url_empty_path(app):\n    app = flask.Flask(__name__, static_folder=\"\", static_url_path=\"\")\n    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n    assert rv.status_code == 200\n    rv.close()\n\n\ndef test_static_url_empty_path_default(app):\n    app = flask.Flask(__name__, static_folder=\"\")\n    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n    assert rv.status_code == 200\n    rv.close()\n\n\ndef test_static_folder_with_pathlib_path(app):\n    from pathlib import Path\n\n    app = flask.Flask(__name__, static_folder=Path(\"static\"))\n    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n    assert rv.status_code == 200\n    rv.close()\n\n\ndef test_static_folder_with_ending_slash():\n    app = flask.Flask(__name__, static_folder=\"static/\")\n\n    @app.route(\"/<path:path>\")\n    def catch_all(path):\n        return path\n\n    rv = app.test_client().get(\"/catch/all\")\n    assert rv.data == b\"catch/all\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_static_route_with_host_matching_test_request_locals": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_static_route_with_host_matching_test_request_locals", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1468, "end_line": 1491, "span_ids": ["test_request_locals", "test_static_route_with_host_matching"], "tokens": 234}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_static_route_with_host_matching():\n    app = flask.Flask(__name__, host_matching=True, static_host=\"example.com\")\n    c = app.test_client()\n    rv = c.get(\"http://example.com/static/index.html\")\n    assert rv.status_code == 200\n    rv.close()\n    with app.test_request_context():\n        rv = flask.url_for(\"static\", filename=\"index.html\", _external=True)\n        assert rv == \"http://example.com/static/index.html\"\n    # Providing static_host without host_matching=True should error.\n    with pytest.raises(AssertionError):\n        flask.Flask(__name__, static_host=\"example.com\")\n    # Providing host_matching=True with static_folder\n    # but without static_host should error.\n    with pytest.raises(AssertionError):\n        flask.Flask(__name__, host_matching=True)\n    # Providing host_matching=True without static_host\n    # but with static_folder=None should not error.\n    flask.Flask(__name__, host_matching=True, static_folder=None)\n\n\ndef test_request_locals():\n    assert repr(flask.g) == \"<LocalProxy unbound>\"\n    assert not flask.g", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_server_name_matching_test_server_name_matching.assert_r_text_expect_x": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_server_name_matching_test_server_name_matching.assert_r_text_expect_x", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1494, "end_line": 1533, "span_ids": ["test_server_name_matching"], "tokens": 292}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    (\"subdomain_matching\", \"host_matching\", \"expect_base\", \"expect_abc\", \"expect_xyz\"),\n    [\n        (False, False, \"default\", \"default\", \"default\"),\n        (True, False, \"default\", \"abc\", \"<invalid>\"),\n        (False, True, \"default\", \"abc\", \"default\"),\n    ],\n)\ndef test_server_name_matching(\n    subdomain_matching: bool,\n    host_matching: bool,\n    expect_base: str,\n    expect_abc: str,\n    expect_xyz: str,\n) -> None:\n    app = flask.Flask(\n        __name__,\n        subdomain_matching=subdomain_matching,\n        host_matching=host_matching,\n        static_host=\"example.test\" if host_matching else None,\n    )\n    app.config[\"SERVER_NAME\"] = \"example.test\"\n\n    @app.route(\"/\", defaults={\"name\": \"default\"}, host=\"<name>\")\n    @app.route(\"/\", subdomain=\"<name>\", host=\"<name>.example.test\")\n    def index(name: str) -> str:\n        return name\n\n    client = app.test_client()\n\n    r = client.get(base_url=\"http://example.test\")\n    assert r.text == expect_base\n\n    r = client.get(base_url=\"http://abc.example.test\")\n    assert r.text == expect_abc\n\n    with pytest.warns() if subdomain_matching else nullcontext():\n        r = client.get(base_url=\"http://xyz.other.test\")\n\n    assert r.text == expect_xyz", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_server_name_subdomain_test_server_name_subdomain.assert_rv_data_b_subdo": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_server_name_subdomain_test_server_name_subdomain.assert_rv_data_b_subdo", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1536, "end_line": 1578, "span_ids": ["test_server_name_subdomain"], "tokens": 292}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_server_name_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    client = app.test_client()\n\n    @app.route(\"/\")\n    def index():\n        return \"default\"\n\n    @app.route(\"/\", subdomain=\"foo\")\n    def subdomain():\n        return \"subdomain\"\n\n    app.config[\"SERVER_NAME\"] = \"dev.local:5000\"\n    rv = client.get(\"/\")\n    assert rv.data == b\"default\"\n\n    rv = client.get(\"/\", \"http://dev.local:5000\")\n    assert rv.data == b\"default\"\n\n    rv = client.get(\"/\", \"https://dev.local:5000\")\n    assert rv.data == b\"default\"\n\n    app.config[\"SERVER_NAME\"] = \"dev.local:443\"\n    rv = client.get(\"/\", \"https://dev.local\")\n\n    # Werkzeug 1.0 fixes matching https scheme with 443 port\n    if rv.status_code != 404:\n        assert rv.data == b\"default\"\n\n    app.config[\"SERVER_NAME\"] = \"dev.local\"\n    rv = client.get(\"/\", \"https://dev.local\")\n    assert rv.data == b\"default\"\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\n            \"ignore\", \"Current server name\", UserWarning, \"flask.app\"\n        )\n        rv = client.get(\"/\", \"http://foo.localhost\")\n        assert rv.status_code == 404\n\n    rv = client.get(\"/\", \"http://foo.dev.local\")\n    assert rv.data == b\"subdomain\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_exception_propagation_test_werkzeug_passthrough_errors": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_exception_propagation_test_werkzeug_passthrough_errors", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1581, "end_line": 1613, "span_ids": ["test_exception_propagation", "test_werkzeug_passthrough_errors"], "tokens": 275}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"key\", [\"TESTING\", \"PROPAGATE_EXCEPTIONS\", \"DEBUG\", None])\ndef test_exception_propagation(app, client, key):\n    app.testing = False\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    if key is not None:\n        app.config[key] = True\n\n        with pytest.raises(ZeroDivisionError):\n            client.get(\"/\")\n    else:\n        assert client.get(\"/\").status_code == 500\n\n\n@pytest.mark.parametrize(\"debug\", [True, False])\n@pytest.mark.parametrize(\"use_debugger\", [True, False])\n@pytest.mark.parametrize(\"use_reloader\", [True, False])\n@pytest.mark.parametrize(\"propagate_exceptions\", [None, True, False])\ndef test_werkzeug_passthrough_errors(\n    monkeypatch, debug, use_debugger, use_reloader, propagate_exceptions, app\n):\n    rv = {}\n\n    # Mocks werkzeug.serving.run_simple method\n    def run_simple_mock(*args, **kwargs):\n        rv[\"passthrough_errors\"] = kwargs.get(\"passthrough_errors\")\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    app.config[\"PROPAGATE_EXCEPTIONS\"] = propagate_exceptions\n    app.run(debug=debug, use_debugger=use_debugger, use_reloader=use_reloader)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_url_processors_test_url_processors.assert_client_get_foo_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_url_processors_test_url_processors.assert_client_get_foo_", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1616, "end_line": 1642, "span_ids": ["test_url_processors"], "tokens": 194}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_url_processors(app, client):\n    @app.url_defaults\n    def add_language_code(endpoint, values):\n        if flask.g.lang_code is not None and app.url_map.is_endpoint_expecting(\n            endpoint, \"lang_code\"\n        ):\n            values.setdefault(\"lang_code\", flask.g.lang_code)\n\n    @app.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop(\"lang_code\", None)\n\n    @app.route(\"/<lang_code>/\")\n    def index():\n        return flask.url_for(\"about\")\n\n    @app.route(\"/<lang_code>/about\")\n    def about():\n        return flask.url_for(\"something_else\")\n\n    @app.route(\"/foo\")\n    def something_else():\n        return flask.url_for(\"about\", lang_code=\"en\")\n\n    assert client.get(\"/de/\").data == b\"/de/about\"\n    assert client.get(\"/de/about\").data == b\"/foo\"\n    assert client.get(\"/foo\").data == b\"/en/about\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_inject_blueprint_url_defaults_test_inject_blueprint_url_defaults": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_inject_blueprint_url_defaults_test_inject_blueprint_url_defaults", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1645, "end_line": 1666, "span_ids": ["test_inject_blueprint_url_defaults"], "tokens": 132}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_inject_blueprint_url_defaults(app):\n    bp = flask.Blueprint(\"foo\", __name__, template_folder=\"template\")\n\n    @bp.url_defaults\n    def bp_defaults(endpoint, values):\n        values[\"page\"] = \"login\"\n\n    @bp.route(\"/<page>\")\n    def view(page):\n        pass\n\n    app.register_blueprint(bp)\n\n    values = dict()\n    app.inject_url_defaults(\"foo.view\", values)\n    expected = dict(page=\"login\")\n    assert values == expected\n\n    with app.test_request_context(\"/somepage\"):\n        url = flask.url_for(\"foo.view\")\n    expected = \"/login\"\n    assert url == expected", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_nonascii_pathinfo_test_no_setup_after_first_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_nonascii_pathinfo_test_no_setup_after_first_request", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1669, "end_line": 1690, "span_ids": ["test_no_setup_after_first_request", "test_nonascii_pathinfo"], "tokens": 136}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_nonascii_pathinfo(app, client):\n    @app.route(\"/\u043a\u0438\u0440\u0442\u0435\u0441\u0442\")\n    def index():\n        return \"Hello World!\"\n\n    rv = client.get(\"/\u043a\u0438\u0440\u0442\u0435\u0441\u0442\")\n    assert rv.data == b\"Hello World!\"\n\n\ndef test_no_setup_after_first_request(app, client):\n    app.debug = True\n\n    @app.route(\"/\")\n    def index():\n        return \"Awesome\"\n\n    assert client.get(\"/\").data == b\"Awesome\"\n\n    with pytest.raises(AssertionError) as exc_info:\n        app.add_url_rule(\"/foo\", endpoint=\"late\")\n\n    assert \"setup method 'add_url_rule'\" in str(exc_info.value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_routing_redirect_debugging_test_routing_redirect_debugging": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_routing_redirect_debugging_test_routing_redirect_debugging", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1693, "end_line": 1710, "span_ids": ["test_routing_redirect_debugging"], "tokens": 163}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_routing_redirect_debugging(monkeypatch, app, client):\n    app.config[\"DEBUG\"] = True\n\n    @app.route(\"/user/\", methods=[\"GET\", \"POST\"])\n    def user():\n        return flask.request.form[\"status\"]\n\n    # default redirect code preserves form data\n    rv = client.post(\"/user\", data={\"status\": \"success\"}, follow_redirects=True)\n    assert rv.data == b\"success\"\n\n    # 301 and 302 raise error\n    monkeypatch.setattr(RequestRedirect, \"code\", 301)\n\n    with client, pytest.raises(AssertionError) as exc_info:\n        client.post(\"/user\", data={\"status\": \"error\"}, follow_redirects=True)\n\n    assert \"canonical URL 'http://localhost/user/'\" in str(exc_info.value)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_route_decorator_custom_endpoint_test_route_decorator_custom_endpoint": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_route_decorator_custom_endpoint_test_route_decorator_custom_endpoint", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1713, "end_line": 1735, "span_ids": ["test_route_decorator_custom_endpoint"], "tokens": 169}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_route_decorator_custom_endpoint(app, client):\n    app.debug = True\n\n    @app.route(\"/foo/\")\n    def foo():\n        return flask.request.endpoint\n\n    @app.route(\"/bar/\", endpoint=\"bar\")\n    def for_bar():\n        return flask.request.endpoint\n\n    @app.route(\"/bar/123\", endpoint=\"123\")\n    def for_bar_foo():\n        return flask.request.endpoint\n\n    with app.test_request_context():\n        assert flask.url_for(\"foo\") == \"/foo/\"\n        assert flask.url_for(\"bar\") == \"/bar/\"\n        assert flask.url_for(\"123\") == \"/bar/123\"\n\n    assert client.get(\"/foo/\").data == b\"foo\"\n    assert client.get(\"/bar/\").data == b\"bar\"\n    assert client.get(\"/bar/123\").data == b\"123\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_get_method_on_g_test_g_iteration_protocol": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_get_method_on_g_test_g_iteration_protocol", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1738, "end_line": 1751, "span_ids": ["test_g_iteration_protocol", "test_get_method_on_g"], "tokens": 121}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_get_method_on_g(app_ctx):\n    assert flask.g.get(\"x\") is None\n    assert flask.g.get(\"x\", 11) == 11\n    flask.g.x = 42\n    assert flask.g.get(\"x\") == 42\n    assert flask.g.x == 42\n\n\ndef test_g_iteration_protocol(app_ctx):\n    flask.g.foo = 23\n    flask.g.bar = 42\n    assert \"foo\" in flask.g\n    assert \"foos\" not in flask.g\n    assert sorted(flask.g) == [\"bar\", \"foo\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_basic_support_test_subdomain_basic_support": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_basic_support_test_subdomain_basic_support", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1754, "end_line": 1771, "span_ids": ["test_subdomain_basic_support"], "tokens": 126}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_subdomain_basic_support():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain\"\n    client = app.test_client()\n\n    @app.route(\"/\")\n    def normal_index():\n        return \"normal index\"\n\n    @app.route(\"/\", subdomain=\"test\")\n    def test_index():\n        return \"test index\"\n\n    rv = client.get(\"/\", \"http://localhost.localdomain/\")\n    assert rv.data == b\"normal index\"\n\n    rv = client.get(\"/\", \"http://test.localhost.localdomain/\")\n    assert rv.data == b\"test index\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_matching_test_subdomain_matching_with_ports": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_matching_test_subdomain_matching_with_ports", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1774, "end_line": 1797, "span_ids": ["test_subdomain_matching", "test_subdomain_matching_with_ports"], "tokens": 198}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_subdomain_matching():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    client = app.test_client()\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain\"\n\n    @app.route(\"/\", subdomain=\"<user>\")\n    def index(user):\n        return f\"index for {user}\"\n\n    rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain/\")\n    assert rv.data == b\"index for mitsuhiko\"\n\n\ndef test_subdomain_matching_with_ports():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain:3000\"\n    client = app.test_client()\n\n    @app.route(\"/\", subdomain=\"<user>\")\n    def index(user):\n        return f\"index for {user}\"\n\n    rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain:3000/\")\n    assert rv.data == b\"index for mitsuhiko\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_matching_other_name_test_subdomain_matching_other_name": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_subdomain_matching_other_name_test_subdomain_matching_other_name", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1800, "end_line": 1821, "span_ids": ["test_subdomain_matching_other_name"], "tokens": 203}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"matching\", (False, True))\ndef test_subdomain_matching_other_name(matching):\n    app = flask.Flask(__name__, subdomain_matching=matching)\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain:3000\"\n    client = app.test_client()\n\n    @app.route(\"/\")\n    def index():\n        return \"\", 204\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\n            \"ignore\", \"Current server name\", UserWarning, \"flask.app\"\n        )\n        # ip address can't match name\n        rv = client.get(\"/\", \"http://127.0.0.1:3000/\")\n        assert rv.status_code == 404 if matching else 204\n\n    # allow all subdomains if matching is disabled\n    rv = client.get(\"/\", \"http://www.localhost.localdomain:3000/\")\n    assert rv.status_code == 404 if matching else 204", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_multi_route_rules_test_multi_route_class_views": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_multi_route_rules_test_multi_route_class_views", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1824, "end_line": 1849, "span_ids": ["test_multi_route_class_views", "test_multi_route_rules"], "tokens": 166}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_multi_route_rules(app, client):\n    @app.route(\"/\")\n    @app.route(\"/<test>/\")\n    def index(test=\"a\"):\n        return test\n\n    rv = client.open(\"/\")\n    assert rv.data == b\"a\"\n    rv = client.open(\"/b/\")\n    assert rv.data == b\"b\"\n\n\ndef test_multi_route_class_views(app, client):\n    class View:\n        def __init__(self, app):\n            app.add_url_rule(\"/\", \"index\", self.index)\n            app.add_url_rule(\"/<test>/\", \"index\", self.index)\n\n        def index(self, test=\"a\"):\n            return test\n\n    _ = View(app)\n    rv = client.open(\"/\")\n    assert rv.data == b\"a\"\n    rv = client.open(\"/b/\")\n    assert rv.data == b\"b\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_run_defaults_test_run_server_port": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_run_defaults_test_run_server_port", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1852, "end_line": 1874, "span_ids": ["test_run_defaults", "test_run_server_port"], "tokens": 197}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_run_defaults(monkeypatch, app):\n    rv = {}\n\n    # Mocks werkzeug.serving.run_simple method\n    def run_simple_mock(*args, **kwargs):\n        rv[\"result\"] = \"running...\"\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    app.run()\n    assert rv[\"result\"] == \"running...\"\n\n\ndef test_run_server_port(monkeypatch, app):\n    rv = {}\n\n    # Mocks werkzeug.serving.run_simple method\n    def run_simple_mock(hostname, port, application, *args, **kwargs):\n        rv[\"result\"] = f\"running on {hostname}:{port} ...\"\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    hostname, port = \"localhost\", 8000\n    app.run(hostname, port, debug=True)\n    assert rv[\"result\"] == f\"running on {hostname}:{port} ...\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_run_from_config_test_run_from_config": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_run_from_config_test_run_from_config", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1877, "end_line": 1898, "span_ids": ["test_run_from_config"], "tokens": 264}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    \"host,port,server_name,expect_host,expect_port\",\n    (\n        (None, None, \"pocoo.org:8080\", \"pocoo.org\", 8080),\n        (\"localhost\", None, \"pocoo.org:8080\", \"localhost\", 8080),\n        (None, 80, \"pocoo.org:8080\", \"pocoo.org\", 80),\n        (\"localhost\", 80, \"pocoo.org:8080\", \"localhost\", 80),\n        (\"localhost\", 0, \"localhost:8080\", \"localhost\", 0),\n        (None, None, \"localhost:8080\", \"localhost\", 8080),\n        (None, None, \"localhost:0\", \"localhost\", 0),\n    ),\n)\ndef test_run_from_config(\n    monkeypatch, host, port, server_name, expect_host, expect_port, app\n):\n    def run_simple_mock(hostname, port, *args, **kwargs):\n        assert hostname == expect_host\n        assert port == expect_port\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    app.config[\"SERVER_NAME\"] = server_name\n    app.run(host, port)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_max_cookie_size_test_max_cookie_size.assert_len_recwarn_0": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_max_cookie_size_test_max_cookie_size.assert_len_recwarn_0", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1901, "end_line": 1928, "span_ids": ["test_max_cookie_size"], "tokens": 173}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_max_cookie_size(app, client, recwarn):\n    app.config[\"MAX_COOKIE_SIZE\"] = 100\n\n    # outside app context, default to Werkzeug static value,\n    # which is also the default config\n    response = flask.Response()\n    default = flask.Flask.default_config[\"MAX_COOKIE_SIZE\"]\n    assert response.max_cookie_size == default\n\n    # inside app context, use app config\n    with app.app_context():\n        assert flask.Response().max_cookie_size == 100\n\n    @app.route(\"/\")\n    def index():\n        r = flask.Response(\"\", status=204)\n        r.set_cookie(\"foo\", \"bar\" * 100)\n        return r\n\n    client.get(\"/\")\n    assert len(recwarn) == 1\n    w = recwarn.pop()\n    assert \"cookie is too large\" in str(w.message)\n\n    app.config[\"MAX_COOKIE_SIZE\"] = 0\n\n    client.get(\"/\")\n    assert len(recwarn) == 0", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_app_freed_on_zero_refcount_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_basic.py_test_app_freed_on_zero_refcount_", "embedding": null, "metadata": {"file_path": "tests/test_basic.py", "file_name": "test_basic.py", "file_type": "text/x-python", "category": "test", "start_line": 1931, "end_line": 1945, "span_ids": ["test_app_freed_on_zero_refcount"], "tokens": 109}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@require_cpython_gc\ndef test_app_freed_on_zero_refcount():\n    # A Flask instance should not create a reference cycle that prevents CPython\n    # from freeing it when all external references to it are released (see #3761).\n    gc.disable()\n    try:\n        app = flask.Flask(__name__)\n        assert app.view_functions[\"static\"]\n        weak = weakref.ref(app)\n        assert weak() is not None\n        del app\n        assert weak() is None\n    finally:\n        gc.enable()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_pytest_test_blueprint_specific_error_handling.assert_client_get_what_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_pytest_test_blueprint_specific_error_handling.assert_client_get_what_", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 43, "span_ids": ["imports", "test_blueprint_specific_error_handling"], "tokens": 260}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\nfrom jinja2 import TemplateNotFound\nfrom werkzeug.http import parse_cache_control_header\n\nimport flask\n\n\ndef test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint(\"frontend\", __name__)\n    backend = flask.Blueprint(\"backend\", __name__)\n    sideend = flask.Blueprint(\"sideend\", __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return \"frontend says no\", 403\n\n    @frontend.route(\"/frontend-no\")\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return \"backend says no\", 403\n\n    @backend.route(\"/backend-no\")\n    def backend_no():\n        flask.abort(403)\n\n    @sideend.route(\"/what-is-a-sideend\")\n    def sideend_no():\n        flask.abort(403)\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n    app.register_blueprint(sideend)\n\n    @app.errorhandler(403)\n    def app_forbidden(e):\n        return \"application itself says no\", 403\n\n    assert client.get(\"/frontend-no\").data == b\"frontend says no\"\n    assert client.get(\"/backend-no\").data == b\"backend says no\"\n    assert client.get(\"/what-is-a-sideend\").data == b\"application itself says no\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_specific_user_error_handling_test_blueprint_specific_user_error_handling.assert_client_get_funct": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_specific_user_error_handling_test_blueprint_specific_user_error_handling.assert_client_get_funct", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 46, "end_line": 77, "span_ids": ["test_blueprint_specific_user_error_handling"], "tokens": 169}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_blueprint_specific_user_error_handling(app, client):\n    class MyDecoratorException(Exception):\n        pass\n\n    class MyFunctionException(Exception):\n        pass\n\n    blue = flask.Blueprint(\"blue\", __name__)\n\n    @blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return \"boom\"\n\n    def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return \"bam\"\n\n    blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n\n    @blue.route(\"/decorator\")\n    def blue_deco_test():\n        raise MyDecoratorException()\n\n    @blue.route(\"/function\")\n    def blue_func_test():\n        raise MyFunctionException()\n\n    app.register_blueprint(blue)\n\n    assert client.get(\"/decorator\").data == b\"boom\"\n    assert client.get(\"/function\").data == b\"bam\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_app_error_handling_test_blueprint_app_error_handling": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_app_error_handling_test_blueprint_app_error_handling", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 80, "end_line": 101, "span_ids": ["test_blueprint_app_error_handling"], "tokens": 153}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_blueprint_app_error_handling(app, client):\n    errors = flask.Blueprint(\"errors\", __name__)\n\n    @errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return \"you shall not pass\", 403\n\n    @app.route(\"/forbidden\")\n    def app_forbidden():\n        flask.abort(403)\n\n    forbidden_bp = flask.Blueprint(\"forbidden_bp\", __name__)\n\n    @forbidden_bp.route(\"/nope\")\n    def bp_forbidden():\n        flask.abort(403)\n\n    app.register_blueprint(errors)\n    app.register_blueprint(forbidden_bp)\n\n    assert client.get(\"/forbidden\").data == b\"you shall not pass\"\n    assert client.get(\"/nope\").data == b\"you shall not pass\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_prefix_slash_test_blueprint_prefix_slash": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_prefix_slash_test_blueprint_prefix_slash", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 104, "end_line": 128, "span_ids": ["test_blueprint_prefix_slash"], "tokens": 185}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    (\"prefix\", \"rule\", \"url\"),\n    (\n        (\"\", \"/\", \"/\"),\n        (\"/\", \"\", \"/\"),\n        (\"/\", \"/\", \"/\"),\n        (\"/foo\", \"\", \"/foo\"),\n        (\"/foo/\", \"\", \"/foo/\"),\n        (\"\", \"/bar\", \"/bar\"),\n        (\"/foo/\", \"/bar\", \"/foo/bar\"),\n        (\"/foo/\", \"bar\", \"/foo/bar\"),\n        (\"/foo\", \"/bar\", \"/foo/bar\"),\n        (\"/foo/\", \"//bar\", \"/foo/bar\"),\n        (\"/foo//\", \"/bar\", \"/foo/bar\"),\n    ),\n)\ndef test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint(\"test\", __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return \"\", 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_url_defaults_test_blueprint_url_defaults": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_url_defaults_test_blueprint_url_defaults", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 131, "end_line": 148, "span_ids": ["test_blueprint_url_defaults"], "tokens": 171}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_blueprint_url_defaults(app, client):\n    bp = flask.Blueprint(\"test\", __name__)\n\n    @bp.route(\"/foo\", defaults={\"baz\": 42})\n    def foo(bar, baz):\n        return f\"{bar}/{baz:d}\"\n\n    @bp.route(\"/bar\")\n    def bar(bar):\n        return str(bar)\n\n    app.register_blueprint(bp, url_prefix=\"/1\", url_defaults={\"bar\": 23})\n    app.register_blueprint(bp, name=\"test2\", url_prefix=\"/2\", url_defaults={\"bar\": 19})\n\n    assert client.get(\"/1/foo\").data == b\"23/42\"\n    assert client.get(\"/2/foo\").data == b\"19/42\"\n    assert client.get(\"/1/bar\").data == b\"23\"\n    assert client.get(\"/2/bar\").data == b\"19\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_url_processors_test_blueprint_url_processors": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_url_processors_test_blueprint_url_processors", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 151, "end_line": 173, "span_ids": ["test_blueprint_url_processors"], "tokens": 156}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_blueprint_url_processors(app, client):\n    bp = flask.Blueprint(\"frontend\", __name__, url_prefix=\"/<lang_code>\")\n\n    @bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault(\"lang_code\", flask.g.lang_code)\n\n    @bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop(\"lang_code\")\n\n    @bp.route(\"/\")\n    def index():\n        return flask.url_for(\".about\")\n\n    @bp.route(\"/about\")\n    def about():\n        return flask.url_for(\".index\")\n\n    app.register_blueprint(bp)\n\n    assert client.get(\"/de/\").data == b\"/de/about\"\n    assert client.get(\"/de/about\").data == b\"/de/\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_templates_and_static_test_templates_and_static.with_flask_Flask___name__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_templates_and_static_test_templates_and_static.with_flask_Flask___name__", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 176, "end_line": 220, "span_ids": ["test_templates_and_static"], "tokens": 360}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_templates_and_static(test_apps):\n    from blueprintapp import app\n\n    client = app.test_client()\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"Hello from the Frontend\"\n    rv = client.get(\"/admin/\")\n    assert rv.data == b\"Hello from the Admin\"\n    rv = client.get(\"/admin/index2\")\n    assert rv.data == b\"Hello from the Admin\"\n    rv = client.get(\"/admin/static/test.txt\")\n    assert rv.data.strip() == b\"Admin File\"\n    rv.close()\n    rv = client.get(\"/admin/static/css/test.css\")\n    assert rv.data.strip() == b\"/* nested file */\"\n    rv.close()\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n    try:\n        expected_max_age = 3600\n        if app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] == expected_max_age:\n            expected_max_age = 7200\n        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = expected_max_age\n        rv = client.get(\"/admin/static/css/test.css\")\n        cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n\n    with app.test_request_context():\n        assert (\n            flask.url_for(\"admin.static\", filename=\"test.txt\")\n            == \"/admin/static/test.txt\"\n        )\n\n    with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template(\"missing.html\")\n        assert e.value.name == \"missing.html\"\n\n    with flask.Flask(__name__).test_request_context():\n        assert flask.render_template(\"nested/nested.txt\") == \"I'm nested\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_default_static_max_age_test_default_static_max_age": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_default_static_max_age_test_default_static_max_age", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 223, "end_line": 244, "span_ids": ["test_default_static_max_age"], "tokens": 206}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_default_static_max_age(app):\n    class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100\n\n    blueprint = MyBlueprint(\"blueprint\", __name__, static_folder=\"static\")\n    app.register_blueprint(blueprint)\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n    try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = unexpected_max_age\n            rv = blueprint.send_static_file(\"index.html\")\n            cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_templates_list_test_empty_url_defaults": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_templates_list_test_empty_url_defaults", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 247, "end_line": 292, "span_ids": ["test_dotted_name_not_allowed", "test_dotted_names_from_app", "test_empty_name_not_allowed", "test_empty_url_defaults", "test_templates_list"], "tokens": 261}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_templates_list(test_apps):\n    from blueprintapp import app\n\n    templates = sorted(app.jinja_env.list_templates())\n    assert templates == [\"admin/index.html\", \"frontend/index.html\"]\n\n\ndef test_dotted_name_not_allowed(app, client):\n    with pytest.raises(ValueError):\n        flask.Blueprint(\"app.ui\", __name__)\n\n\ndef test_empty_name_not_allowed(app, client):\n    with pytest.raises(ValueError):\n        flask.Blueprint(\"\", __name__)\n\n\ndef test_dotted_names_from_app(app, client):\n    test = flask.Blueprint(\"test\", __name__)\n\n    @app.route(\"/\")\n    def app_index():\n        return flask.url_for(\"test.index\")\n\n    @test.route(\"/test/\")\n    def index():\n        return flask.url_for(\"app_index\")\n\n    app.register_blueprint(test)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"/test/\"\n\n\ndef test_empty_url_defaults(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.route(\"/\", defaults={\"page\": 1})\n    @bp.route(\"/page/<int:page>\")\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get(\"/\").data == b\"1\"\n    assert client.get(\"/page/2\").data == b\"2\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_route_decorator_custom_endpoint_test_route_decorator_custom_endpoint.assert_client_get_py_ba_4": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_route_decorator_custom_endpoint_test_route_decorator_custom_endpoint.assert_client_get_py_ba_4", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 295, "end_line": 324, "span_ids": ["test_route_decorator_custom_endpoint"], "tokens": 193}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_route_decorator_custom_endpoint(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.route(\"/foo\")\n    def foo():\n        return flask.request.endpoint\n\n    @bp.route(\"/bar\", endpoint=\"bar\")\n    def foo_bar():\n        return flask.request.endpoint\n\n    @bp.route(\"/bar/123\", endpoint=\"123\")\n    def foo_bar_foo():\n        return flask.request.endpoint\n\n    @bp.route(\"/bar/foo\")\n    def bar_foo():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.request.endpoint\n\n    assert client.get(\"/\").data == b\"index\"\n    assert client.get(\"/py/foo\").data == b\"bp.foo\"\n    assert client.get(\"/py/bar\").data == b\"bp.bar\"\n    assert client.get(\"/py/bar/123\").data == b\"bp.123\"\n    assert client.get(\"/py/bar/foo\").data == b\"bp.bar_foo\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_route_decorator_custom_endpoint_with_dots_test_endpoint_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_route_decorator_custom_endpoint_with_dots_test_endpoint_decorator", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 327, "end_line": 359, "span_ids": ["test_endpoint_decorator", "test_route_decorator_custom_endpoint_with_dots"], "tokens": 192}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_route_decorator_custom_endpoint_with_dots(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    with pytest.raises(ValueError):\n        bp.route(\"/\", endpoint=\"a.b\")(lambda: \"\")\n\n    with pytest.raises(ValueError):\n        bp.add_url_rule(\"/\", endpoint=\"a.b\")\n\n    def view():\n        return \"\"\n\n    view.__name__ = \"a.b\"\n\n    with pytest.raises(ValueError):\n        bp.add_url_rule(\"/\", view_func=view)\n\n\ndef test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule(\"/foo\", endpoint=\"bar\"))\n\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.endpoint(\"bar\")\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix=\"/bp_prefix\")\n\n    assert client.get(\"/foo\").data == b\"bar\"\n    assert client.get(\"/bp_prefix/bar\").status_code == 404", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_filter_test_template_filter.assert_app_jinja_env_filt_11": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_filter_test_template_filter.assert_app_jinja_env_filt_11", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 362, "end_line": 396, "span_ids": ["test_template_filter"], "tokens": 332}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_template_filter(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    @bp.app_template_filter\n    def my_reverse_2(s):\n        return s[::-1]\n\n    @bp.app_template_filter(\"my_reverse_custom_name_3\")\n    def my_reverse_3(s):\n        return s[::-1]\n\n    @bp.app_template_filter(name=\"my_reverse_custom_name_4\")\n    def my_reverse_4(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n\n    assert \"my_reverse_2\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse_2\"] == my_reverse_2\n    assert app.jinja_env.filters[\"my_reverse_2\"](\"abcd\") == \"dcba\"\n\n    assert \"my_reverse_custom_name_3\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse_custom_name_3\"] == my_reverse_3\n    assert app.jinja_env.filters[\"my_reverse_custom_name_3\"](\"abcd\") == \"dcba\"\n\n    assert \"my_reverse_custom_name_4\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse_custom_name_4\"] == my_reverse_4\n    assert app.jinja_env.filters[\"my_reverse_custom_name_4\"](\"abcd\") == \"dcba\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_filter_test_template_filter_with_name": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_filter_test_template_filter_with_name", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 399, "end_line": 422, "span_ids": ["test_add_template_filter", "test_template_filter_with_name"], "tokens": 200}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_add_template_filter(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n\n\ndef test_template_filter_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter(\"strrev\")\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_filter_with_name_test_add_template_filter_with_name": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_filter_with_name_test_add_template_filter_with_name", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 425, "end_line": 435, "span_ids": ["test_add_template_filter_with_name"], "tokens": 105}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_add_template_filter_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, \"strrev\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_filter_with_template_test_add_template_filter_with_name_and_template": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_filter_with_template_test_add_template_filter_with_name_and_template", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 438, "end_line": 519, "span_ids": ["test_add_template_filter_with_name_and_template", "test_add_template_filter_with_template", "test_template_filter_after_route_with_template", "test_template_filter_with_name_and_template", "test_template_filter_with_template"], "tokens": 474}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_template_filter_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"\n\n\ndef test_template_filter_after_route_with_template(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"\n\n\ndef test_add_template_filter_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def super_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(super_reverse)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"\n\n\ndef test_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter(\"super_reverse\")\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"\n\n\ndef test_add_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, \"super_reverse\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_test_test_template_test.assert_app_jinja_env_test_11": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_test_test_template_test.assert_app_jinja_env_test_11", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 522, "end_line": 556, "span_ids": ["test_template_test"], "tokens": 295}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_template_test(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @bp.app_template_test\n    def boolean_2(value):\n        return isinstance(value, bool)\n\n    @bp.app_template_test(\"my_boolean_custom_name\")\n    def boolean_3(value):\n        return isinstance(value, bool)\n\n    @bp.app_template_test(name=\"my_boolean_custom_name_2\")\n    def boolean_4(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"is_boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"is_boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"is_boolean\"](False)\n\n    assert \"boolean_2\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean_2\"] == boolean_2\n    assert app.jinja_env.tests[\"boolean_2\"](False)\n\n    assert \"my_boolean_custom_name\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"my_boolean_custom_name\"] == boolean_3\n    assert app.jinja_env.tests[\"my_boolean_custom_name\"](False)\n\n    assert \"my_boolean_custom_name_2\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"my_boolean_custom_name_2\"] == boolean_4\n    assert app.jinja_env.tests[\"my_boolean_custom_name_2\"](False)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_test_test_add_template_test_with_name_and_template": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_add_template_test_test_add_template_test_with_name_and_template", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 559, "end_line": 679, "span_ids": ["test_add_template_test", "test_add_template_test_with_name", "test_add_template_test_with_name_and_template", "test_add_template_test_with_template", "test_template_test_after_route_with_template", "test_template_test_with_name", "test_template_test_with_name_and_template", "test_template_test_with_template"], "tokens": 745}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_add_template_test(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"is_boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"is_boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"is_boolean\"](False)\n\n\ndef test_template_test_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)\n\n\ndef test_add_template_test_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, \"boolean\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)\n\n\ndef test_template_test_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data\n\n\ndef test_template_test_after_route_with_template(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data\n\n\ndef test_add_template_test_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(boolean)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data\n\n\ndef test_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data\n\n\ndef test_add_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, \"boolean\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_context_processing_test_context_processing.assert_b_43_in_answer_pa": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_context_processing_test_context_processing.assert_b_43_in_answer_pa", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 682, "end_line": 720, "span_ids": ["test_context_processing"], "tokens": 227}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_context_processing(app, client):\n    answer_bp = flask.Blueprint(\"answer_bp\", __name__)\n\n    def template_string():\n        return flask.render_template_string(\n            \"{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}\"\n            \"{% if answer %}{{ answer }} is the answer.{% endif %}\"\n        )\n\n    # App global context processor\n    @answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {\"notanswer\": 43}\n\n    # Blueprint local context processor\n    @answer_bp.context_processor\n    def answer_context_processor():\n        return {\"answer\": 42}\n\n    # Setup endpoints for testing\n    @answer_bp.route(\"/bp\")\n    def bp_page():\n        return template_string()\n\n    @app.route(\"/\")\n    def app_page():\n        return template_string()\n\n    # Register the blueprint\n    app.register_blueprint(answer_bp)\n\n    app_page_bytes = client.get(\"/\").data\n    answer_page_bytes = client.get(\"/bp\").data\n\n    assert b\"43\" in app_page_bytes\n    assert b\"42\" not in app_page_bytes\n\n    assert b\"42\" in answer_page_bytes\n    assert b\"43\" in answer_page_bytes", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_global_test_template_global.with_app_app_context_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_template_global_test_template_global.with_app_app_context_", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 723, "end_line": 774, "span_ids": ["test_template_global"], "tokens": 480}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_template_global(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_global()\n    def get_answer():\n        return 42\n\n    @bp.app_template_global\n    def get_stuff_1():\n        return \"get_stuff_1\"\n\n    @bp.app_template_global(\"my_get_stuff_custom_name_2\")\n    def get_stuff_2():\n        return \"get_stuff_2\"\n\n    @bp.app_template_global(name=\"my_get_stuff_custom_name_3\")\n    def get_stuff_3():\n        return \"get_stuff_3\"\n\n    # Make sure the function is not in the jinja_env already\n    assert \"get_answer\" not in app.jinja_env.globals.keys()\n    app.register_blueprint(bp)\n\n    # Tests\n    assert \"get_answer\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"get_answer\"] is get_answer\n    assert app.jinja_env.globals[\"get_answer\"]() == 42\n\n    assert \"get_stuff_1\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"get_stuff_1\"] == get_stuff_1\n    assert app.jinja_env.globals[\"get_stuff_1\"](), \"get_stuff_1\"\n\n    assert \"my_get_stuff_custom_name_2\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_2\"] == get_stuff_2\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_2\"](), \"get_stuff_2\"\n\n    assert \"my_get_stuff_custom_name_3\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_3\"] == get_stuff_3\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_3\"](), \"get_stuff_3\"\n\n    with app.app_context():\n        rv = flask.render_template_string(\"{{ get_answer() }}\")\n        assert rv == \"42\"\n\n        rv = flask.render_template_string(\"{{ get_stuff_1() }}\")\n        assert rv == \"get_stuff_1\"\n\n        rv = flask.render_template_string(\"{{ my_get_stuff_custom_name_2() }}\")\n        assert rv == \"get_stuff_2\"\n\n        rv = flask.render_template_string(\"{{ my_get_stuff_custom_name_3() }}\")\n        assert rv == \"get_stuff_3\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_request_processing_test_request_processing.assert_evts_before_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_request_processing_test_request_processing.assert_evts_before_", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 777, "end_line": 805, "span_ids": ["test_request_processing"], "tokens": 151}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_request_processing(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n    evts = []\n\n    @bp.before_request\n    def before_bp():\n        evts.append(\"before\")\n\n    @bp.after_request\n    def after_bp(response):\n        response.data += b\"|after\"\n        evts.append(\"after\")\n        return response\n\n    @bp.teardown_request\n    def teardown_bp(exc):\n        evts.append(\"teardown\")\n\n    # Setup routes for testing\n    @bp.route(\"/bp\")\n    def bp_endpoint():\n        return \"request\"\n\n    app.register_blueprint(bp)\n\n    assert evts == []\n    rv = client.get(\"/bp\")\n    assert rv.data == b\"request|after\"\n    assert evts == [\"before\", \"after\", \"teardown\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_app_request_processing_test_app_request_processing.assert_evts_before__4": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_app_request_processing_test_app_request_processing.assert_evts_before__4", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 808, "end_line": 844, "span_ids": ["test_app_request_processing"], "tokens": 194}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_app_request_processing(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n    evts = []\n\n    @bp.before_app_request\n    def before_app():\n        evts.append(\"before\")\n\n    @bp.after_app_request\n    def after_app(response):\n        response.data += b\"|after\"\n        evts.append(\"after\")\n        return response\n\n    @bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append(\"teardown\")\n\n    app.register_blueprint(bp)\n\n    # Setup routes for testing\n    @app.route(\"/\")\n    def bp_endpoint():\n        return \"request\"\n\n    # before first request\n    assert evts == []\n\n    # first request\n    resp = client.get(\"/\").data\n    assert resp == b\"request|after\"\n    assert evts == [\"before\", \"after\", \"teardown\"]\n\n    # second request\n    resp = client.get(\"/\").data\n    assert resp == b\"request|after\"\n    assert evts == [\"before\", \"after\", \"teardown\"] * 2", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_app_url_processors_test_app_url_processors": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_app_url_processors_test_app_url_processors", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 847, "end_line": 871, "span_ids": ["test_app_url_processors"], "tokens": 182}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_app_url_processors(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    # Register app-wide url defaults and preprocessor on blueprint\n    @bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault(\"lang_code\", flask.g.lang_code)\n\n    @bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop(\"lang_code\")\n\n    # Register route rules at the app level\n    @app.route(\"/<lang_code>/\")\n    def index():\n        return flask.url_for(\"about\")\n\n    @app.route(\"/<lang_code>/about\")\n    def about():\n        return flask.url_for(\"index\")\n\n    app.register_blueprint(bp)\n\n    assert client.get(\"/de/\").data == b\"/de/about\"\n    assert client.get(\"/de/about\").data == b\"/de/\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nested_blueprint_test_nested_blueprint.assert_client_get_paren_5": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nested_blueprint_test_nested_blueprint.assert_client_get_paren_5", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 874, "end_line": 920, "span_ids": ["test_nested_blueprint"], "tokens": 322}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_nested_blueprint(app, client):\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__)\n    grandchild = flask.Blueprint(\"grandchild\", __name__)\n\n    @parent.errorhandler(403)\n    def forbidden(e):\n        return \"Parent no\", 403\n\n    @parent.route(\"/\")\n    def parent_index():\n        return \"Parent yes\"\n\n    @parent.route(\"/no\")\n    def parent_no():\n        flask.abort(403)\n\n    @child.route(\"/\")\n    def child_index():\n        return \"Child yes\"\n\n    @child.route(\"/no\")\n    def child_no():\n        flask.abort(403)\n\n    @grandchild.errorhandler(403)\n    def grandchild_forbidden(e):\n        return \"Grandchild no\", 403\n\n    @grandchild.route(\"/\")\n    def grandchild_index():\n        return \"Grandchild yes\"\n\n    @grandchild.route(\"/no\")\n    def grandchild_no():\n        flask.abort(403)\n\n    child.register_blueprint(grandchild, url_prefix=\"/grandchild\")\n    parent.register_blueprint(child, url_prefix=\"/child\")\n    app.register_blueprint(parent, url_prefix=\"/parent\")\n\n    assert client.get(\"/parent/\").data == b\"Parent yes\"\n    assert client.get(\"/parent/child/\").data == b\"Child yes\"\n    assert client.get(\"/parent/child/grandchild/\").data == b\"Grandchild yes\"\n    assert client.get(\"/parent/no\").data == b\"Parent no\"\n    assert client.get(\"/parent/child/no\").data == b\"Parent no\"\n    assert client.get(\"/parent/child/grandchild/no\").data == b\"Grandchild no\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_child_before1_child_before1.assert_client_get_b_d": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_child_before1_child_before1.assert_client_get_b_d", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 923, "end_line": 1000, "span_ids": ["child_before1"], "tokens": 503}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_nested_callback_order(app, client):\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__)\n\n    @app.before_request\n    def app_before1():\n        flask.g.setdefault(\"seen\", []).append(\"app_1\")\n\n    @app.teardown_request\n    def app_teardown1(e=None):\n        assert flask.g.seen.pop() == \"app_1\"\n\n    @app.before_request\n    def app_before2():\n        flask.g.setdefault(\"seen\", []).append(\"app_2\")\n\n    @app.teardown_request\n    def app_teardown2(e=None):\n        assert flask.g.seen.pop() == \"app_2\"\n\n    @app.context_processor\n    def app_ctx():\n        return dict(key=\"app\")\n\n    @parent.before_request\n    def parent_before1():\n        flask.g.setdefault(\"seen\", []).append(\"parent_1\")\n\n    @parent.teardown_request\n    def parent_teardown1(e=None):\n        assert flask.g.seen.pop() == \"parent_1\"\n\n    @parent.before_request\n    def parent_before2():\n        flask.g.setdefault(\"seen\", []).append(\"parent_2\")\n\n    @parent.teardown_request\n    def parent_teardown2(e=None):\n        assert flask.g.seen.pop() == \"parent_2\"\n\n    @parent.context_processor\n    def parent_ctx():\n        return dict(key=\"parent\")\n\n    @child.before_request\n    def child_before1():\n        flask.g.setdefault(\"seen\", []).append(\"child_1\")\n\n    @child.teardown_request\n    def child_teardown1(e=None):\n        assert flask.g.seen.pop() == \"child_1\"\n\n    @child.before_request\n    def child_before2():\n        flask.g.setdefault(\"seen\", []).append(\"child_2\")\n\n    @child.teardown_request\n    def child_teardown2(e=None):\n        assert flask.g.seen.pop() == \"child_2\"\n\n    @child.context_processor\n    def child_ctx():\n        return dict(key=\"child\")\n\n    @child.route(\"/a\")\n    def a():\n        return \", \".join(flask.g.seen)\n\n    @child.route(\"/b\")\n    def b():\n        return flask.render_template_string(\"{{ key }}\")\n\n    parent.register_blueprint(child)\n    app.register_blueprint(parent)\n    assert (\n        client.get(\"/a\").data == b\"app_1, app_2, parent_1, parent_2, child_1, child_2\"\n    )\n    assert client.get(\"/b\").data == b\"child\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nesting_url_prefixes_test_nesting_url_prefixes.assert_response_status_co": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nesting_url_prefixes_test_nesting_url_prefixes.assert_response_status_co", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 1003, "end_line": 1031, "span_ids": ["test_nesting_url_prefixes"], "tokens": 189}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    \"parent_init, child_init, parent_registration, child_registration\",\n    [\n        (\"/parent\", \"/child\", None, None),\n        (\"/parent\", None, None, \"/child\"),\n        (None, None, \"/parent\", \"/child\"),\n        (\"/other\", \"/something\", \"/parent\", \"/child\"),\n    ],\n)\ndef test_nesting_url_prefixes(\n    parent_init,\n    child_init,\n    parent_registration,\n    child_registration,\n    app,\n    client,\n) -> None:\n    parent = flask.Blueprint(\"parent\", __name__, url_prefix=parent_init)\n    child = flask.Blueprint(\"child\", __name__, url_prefix=child_init)\n\n    @child.route(\"/\")\n    def index():\n        return \"index\"\n\n    parent.register_blueprint(child, url_prefix=child_registration)\n    app.register_blueprint(parent, url_prefix=parent_registration)\n\n    response = client.get(\"/parent/child/\")\n    assert response.status_code == 200", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nesting_subdomains_test_nesting_subdomains": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_nesting_subdomains_test_nesting_subdomains", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 1034, "end_line": 1050, "span_ids": ["test_nesting_subdomains"], "tokens": 125}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_nesting_subdomains(app, client) -> None:\n    app.subdomain_matching = True\n    app.config[\"SERVER_NAME\"] = \"example.test\"\n    client.allow_subdomain_redirects = True\n\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__)\n\n    @child.route(\"/child/\")\n    def index():\n        return \"child\"\n\n    parent.register_blueprint(child)\n    app.register_blueprint(parent, subdomain=\"api\")\n\n    response = client.get(\"/child/\", base_url=\"http://api.example.test\")\n    assert response.status_code == 200", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_child_and_parent_subdomain_test_child_and_parent_subdomain": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_child_and_parent_subdomain_test_child_and_parent_subdomain", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 1053, "end_line": 1072, "span_ids": ["test_child_and_parent_subdomain"], "tokens": 152}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_child_and_parent_subdomain(app, client) -> None:\n    app.subdomain_matching = True\n    app.config[\"SERVER_NAME\"] = \"example.test\"\n    client.allow_subdomain_redirects = True\n\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__, subdomain=\"api\")\n\n    @child.route(\"/\")\n    def index():\n        return \"child\"\n\n    parent.register_blueprint(child)\n    app.register_blueprint(parent, subdomain=\"parent\")\n\n    response = client.get(\"/\", base_url=\"http://api.parent.example.test\")\n    assert response.status_code == 200\n\n    response = client.get(\"/\", base_url=\"http://parent.example.test\")\n    assert response.status_code == 404", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_unique_blueprint_names_test_self_registration": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_unique_blueprint_names_test_self_registration", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 1075, "end_line": 1095, "span_ids": ["test_self_registration", "test_unique_blueprint_names"], "tokens": 163}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_unique_blueprint_names(app, client) -> None:\n    bp = flask.Blueprint(\"bp\", __name__)\n    bp2 = flask.Blueprint(\"bp\", __name__)\n\n    app.register_blueprint(bp)\n\n    with pytest.raises(ValueError):\n        app.register_blueprint(bp)  # same bp, same name, error\n\n    app.register_blueprint(bp, name=\"again\")  # same bp, different name, ok\n\n    with pytest.raises(ValueError):\n        app.register_blueprint(bp2)  # different bp, same name, error\n\n    app.register_blueprint(bp2, name=\"alt\")  # different bp, different name, ok\n\n\ndef test_self_registration(app, client) -> None:\n    bp = flask.Blueprint(\"bp\", __name__)\n    with pytest.raises(ValueError):\n        bp.register_blueprint(bp)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_renaming_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_blueprints.py_test_blueprint_renaming_", "embedding": null, "metadata": {"file_path": "tests/test_blueprints.py", "file_name": "test_blueprints.py", "file_type": "text/x-python", "category": "test", "start_line": 1098, "end_line": 1128, "span_ids": ["test_blueprint_renaming"], "tokens": 228}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_blueprint_renaming(app, client) -> None:\n    bp = flask.Blueprint(\"bp\", __name__)\n    bp2 = flask.Blueprint(\"bp2\", __name__)\n\n    @bp.get(\"/\")\n    def index():\n        return flask.request.endpoint\n\n    @bp.get(\"/error\")\n    def error():\n        flask.abort(403)\n\n    @bp.errorhandler(403)\n    def forbidden(_: Exception):\n        return \"Error\", 403\n\n    @bp2.get(\"/\")\n    def index2():\n        return flask.request.endpoint\n\n    bp.register_blueprint(bp2, url_prefix=\"/a\", name=\"sub\")\n    app.register_blueprint(bp, url_prefix=\"/a\")\n    app.register_blueprint(bp, url_prefix=\"/b\", name=\"alt\")\n\n    assert client.get(\"/a/\").data == b\"bp.index\"\n    assert client.get(\"/b/\").data == b\"alt.index\"\n    assert client.get(\"/a/a/\").data == b\"bp.sub.index2\"\n    assert client.get(\"/b/a/\").data == b\"alt.sub.index2\"\n    assert client.get(\"/a/error\").data == b\"Error\"\n    assert client.get(\"/b/error\").data == b\"Error\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py__This_file_was_part_of_F_test_cli_name": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py__This_file_was_part_of_F_test_cli_name", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 45, "span_ids": ["docstring", "imports", "runner", "test_cli_name"], "tokens": 220}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "# This file was part of Flask-CLI and was modified under the terms of\nimport importlib.metadata\nimport os\nimport platform\nimport ssl\nimport sys\nimport types\nfrom functools import partial\nfrom pathlib import Path\n\nimport click\nimport pytest\nfrom _pytest.monkeypatch import notset\nfrom click.testing import CliRunner\n\nfrom flask import Blueprint\nfrom flask import current_app\nfrom flask import Flask\nfrom flask.cli import AppGroup\nfrom flask.cli import find_best_app\nfrom flask.cli import FlaskGroup\nfrom flask.cli import get_version\nfrom flask.cli import load_dotenv\nfrom flask.cli import locate_app\nfrom flask.cli import NoAppException\nfrom flask.cli import prepare_import\nfrom flask.cli import run_command\nfrom flask.cli import ScriptInfo\nfrom flask.cli import with_appcontext\n\ncwd = Path.cwd()\ntest_path = (Path(__file__) / \"..\" / \"test_apps\").resolve()\n\n\n@pytest.fixture\ndef runner():\n    return CliRunner()\n\n\ndef test_cli_name(test_apps):\n    \"\"\"Make sure the CLI object's name is the app's name and not the app itself\"\"\"\n    from cliapp.app import testapp\n\n    assert testapp.cli.name == testapp.name", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_find_best_app_test_find_best_app.pytest_raises_TypeError_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_find_best_app_test_find_best_app.pytest_raises_TypeError_", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 48, "end_line": 132, "span_ids": ["test_find_best_app"], "tokens": 379}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_find_best_app(test_apps):\n    class Module:\n        app = Flask(\"appname\")\n\n    assert find_best_app(Module) == Module.app\n\n    class Module:\n        application = Flask(\"appname\")\n\n    assert find_best_app(Module) == Module.application\n\n    class Module:\n        myapp = Flask(\"appname\")\n\n    assert find_best_app(Module) == Module.myapp\n\n    class Module:\n        @staticmethod\n        def create_app():\n            return Flask(\"appname\")\n\n    app = find_best_app(Module)\n    assert isinstance(app, Flask)\n    assert app.name == \"appname\"\n\n    class Module:\n        @staticmethod\n        def create_app(**kwargs):\n            return Flask(\"appname\")\n\n    app = find_best_app(Module)\n    assert isinstance(app, Flask)\n    assert app.name == \"appname\"\n\n    class Module:\n        @staticmethod\n        def make_app():\n            return Flask(\"appname\")\n\n    app = find_best_app(Module)\n    assert isinstance(app, Flask)\n    assert app.name == \"appname\"\n\n    class Module:\n        myapp = Flask(\"appname1\")\n\n        @staticmethod\n        def create_app():\n            return Flask(\"appname2\")\n\n    assert find_best_app(Module) == Module.myapp\n\n    class Module:\n        myapp = Flask(\"appname1\")\n\n        @staticmethod\n        def create_app():\n            return Flask(\"appname2\")\n\n    assert find_best_app(Module) == Module.myapp\n\n    class Module:\n        pass\n\n    pytest.raises(NoAppException, find_best_app, Module)\n\n    class Module:\n        myapp1 = Flask(\"appname1\")\n        myapp2 = Flask(\"appname2\")\n\n    pytest.raises(NoAppException, find_best_app, Module)\n\n    class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask(\"appname2\")\n\n    pytest.raises(NoAppException, find_best_app, Module)\n\n    class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError(\"bad bad factory!\")\n\n    pytest.raises(TypeError, find_best_app, Module)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_prepare_import_test_prepare_import.assert_sys_path_0_str": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_prepare_import_test_prepare_import.assert_sys_path_0_str", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 135, "end_line": 177, "span_ids": ["test_prepare_import"], "tokens": 336}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    \"value,path,result\",\n    (\n        (\"test\", cwd, \"test\"),\n        (\"test.py\", cwd, \"test\"),\n        (\"a/test\", cwd / \"a\", \"test\"),\n        (\"test/__init__.py\", cwd, \"test\"),\n        (\"test/__init__\", cwd, \"test\"),\n        # nested package\n        (\n            test_path / \"cliapp\" / \"inner1\" / \"__init__\",\n            test_path,\n            \"cliapp.inner1\",\n        ),\n        (\n            test_path / \"cliapp\" / \"inner1\" / \"inner2\",\n            test_path,\n            \"cliapp.inner1.inner2\",\n        ),\n        # dotted name\n        (\"test.a.b\", cwd, \"test.a.b\"),\n        (test_path / \"cliapp.app\", test_path, \"cliapp.app\"),\n        # not a Python file, will be caught during import\n        (test_path / \"cliapp\" / \"message.txt\", test_path, \"cliapp.message.txt\"),\n    ),\n)\ndef test_prepare_import(request, value, path, result):\n    \"\"\"Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    \"\"\"\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == str(path)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_test_locate_app": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_test_locate_app", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 180, "end_line": 196, "span_ids": ["test_locate_app"], "tokens": 182}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    \"iname,aname,result\",\n    (\n        (\"cliapp.app\", None, \"testapp\"),\n        (\"cliapp.app\", \"testapp\", \"testapp\"),\n        (\"cliapp.factory\", None, \"app\"),\n        (\"cliapp.factory\", \"create_app\", \"app\"),\n        (\"cliapp.factory\", \"create_app()\", \"app\"),\n        (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\")', \"app2_foo_bar\"),\n        # trailing comma space\n        (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\", )', \"app2_foo_bar\"),\n        # strip whitespace\n        (\"cliapp.factory\", \" create_app () \", \"app\"),\n    ),\n)\ndef test_locate_app(test_apps, iname, aname, result):\n    assert locate_app(iname, aname).name == result", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_raises_test_locate_app_raises": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_raises_test_locate_app_raises", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 199, "end_line": 219, "span_ids": ["test_locate_app_raises"], "tokens": 160}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    \"iname,aname\",\n    (\n        (\"notanapp.py\", None),\n        (\"cliapp/app\", None),\n        (\"cliapp.app\", \"notanapp\"),\n        # not enough arguments\n        (\"cliapp.factory\", 'create_app2(\"foo\")'),\n        # invalid identifier\n        (\"cliapp.factory\", \"create_app(\"),\n        # no app returned\n        (\"cliapp.factory\", \"no_app\"),\n        # nested import error\n        (\"cliapp.importerrorapp\", None),\n        # not a Python file\n        (\"cliapp.message.txt\", None),\n    ),\n)\ndef test_locate_app_raises(test_apps, iname, aname):\n    with pytest.raises(NoAppException):\n        locate_app(iname, aname)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_suppress_raise_test_get_version": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_locate_app_suppress_raise_test_get_version", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 222, "end_line": 244, "span_ids": ["test_get_version", "test_locate_app_suppress_raise"], "tokens": 185}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_locate_app_suppress_raise(test_apps):\n    app = locate_app(\"notanapp.py\", None, raise_if_not_found=False)\n    assert app is None\n\n    # only direct import error is suppressed\n    with pytest.raises(NoAppException):\n        locate_app(\"cliapp.importerrorapp\", None, raise_if_not_found=False)\n\n\ndef test_get_version(test_apps, capsys):\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, \"test\")\n    out, err = capsys.readouterr()\n    assert f\"Python {platform.python_version()}\" in out\n    assert f\"Flask {importlib.metadata.version('flask')}\" in out\n    assert f\"Werkzeug {importlib.metadata.version('werkzeug')}\" in out", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_scriptinfo_test_scriptinfo.assert_app_name_testa_9": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_scriptinfo_test_scriptinfo.assert_app_name_testa_9", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 247, "end_line": 286, "span_ids": ["test_scriptinfo"], "tokens": 273}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_scriptinfo(test_apps, monkeypatch):\n    obj = ScriptInfo(app_import_path=\"cliapp.app:testapp\")\n    app = obj.load_app()\n    assert app.name == \"testapp\"\n    assert obj.load_app() is app\n\n    # import app with module's absolute path\n    cli_app_path = str(test_path / \"cliapp\" / \"app.py\")\n\n    obj = ScriptInfo(app_import_path=cli_app_path)\n    app = obj.load_app()\n    assert app.name == \"testapp\"\n    assert obj.load_app() is app\n    obj = ScriptInfo(app_import_path=f\"{cli_app_path}:testapp\")\n    app = obj.load_app()\n    assert app.name == \"testapp\"\n    assert obj.load_app() is app\n\n    def create_app():\n        return Flask(\"createapp\")\n\n    obj = ScriptInfo(create_app=create_app)\n    app = obj.load_app()\n    assert app.name == \"createapp\"\n    assert obj.load_app() is app\n\n    obj = ScriptInfo()\n    pytest.raises(NoAppException, obj.load_app)\n\n    # import app from wsgi.py in current directory\n    monkeypatch.chdir(test_path / \"helloworld\")\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == \"hello\"\n\n    # import app from app.py in current directory\n    monkeypatch.chdir(test_path / \"cliapp\")\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == \"testapp\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_app_cli_has_app_context_test_app_cli_has_app_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_app_cli_has_app_context_test_app_cli_has_app_context", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 289, "end_line": 304, "span_ids": ["test_app_cli_has_app_context"], "tokens": 147}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_app_cli_has_app_context(app, runner):\n    def _param_cb(ctx, param, value):\n        # current_app should be available in parameter callbacks\n        return bool(current_app)\n\n    @app.cli.command()\n    @click.argument(\"value\", callback=_param_cb)\n    def check(value):\n        app = click.get_current_context().obj.load_app()\n        # the loaded app should be the same as current_app\n        same_app = current_app._get_current_object() is app\n        return same_app, value\n\n    cli = FlaskGroup(create_app=lambda: app)\n    result = runner.invoke(cli, [\"check\", \"x\"], standalone_mode=False)\n    assert result.return_value == (True, True)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_with_appcontext_test_appgroup_app_context.assert_result_output__3": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_with_appcontext_test_appgroup_app_context.assert_result_output__3", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 307, "end_line": 345, "span_ids": ["test_appgroup_app_context", "test_with_appcontext"], "tokens": 216}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_with_appcontext(runner):\n    @click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask(\"testapp\"))\n\n    result = runner.invoke(testcmd, obj=obj)\n    assert result.exit_code == 0\n    assert result.output == \"testapp\\n\"\n\n\ndef test_appgroup_app_context(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command()\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask(\"testappgroup\"))\n\n    result = runner.invoke(cli, [\"test\"], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == \"testappgroup\\n\"\n\n    result = runner.invoke(cli, [\"subgroup\", \"test2\"], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == \"testappgroup\\n\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_flaskgroup_app_context_test_flaskgroup_debug": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_flaskgroup_app_context_test_flaskgroup_debug", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 348, "end_line": 382, "span_ids": ["test_flaskgroup_app_context", "test_flaskgroup_debug"], "tokens": 224}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_flaskgroup_app_context(runner):\n    def create_app():\n        return Flask(\"flaskgroup\")\n\n    @click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, [\"test\"])\n    assert result.exit_code == 0\n    assert result.output == \"flaskgroup\\n\"\n\n\n@pytest.mark.parametrize(\"set_debug_flag\", (True, False))\ndef test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask(\"flaskgroup\")\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, [\"test\"])\n    assert result.exit_code == 0\n    assert result.output == f\"{not set_debug_flag}\\n\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_flaskgroup_nested_test_help_echo_loading_error": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_flaskgroup_nested_test_help_echo_loading_error", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 385, "end_line": 425, "span_ids": ["test_flaskgroup_nested", "test_help_echo_loading_error", "test_no_command_echo_loading_error"], "tokens": 268}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_flaskgroup_nested(app, runner):\n    cli = click.Group(\"cli\")\n    flask_group = FlaskGroup(name=\"flask\", create_app=lambda: app)\n    cli.add_command(flask_group)\n\n    @flask_group.command()\n    def show():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, [\"flask\", \"show\"])\n    assert result.output == \"flask_test\\n\"\n\n\ndef test_no_command_echo_loading_error():\n    from flask.cli import cli\n\n    try:\n        runner = CliRunner(mix_stderr=False)\n    except (DeprecationWarning, TypeError):\n        # Click >= 8.2\n        runner = CliRunner()\n\n    result = runner.invoke(cli, [\"missing\"])\n    assert result.exit_code == 2\n    assert \"FLASK_APP\" in result.stderr\n    assert \"Usage:\" in result.stderr\n\n\ndef test_help_echo_loading_error():\n    from flask.cli import cli\n\n    try:\n        runner = CliRunner(mix_stderr=False)\n    except (DeprecationWarning, TypeError):\n        # Click >= 8.2\n        runner = CliRunner()\n\n    result = runner.invoke(cli, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"FLASK_APP\" in result.stderr\n    assert \"Usage:\" in result.stdout", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_help_echo_exception_test_help_echo_exception": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_help_echo_exception_test_help_echo_exception", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 428, "end_line": 443, "span_ids": ["test_help_echo_exception"], "tokens": 106}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_help_echo_exception():\n    def create_app():\n        raise Exception(\"oh no\")\n\n    cli = FlaskGroup(create_app=create_app)\n\n    try:\n        runner = CliRunner(mix_stderr=False)\n    except (DeprecationWarning, TypeError):\n        # Click >= 8.2\n        runner = CliRunner()\n\n    result = runner.invoke(cli, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Exception: oh no\" in result.stderr\n    assert \"Usage:\" in result.stdout", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes_TestRoutes.test_simple": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes_TestRoutes.test_simple", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 446, "end_line": 472, "span_ids": ["TestRoutes", "TestRoutes.app", "TestRoutes.expect_order", "TestRoutes.invoke", "TestRoutes.test_simple"], "tokens": 211}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestRoutes:\n    @pytest.fixture\n    def app(self):\n        app = Flask(__name__)\n        app.add_url_rule(\n            \"/get_post/<int:x>/<int:y>\",\n            methods=[\"GET\", \"POST\"],\n            endpoint=\"yyy_get_post\",\n        )\n        app.add_url_rule(\"/zzz_post\", methods=[\"POST\"], endpoint=\"aaa_post\")\n        return app\n\n    @pytest.fixture\n    def invoke(self, app, runner):\n        cli = FlaskGroup(create_app=lambda: app)\n        return partial(runner.invoke, cli)\n\n    def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:], strict=False):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect\n\n    def test_simple(self, invoke):\n        result = invoke([\"routes\"])\n        assert result.exit_code == 0\n        self.expect_order([\"aaa_post\", \"static\", \"yyy_get_post\"], result.output)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes.test_sort_TestRoutes.test_sort": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes.test_sort_TestRoutes.test_sort", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 474, "end_line": 487, "span_ids": ["TestRoutes.test_sort"], "tokens": 144}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestRoutes:\n\n    def test_sort(self, app, invoke):\n        default_output = invoke([\"routes\"]).output\n        endpoint_output = invoke([\"routes\", \"-s\", \"endpoint\"]).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            [\"static\", \"yyy_get_post\", \"aaa_post\"],\n            invoke([\"routes\", \"-s\", \"methods\"]).output,\n        )\n        self.expect_order(\n            [\"yyy_get_post\", \"static\", \"aaa_post\"],\n            invoke([\"routes\", \"-s\", \"rule\"]).output,\n        )\n        match_order = [r.endpoint for r in app.url_map.iter_rules()]\n        self.expect_order(match_order, invoke([\"routes\", \"-s\", \"match\"]).output)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes.test_all_methods_TestRoutes.test_host": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_TestRoutes.test_all_methods_TestRoutes.test_host", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 489, "end_line": 518, "span_ids": ["TestRoutes.test_all_methods", "TestRoutes.test_host", "TestRoutes.test_no_routes", "TestRoutes.test_subdomain"], "tokens": 303}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestRoutes:\n\n    def test_all_methods(self, invoke):\n        output = invoke([\"routes\"]).output\n        assert \"GET, HEAD, OPTIONS, POST\" not in output\n        output = invoke([\"routes\", \"--all-methods\"]).output\n        assert \"GET, HEAD, OPTIONS, POST\" in output\n\n    def test_no_routes(self, runner):\n        app = Flask(__name__, static_folder=None)\n        cli = FlaskGroup(create_app=lambda: app)\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n        assert \"No routes were registered.\" in result.output\n\n    def test_subdomain(self, runner):\n        app = Flask(__name__, static_folder=None)\n        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n        cli = FlaskGroup(create_app=lambda: app)\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n        assert \"Subdomain\" in result.output\n\n    def test_host(self, runner):\n        app = Flask(__name__, static_folder=None, host_matching=True)\n        app.add_url_rule(\"/a\", host=\"a\", endpoint=\"a\")\n        app.add_url_rule(\"/b\", host=\"b\", endpoint=\"b\")\n        cli = FlaskGroup(create_app=lambda: app)\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n        assert \"Host\" in result.output", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_dotenv_not_available_test_load_dotenv": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_dotenv_not_available_test_load_dotenv", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 521, "end_line": 556, "span_ids": ["dotenv_not_available", "impl:3", "test_load_dotenv"], "tokens": 283}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def dotenv_not_available():\n    try:\n        import dotenv  # noqa: F401\n    except ImportError:\n        return True\n\n    return False\n\n\nneed_dotenv = pytest.mark.skipif(\n    dotenv_not_available(), reason=\"dotenv is not installed\"\n)\n\n\n@need_dotenv\ndef test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in (\"FOO\", \"BAR\", \"SPAM\", \"HAM\"):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv(\"EGGS\", \"3\")\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert Path.cwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ[\"FOO\"] == \"env\"\n    # set only in .flaskenv\n    assert os.environ[\"BAR\"] == \"bar\"\n    # set only in .env\n    assert os.environ[\"SPAM\"] == \"1\"\n    # set manually, files don't overwrite\n    assert os.environ[\"EGGS\"] == \"3\"\n    # test env file encoding\n    assert os.environ[\"HAM\"] == \"\u706b\u817f\"\n    # Non existent file should not load\n    assert not load_dotenv(\"non-existent-file\", load_defaults=False)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_dotenv_path_test_disable_dotenv_from_env": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_dotenv_path_test_disable_dotenv_from_env", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 559, "end_line": 581, "span_ids": ["test_disable_dotenv_from_env", "test_dotenv_optional", "test_dotenv_path"], "tokens": 178}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@need_dotenv\ndef test_dotenv_path(monkeypatch):\n    for item in (\"FOO\", \"BAR\", \"EGGS\"):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    load_dotenv(test_path / \".flaskenv\")\n    assert Path.cwd() == cwd\n    assert \"FOO\" in os.environ\n\n\ndef test_dotenv_optional(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"dotenv\", None)\n    monkeypatch.chdir(test_path)\n    load_dotenv()\n    assert \"FOO\" not in os.environ\n\n\n@need_dotenv\ndef test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, \"FLASK_SKIP_DOTENV\", \"1\")\n    runner.invoke(FlaskGroup())\n    assert \"FOO\" not in os.environ", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_path_test_run_cert_path": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_path_test_run_cert_path", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 584, "end_line": 599, "span_ids": ["test_run_cert_path"], "tokens": 152}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_run_cert_path():\n    # no key\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", __file__])\n\n    # no cert\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--key\", __file__])\n\n    # cert specified first\n    ctx = run_command.make_context(\"run\", [\"--cert\", __file__, \"--key\", __file__])\n    assert ctx.params[\"cert\"] == (__file__, __file__)\n\n    # key specified first\n    ctx = run_command.make_context(\"run\", [\"--key\", __file__, \"--cert\", __file__])\n    assert ctx.params[\"cert\"] == (__file__, __file__)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_adhoc_test_run_cert_adhoc": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_adhoc_test_run_cert_adhoc", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 602, "end_line": 616, "span_ids": ["test_run_cert_adhoc"], "tokens": 147}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"cryptography\", None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, \"cryptography\", types.ModuleType(\"cryptography\"))\n    ctx = run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n    assert ctx.params[\"cert\"] == \"adhoc\"\n\n    # no key with adhoc\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"adhoc\", \"--key\", __file__])", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_import_test_run_cert_no_ssl": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_run_cert_import_test_run_cert_no_ssl", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 619, "end_line": 645, "span_ids": ["test_run_cert_import", "test_run_cert_no_ssl"], "tokens": 226}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_run_cert_import(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"not_here\", None)\n\n    # ImportError\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"not_here\"])\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"flask\"])\n\n    # SSLContext\n    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n    monkeypatch.setitem(sys.modules, \"ssl_context\", ssl_context)\n    ctx = run_command.make_context(\"run\", [\"--cert\", \"ssl_context\"])\n    assert ctx.params[\"cert\"] is ssl_context\n\n    # no --key with SSLContext\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"ssl_context\", \"--key\", __file__])\n\n\ndef test_run_cert_no_ssl(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"ssl\", None)\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"not_here\"])", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_cli_blueprints_test_cli_blueprints.assert_late_result_in_r": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_cli_blueprints_test_cli_blueprints.assert_late_result_in_r", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 648, "end_line": 688, "span_ids": ["test_cli_blueprints"], "tokens": 255}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_cli_blueprints(app):\n    \"\"\"Test blueprint commands register correctly to the application\"\"\"\n    custom = Blueprint(\"custom\", __name__, cli_group=\"customized\")\n    nested = Blueprint(\"nested\", __name__)\n    merged = Blueprint(\"merged\", __name__, cli_group=None)\n    late = Blueprint(\"late\", __name__)\n\n    @custom.cli.command(\"custom\")\n    def custom_command():\n        click.echo(\"custom_result\")\n\n    @nested.cli.command(\"nested\")\n    def nested_command():\n        click.echo(\"nested_result\")\n\n    @merged.cli.command(\"merged\")\n    def merged_command():\n        click.echo(\"merged_result\")\n\n    @late.cli.command(\"late\")\n    def late_command():\n        click.echo(\"late_result\")\n\n    app.register_blueprint(custom)\n    app.register_blueprint(nested)\n    app.register_blueprint(merged)\n    app.register_blueprint(late, cli_group=\"late_registration\")\n\n    app_runner = app.test_cli_runner()\n\n    result = app_runner.invoke(args=[\"customized\", \"custom\"])\n    assert \"custom_result\" in result.output\n\n    result = app_runner.invoke(args=[\"nested\", \"nested\"])\n    assert \"nested_result\" in result.output\n\n    result = app_runner.invoke(args=[\"merged\"])\n    assert \"merged_result\" in result.output\n\n    result = app_runner.invoke(args=[\"late_registration\", \"late\"])\n    assert \"late_result\" in result.output", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_cli_empty_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_cli.py_test_cli_empty_", "embedding": null, "metadata": {"file_path": "tests/test_cli.py", "file_name": "test_cli.py", "file_type": "text/x-python", "category": "test", "start_line": 691, "end_line": 703, "span_ids": ["test_cli_empty", "test_run_exclude_patterns"], "tokens": 119}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_cli_empty(app):\n    \"\"\"If a Blueprint's CLI group is empty, do not register it.\"\"\"\n    bp = Blueprint(\"blue\", __name__, cli_group=\"blue\")\n    app.register_blueprint(bp)\n\n    result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n    assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\"\n\n\ndef test_run_exclude_patterns():\n    ctx = run_command.make_context(\"run\", [\"--exclude-patterns\", __file__])\n    assert ctx.params[\"exclude_patterns\"] == [__file__]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_json_test_config_from_file_toml": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_json_test_config_from_file_toml", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 45, "span_ids": ["common_object_test", "imports", "test_config_from_file_json", "test_config_from_file_toml", "test_config_from_object", "test_config_from_pyfile"], "tokens": 284}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import json\nimport os\n\nimport pytest\n\nimport flask\n\n# config keys used for the TestConfig\nTEST_KEY = \"foo\"\nSECRET_KEY = \"config\"\n\n\ndef common_object_test(app):\n    assert app.secret_key == \"config\"\n    assert app.config[\"TEST_KEY\"] == \"foo\"\n    assert \"TestConfig\" not in app.config\n\n\ndef test_config_from_pyfile():\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n    common_object_test(app)\n\n\ndef test_config_from_object():\n    app = flask.Flask(__name__)\n    app.config.from_object(__name__)\n    common_object_test(app)\n\n\ndef test_config_from_file_json():\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(os.path.join(current_dir, \"static\", \"config.json\"), json.load)\n    common_object_test(app)\n\n\ndef test_config_from_file_toml():\n    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(\n        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, text=False\n    )\n    common_object_test(app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_prefixed_env_test_from_prefixed_env_custom_prefix": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_prefixed_env_test_from_prefixed_env_custom_prefix", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 48, "end_line": 76, "span_ids": ["test_from_prefixed_env", "test_from_prefixed_env_custom_prefix"], "tokens": 282}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_from_prefixed_env(monkeypatch):\n    monkeypatch.setenv(\"FLASK_STRING\", \"value\")\n    monkeypatch.setenv(\"FLASK_BOOL\", \"true\")\n    monkeypatch.setenv(\"FLASK_INT\", \"1\")\n    monkeypatch.setenv(\"FLASK_FLOAT\", \"1.2\")\n    monkeypatch.setenv(\"FLASK_LIST\", \"[1, 2]\")\n    monkeypatch.setenv(\"FLASK_DICT\", '{\"k\": \"v\"}')\n    monkeypatch.setenv(\"NOT_FLASK_OTHER\", \"other\")\n\n    app = flask.Flask(__name__)\n    app.config.from_prefixed_env()\n\n    assert app.config[\"STRING\"] == \"value\"\n    assert app.config[\"BOOL\"] is True\n    assert app.config[\"INT\"] == 1\n    assert app.config[\"FLOAT\"] == 1.2\n    assert app.config[\"LIST\"] == [1, 2]\n    assert app.config[\"DICT\"] == {\"k\": \"v\"}\n    assert \"OTHER\" not in app.config\n\n\ndef test_from_prefixed_env_custom_prefix(monkeypatch):\n    monkeypatch.setenv(\"FLASK_A\", \"a\")\n    monkeypatch.setenv(\"NOT_FLASK_A\", \"b\")\n\n    app = flask.Flask(__name__)\n    app.config.from_prefixed_env(\"NOT_FLASK\")\n\n    assert app.config[\"A\"] == \"b\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_prefixed_env_nested_test_from_prefixed_env_nested.assert_app_config_NEW_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_prefixed_env_nested_test_from_prefixed_env_nested.assert_app_config_NEW_", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 79, "end_line": 107, "span_ids": ["test_from_prefixed_env_nested"], "tokens": 256}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_from_prefixed_env_nested(monkeypatch):\n    monkeypatch.setenv(\"FLASK_EXIST__ok\", \"other\")\n    monkeypatch.setenv(\"FLASK_EXIST__inner__ik\", \"2\")\n    monkeypatch.setenv(\"FLASK_EXIST__new__more\", '{\"k\": false}')\n    monkeypatch.setenv(\"FLASK_NEW__K\", \"v\")\n\n    app = flask.Flask(__name__)\n    app.config[\"EXIST\"] = {\"ok\": \"value\", \"flag\": True, \"inner\": {\"ik\": 1}}\n    app.config.from_prefixed_env()\n\n    if os.name != \"nt\":\n        assert app.config[\"EXIST\"] == {\n            \"ok\": \"other\",\n            \"flag\": True,\n            \"inner\": {\"ik\": 2},\n            \"new\": {\"more\": {\"k\": False}},\n        }\n    else:\n        # Windows env var keys are always uppercase.\n        assert app.config[\"EXIST\"] == {\n            \"ok\": \"value\",\n            \"OK\": \"other\",\n            \"flag\": True,\n            \"inner\": {\"ik\": 1},\n            \"INNER\": {\"IK\": 2},\n            \"NEW\": {\"MORE\": {\"k\": False}},\n        }\n\n    assert app.config[\"NEW\"] == {\"K\": \"v\"}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_mapping_test_config_from_mapping": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_mapping_test_config_from_mapping", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 110, "end_line": 129, "span_ids": ["test_config_from_mapping"], "tokens": 165}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_config_from_mapping():\n    app = flask.Flask(__name__)\n    app.config.from_mapping({\"SECRET_KEY\": \"config\", \"TEST_KEY\": \"foo\"})\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping([(\"SECRET_KEY\", \"config\"), (\"TEST_KEY\", \"foo\")])\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY=\"config\", TEST_KEY=\"foo\")\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY=\"config\", TEST_KEY=\"foo\", skip_key=\"skip\")\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    with pytest.raises(TypeError):\n        app.config.from_mapping({}, {})", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_class_test_config_from_envvar": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_class_test_config_from_envvar", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 132, "end_line": 158, "span_ids": ["test_config_from_class", "test_config_from_envvar"], "tokens": 185}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_config_from_class():\n    class Base:\n        TEST_KEY = \"foo\"\n\n    class Test(Base):\n        SECRET_KEY = \"config\"\n\n    app = flask.Flask(__name__)\n    app.config.from_object(Test)\n    common_object_test(app)\n\n\ndef test_config_from_envvar(monkeypatch):\n    monkeypatch.setattr(\"os.environ\", {})\n    app = flask.Flask(__name__)\n\n    with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar(\"FOO_SETTINGS\")\n\n    assert \"'FOO_SETTINGS' is not set\" in str(e.value)\n    assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n\n    monkeypatch.setattr(\n        \"os.environ\", {\"FOO_SETTINGS\": f\"{__file__.rsplit('.', 1)[0]}.py\"}\n    )\n    assert app.config.from_envvar(\"FOO_SETTINGS\")\n    common_object_test(app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_envvar_missing_test_config_from_envvar_missing": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_from_envvar_missing_test_config_from_envvar_missing", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 161, "end_line": 171, "span_ids": ["test_config_from_envvar_missing"], "tokens": 117}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_config_from_envvar_missing(monkeypatch):\n    monkeypatch.setattr(\"os.environ\", {\"FOO_SETTINGS\": \"missing.cfg\"})\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_envvar(\"FOO_SETTINGS\")\n    msg = str(e.value)\n    assert msg.startswith(\n        \"[Errno 2] Unable to load configuration file (No such file or directory):\"\n    )\n    assert msg.endswith(\"missing.cfg'\")\n    assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_missing_test_session_lifetime": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_config_missing_test_session_lifetime", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 174, "end_line": 214, "span_ids": ["test_config_missing", "test_config_missing_file", "test_custom_config_class", "test_session_lifetime"], "tokens": 290}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_config_missing():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_pyfile(\"missing.cfg\")\n    msg = str(e.value)\n    assert msg.startswith(\n        \"[Errno 2] Unable to load configuration file (No such file or directory):\"\n    )\n    assert msg.endswith(\"missing.cfg'\")\n    assert not app.config.from_pyfile(\"missing.cfg\", silent=True)\n\n\ndef test_config_missing_file():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_file(\"missing.json\", load=json.load)\n    msg = str(e.value)\n    assert msg.startswith(\n        \"[Errno 2] Unable to load configuration file (No such file or directory):\"\n    )\n    assert msg.endswith(\"missing.json'\")\n    assert not app.config.from_file(\"missing.json\", load=json.load, silent=True)\n\n\ndef test_custom_config_class():\n    class Config(flask.Config):\n        pass\n\n    class Flask(flask.Flask):\n        config_class = Config\n\n    app = Flask(__name__)\n    assert isinstance(app.config, Config)\n    app.config.from_object(__name__)\n    common_object_test(app)\n\n\ndef test_session_lifetime():\n    app = flask.Flask(__name__)\n    app.config[\"PERMANENT_SESSION_LIFETIME\"] = 42\n    assert app.permanent_session_lifetime.seconds == 42", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_get_namespace_test_get_namespace": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_get_namespace_test_get_namespace", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 217, "end_line": 240, "span_ids": ["test_get_namespace"], "tokens": 319}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_get_namespace():\n    app = flask.Flask(__name__)\n    app.config[\"FOO_OPTION_1\"] = \"foo option 1\"\n    app.config[\"FOO_OPTION_2\"] = \"foo option 2\"\n    app.config[\"BAR_STUFF_1\"] = \"bar stuff 1\"\n    app.config[\"BAR_STUFF_2\"] = \"bar stuff 2\"\n    foo_options = app.config.get_namespace(\"FOO_\")\n    assert 2 == len(foo_options)\n    assert \"foo option 1\" == foo_options[\"option_1\"]\n    assert \"foo option 2\" == foo_options[\"option_2\"]\n    bar_options = app.config.get_namespace(\"BAR_\", lowercase=False)\n    assert 2 == len(bar_options)\n    assert \"bar stuff 1\" == bar_options[\"STUFF_1\"]\n    assert \"bar stuff 2\" == bar_options[\"STUFF_2\"]\n    foo_options = app.config.get_namespace(\"FOO_\", trim_namespace=False)\n    assert 2 == len(foo_options)\n    assert \"foo option 1\" == foo_options[\"foo_option_1\"]\n    assert \"foo option 2\" == foo_options[\"foo_option_2\"]\n    bar_options = app.config.get_namespace(\n        \"BAR_\", lowercase=False, trim_namespace=False\n    )\n    assert 2 == len(bar_options)\n    assert \"bar stuff 1\" == bar_options[\"BAR_STUFF_1\"]\n    assert \"bar stuff 2\" == bar_options[\"BAR_STUFF_2\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_pyfile_weird_encoding_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_config.py_test_from_pyfile_weird_encoding_", "embedding": null, "metadata": {"file_path": "tests/test_config.py", "file_name": "test_config.py", "file_type": "text/x-python", "category": "test", "start_line": 243, "end_line": 251, "span_ids": ["test_from_pyfile_weird_encoding"], "tokens": 113}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"encoding\", [\"utf-8\", \"iso-8859-15\", \"latin-1\"])\ndef test_from_pyfile_weird_encoding(tmp_path, encoding):\n    f = tmp_path / \"my_config.py\"\n    f.write_text(f'# -*- coding: {encoding} -*-\\nTEST_VALUE = \"f\u00f6\u00f6\"\\n', encoding)\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(os.fspath(f))\n    value = app.config[\"TEST_VALUE\"]\n    assert value == \"f\u00f6\u00f6\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_converters.py_from_werkzeug_routing_imp_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_converters.py_from_werkzeug_routing_imp_", "embedding": null, "metadata": {"file_path": "tests/test_converters.py", "file_name": "test_converters.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 43, "span_ids": ["imports", "test_context_available", "test_custom_converters"], "tokens": 256}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from werkzeug.routing import BaseConverter\n\nfrom flask import request\nfrom flask import session\nfrom flask import url_for\n\n\ndef test_custom_converters(app, client):\n    class ListConverter(BaseConverter):\n        def to_python(self, value):\n            return value.split(\",\")\n\n        def to_url(self, value):\n            base_to_url = super().to_url\n            return \",\".join(base_to_url(x) for x in value)\n\n    app.url_map.converters[\"list\"] = ListConverter\n\n    @app.route(\"/<list:args>\")\n    def index(args):\n        return \"|\".join(args)\n\n    assert client.get(\"/1,2,3\").data == b\"1|2|3\"\n\n    with app.test_request_context():\n        assert url_for(\"index\", args=[4, 5, 6]) == \"/4,5,6\"\n\n\ndef test_context_available(app, client):\n    class ContextConverter(BaseConverter):\n        def to_python(self, value):\n            assert request is not None\n            assert session is not None\n            return value\n\n    app.url_map.converters[\"ctx\"] = ContextConverter\n\n    @app.get(\"/<ctx:name>\")\n    def index(name):\n        return name\n\n    assert client.get(\"/admin\").data == b\"admin\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_io_PyBytesIO.__getattr__": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_io_PyBytesIO.__getattr__", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 30, "span_ids": ["FakePath", "FakePath.__fspath__", "FakePath.__init__", "PyBytesIO", "PyBytesIO.__getattr__", "PyBytesIO.__init__", "imports"], "tokens": 143}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import io\nimport os\n\nimport pytest\nimport werkzeug.exceptions\n\nimport flask\nfrom flask.helpers import get_debug_flag\n\n\nclass FakePath:\n    \"\"\"Fake object to represent a ``PathLike object``.\n\n    This represents a ``pathlib.Path`` object in python 3.\n    See: https://www.python.org/dev/peps/pep-0519/\n    \"\"\"\n\n    def __init__(self, path):\n        self.path = path\n\n    def __fspath__(self):\n        return self.path\n\n\nclass PyBytesIO:\n    def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs)\n\n    def __getattr__(self, name):\n        return getattr(self._io, name)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestSendfile_TestSendfile.test_send_from_directory": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestSendfile_TestSendfile.test_send_from_directory", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 33, "end_line": 99, "span_ids": ["TestSendfile", "TestSendfile.test_send_file", "TestSendfile.test_send_from_directory", "TestSendfile.test_static_file"], "tokens": 448}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestSendfile:\n    def test_send_file(self, app, req_ctx):\n        rv = flask.send_file(\"static/index.html\")\n        assert rv.direct_passthrough\n        assert rv.mimetype == \"text/html\"\n\n        with app.open_resource(\"static/index.html\") as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close()\n\n    def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file(\"index.html\")\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file(\"static/index.html\")\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file(\"index.html\")\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file(\"static/index.html\")\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath(\"index.html\"))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file(\"index.html\")\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file(\"static/index.html\")\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n    def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), \"test_apps\", \"subdomaintestmodule\"\n        )\n        rv = flask.send_from_directory(\"static\", \"hello.txt\")\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b\"Hello Subdomain\"\n        rv.close()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestUrlFor_TestUrlFor.test_url_for_with_alternating_schemes": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestUrlFor_TestUrlFor.test_url_for_with_alternating_schemes", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 102, "end_line": 141, "span_ids": ["TestUrlFor", "TestUrlFor.test_url_for_with_alternating_schemes", "TestUrlFor.test_url_for_with_anchor", "TestUrlFor.test_url_for_with_scheme", "TestUrlFor.test_url_for_with_scheme_not_external"], "tokens": 289}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestUrlFor:\n    def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route(\"/\")\n        def index():\n            return \"42\"\n\n        assert flask.url_for(\"index\", _anchor=\"x y\") == \"/#x%20y\"\n\n    def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route(\"/\")\n        def index():\n            return \"42\"\n\n        assert (\n            flask.url_for(\"index\", _external=True, _scheme=\"https\")\n            == \"https://localhost/\"\n        )\n\n    def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        app.add_url_rule(\"/\", endpoint=\"index\")\n\n        # Implicit external with scheme.\n        url = flask.url_for(\"index\", _scheme=\"https\")\n        assert url == \"https://localhost/\"\n\n        # Error when external=False with scheme\n        with pytest.raises(ValueError):\n            flask.url_for(\"index\", _scheme=\"https\", _external=False)\n\n    def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route(\"/\")\n        def index():\n            return \"42\"\n\n        assert flask.url_for(\"index\", _external=True) == \"http://localhost/\"\n        assert (\n            flask.url_for(\"index\", _external=True, _scheme=\"https\")\n            == \"https://localhost/\"\n        )\n        assert flask.url_for(\"index\", _external=True) == \"http://localhost/\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestUrlFor.test_url_with_method_TestUrlFor.test_url_for_with_self": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestUrlFor.test_url_with_method_TestUrlFor.test_url_for_with_self", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 143, "end_line": 169, "span_ids": ["TestUrlFor.test_url_for_with_self", "TestUrlFor.test_url_with_method"], "tokens": 246}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestUrlFor:\n\n    def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return \"List\"\n                return f\"Get {id:d}\"\n\n            def post(self):\n                return \"Create\"\n\n        myview = MyView.as_view(\"myview\")\n        app.add_url_rule(\"/myview/\", methods=[\"GET\"], view_func=myview)\n        app.add_url_rule(\"/myview/<int:id>\", methods=[\"GET\"], view_func=myview)\n        app.add_url_rule(\"/myview/create\", methods=[\"POST\"], view_func=myview)\n\n        assert flask.url_for(\"myview\", _method=\"GET\") == \"/myview/\"\n        assert flask.url_for(\"myview\", id=42, _method=\"GET\") == \"/myview/42\"\n        assert flask.url_for(\"myview\", _method=\"POST\") == \"/myview/create\"\n\n    def test_url_for_with_self(self, app, req_ctx):\n        @app.route(\"/<self>\")\n        def index(self):\n            return \"42\"\n\n        assert flask.url_for(\"index\", self=\"2\") == \"/2\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_test_redirect_no_app_test_abort_with_app": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_test_redirect_no_app_test_abort_with_app", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 172, "end_line": 214, "span_ids": ["test_abort_no_app", "test_abort_with_app", "test_app_aborter_class", "test_redirect_no_app", "test_redirect_with_app"], "tokens": 235}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_redirect_no_app():\n    response = flask.redirect(\"https://localhost\", 307)\n    assert response.location == \"https://localhost\"\n    assert response.status_code == 307\n\n\ndef test_redirect_with_app(app):\n    def redirect(location, code=302):\n        raise ValueError\n\n    app.redirect = redirect\n\n    with app.app_context(), pytest.raises(ValueError):\n        flask.redirect(\"other\")\n\n\ndef test_abort_no_app():\n    with pytest.raises(werkzeug.exceptions.Unauthorized):\n        flask.abort(401)\n\n    with pytest.raises(LookupError):\n        flask.abort(900)\n\n\ndef test_app_aborter_class():\n    class MyAborter(werkzeug.exceptions.Aborter):\n        pass\n\n    class MyFlask(flask.Flask):\n        aborter_class = MyAborter\n\n    app = MyFlask(__name__)\n    assert isinstance(app.aborter, MyAborter)\n\n\ndef test_abort_with_app(app):\n    class My900Error(werkzeug.exceptions.HTTPException):\n        code = 900\n\n    app.aborter.mapping[900] = My900Error\n\n    with app.app_context(), pytest.raises(My900Error):\n        flask.abort(900)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestNoImports_TestNoImports.test_name_with_import_error": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestNoImports_TestNoImports.test_name_with_import_error", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 217, "end_line": 233, "span_ids": ["TestNoImports", "TestNoImports.test_name_with_import_error"], "tokens": 168}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestNoImports:\n    \"\"\"Test Flasks are created without import.\n\n    Avoiding ``__import__`` helps create Flask instances where there are errors\n    at import time.  Those runtime errors will be apparent to the user soon\n    enough, but tools which build Flask instances meta-programmatically benefit\n    from a Flask which does not ``__import__``.  Instead of importing to\n    retrieve file paths or metadata on a module or package, use the pkgutil and\n    imp modules in the Python standard library.\n    \"\"\"\n\n    def test_name_with_import_error(self, modules_tmp_path):\n        (modules_tmp_path / \"importerror.py\").write_text(\"raise NotImplementedError()\")\n        try:\n            flask.Flask(\"importerror\")\n        except NotImplementedError:\n            AssertionError(\"Flask(import_name) is importing import_name.\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming_TestStreaming.test_streaming_with_context_as_decorator": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming_TestStreaming.test_streaming_with_context_as_decorator", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 236, "end_line": 262, "span_ids": ["TestStreaming", "TestStreaming.test_streaming_with_context", "TestStreaming.test_streaming_with_context_as_decorator"], "tokens": 163}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestStreaming:\n    def test_streaming_with_context(self, app, client):\n        @app.route(\"/\")\n        def index():\n            def generate():\n                yield \"Hello \"\n                yield flask.request.args[\"name\"]\n                yield \"!\"\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get(\"/?name=World\")\n        assert rv.data == b\"Hello World!\"\n\n    def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route(\"/\")\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args[\"name\"]\n                yield \"!\"\n\n            return flask.Response(generate(\"Hello \"))\n\n        rv = client.get(\"/?name=World\")\n        assert rv.data == b\"Hello World!\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming.test_streaming_with_context_and_custom_close_TestStreaming.test_streaming_with_context_and_custom_close.assert_called_42_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming.test_streaming_with_context_and_custom_close_TestStreaming.test_streaming_with_context_and_custom_close.assert_called_42_", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 264, "end_line": 293, "span_ids": ["TestStreaming.test_streaming_with_context_and_custom_close"], "tokens": 139}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestStreaming:\n\n    def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route(\"/\")\n        def index():\n            def generate():\n                yield \"Hello \"\n                yield flask.request.args[\"name\"]\n                yield \"!\"\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get(\"/?name=World\")\n        assert rv.data == b\"Hello World!\"\n        assert called == [42]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming.test_stream_keeps_session_TestStreaming.test_async_view": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestStreaming.test_stream_keeps_session_TestStreaming.test_async_view", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 295, "end_line": 330, "span_ids": ["TestStreaming.test_async_view", "TestStreaming.test_stream_keeps_session"], "tokens": 199}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestStreaming:\n\n    def test_stream_keeps_session(self, app, client):\n        @app.route(\"/\")\n        def index():\n            flask.session[\"test\"] = \"flask\"\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session[\"test\"]\n\n            return flask.Response(gen())\n\n        rv = client.get(\"/\")\n        assert rv.data == b\"flask\"\n\n    def test_async_view(self, app, client):\n        @app.route(\"/\")\n        async def index():\n            flask.session[\"test\"] = \"flask\"\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session[\"test\"]\n\n            return flask.Response(gen())\n\n        # response is closed without reading stream\n        client.get().close()\n        # response stream is read\n        assert client.get().text == \"flask\"\n\n        # same as above, but with client context preservation\n        with client:\n            client.get().close()\n\n        with client:\n            assert client.get().text == \"flask\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestHelpers_TestHelpers.test_make_response": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_TestHelpers_TestHelpers.test_make_response", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 333, "end_line": 358, "span_ids": ["TestHelpers", "TestHelpers.test_get_debug_flag", "TestHelpers.test_make_response"], "tokens": 172}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestHelpers:\n    @pytest.mark.parametrize(\n        (\"debug\", \"expect\"),\n        [\n            (\"\", False),\n            (\"0\", False),\n            (\"False\", False),\n            (\"No\", False),\n            (\"True\", True),\n        ],\n    )\n    def test_get_debug_flag(self, monkeypatch, debug, expect):\n        monkeypatch.setenv(\"FLASK_DEBUG\", debug)\n        assert get_debug_flag() == expect\n\n    def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == \"text/html\"\n\n            rv = flask.helpers.make_response(\"Hello\")\n            assert rv.status_code == 200\n            assert rv.data == b\"Hello\"\n            assert rv.mimetype == \"text/html\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_test_open_resource_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_helpers.py_test_open_resource_", "embedding": null, "metadata": {"file_path": "tests/test_helpers.py", "file_name": "test_helpers.py", "file_type": "text/x-python", "category": "test", "start_line": 361, "end_line": 384, "span_ids": ["test_open_resource", "test_open_resource_exceptions", "test_open_resource_with_encoding"], "tokens": 203}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"mode\", (\"r\", \"rb\", \"rt\"))\ndef test_open_resource(mode):\n    app = flask.Flask(__name__)\n\n    with app.open_resource(\"static/index.html\", mode) as f:\n        assert \"<h1>Hello World!</h1>\" in str(f.read())\n\n\n@pytest.mark.parametrize(\"mode\", (\"w\", \"x\", \"a\", \"r+\"))\ndef test_open_resource_exceptions(mode):\n    app = flask.Flask(__name__)\n\n    with pytest.raises(ValueError):\n        app.open_resource(\"static/index.html\", mode)\n\n\n@pytest.mark.parametrize(\"encoding\", (\"utf-8\", \"utf-16-le\"))\ndef test_open_resource_with_encoding(tmp_path, encoding):\n    app = flask.Flask(__name__, root_path=os.fspath(tmp_path))\n    (tmp_path / \"test\").write_text(\"test\", encoding=encoding)\n\n    with app.open_resource(\"test\", mode=\"rt\", encoding=encoding) as f:\n        assert f.read() == \"test\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_os_test_uninstalled_module_paths": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_os_test_uninstalled_module_paths", "embedding": null, "metadata": {"file_path": "tests/test_instance_config.py", "file_name": "test_instance_config.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 27, "span_ids": ["imports", "test_explicit_instance_paths", "test_uninstalled_module_paths"], "tokens": 180}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import os\n\nimport pytest\n\nimport flask\n\n\ndef test_explicit_instance_paths(modules_tmp_path):\n    with pytest.raises(ValueError, match=\".*must be absolute\"):\n        flask.Flask(__name__, instance_path=\"instance\")\n\n    app = flask.Flask(__name__, instance_path=os.fspath(modules_tmp_path))\n    assert app.instance_path == os.fspath(modules_tmp_path)\n\n\ndef test_uninstalled_module_paths(modules_tmp_path, purge_module):\n    (modules_tmp_path / \"config_module_app.py\").write_text(\n        \"import os\\n\"\n        \"import flask\\n\"\n        \"here = os.path.abspath(os.path.dirname(__file__))\\n\"\n        \"app = flask.Flask(__name__)\\n\"\n    )\n    purge_module(\"config_module_app\")\n\n    from config_module_app import app\n\n    assert app.instance_path == os.fspath(modules_tmp_path / \"instance\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_uninstalled_package_paths_test_uninstalled_package_paths": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_uninstalled_package_paths_test_uninstalled_package_paths", "embedding": null, "metadata": {"file_path": "tests/test_instance_config.py", "file_name": "test_instance_config.py", "file_type": "text/x-python", "category": "test", "start_line": 30, "end_line": 43, "span_ids": ["test_uninstalled_package_paths"], "tokens": 118}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_uninstalled_package_paths(modules_tmp_path, purge_module):\n    app = modules_tmp_path / \"config_package_app\"\n    app.mkdir()\n    (app / \"__init__.py\").write_text(\n        \"import os\\n\"\n        \"import flask\\n\"\n        \"here = os.path.abspath(os.path.dirname(__file__))\\n\"\n        \"app = flask.Flask(__name__)\\n\"\n    )\n    purge_module(\"config_package_app\")\n\n    from config_package_app import app\n\n    assert app.instance_path == os.fspath(modules_tmp_path / \"instance\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_uninstalled_namespace_paths_test_uninstalled_namespace_paths": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_uninstalled_namespace_paths_test_uninstalled_namespace_paths", "embedding": null, "metadata": {"file_path": "tests/test_instance_config.py", "file_name": "test_instance_config.py", "file_type": "text/x-python", "category": "test", "start_line": 46, "end_line": 62, "span_ids": ["test_uninstalled_namespace_paths"], "tokens": 149}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_uninstalled_namespace_paths(tmp_path, monkeypatch, purge_module):\n    def create_namespace(package):\n        project = tmp_path / f\"project-{package}\"\n        monkeypatch.syspath_prepend(os.fspath(project))\n        ns = project / \"namespace\" / package\n        ns.mkdir(parents=True)\n        (ns / \"__init__.py\").write_text(\"import flask\\napp = flask.Flask(__name__)\\n\")\n        return project\n\n    _ = create_namespace(\"package1\")\n    project2 = create_namespace(\"package2\")\n    purge_module(\"namespace.package2\")\n    purge_module(\"namespace\")\n\n    from namespace.package2 import app\n\n    assert app.instance_path == os.fspath(project2 / \"instance\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_installed_module_paths_test_installed_package_paths": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_installed_module_paths_test_installed_package_paths", "embedding": null, "metadata": {"file_path": "tests/test_instance_config.py", "file_name": "test_instance_config.py", "file_type": "text/x-python", "category": "test", "start_line": 65, "end_line": 96, "span_ids": ["test_installed_module_paths", "test_installed_package_paths"], "tokens": 224}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_installed_module_paths(\n    modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages\n):\n    (site_packages / \"site_app.py\").write_text(\n        \"import flask\\napp = flask.Flask(__name__)\\n\"\n    )\n    purge_module(\"site_app\")\n\n    from site_app import app\n\n    assert app.instance_path == os.fspath(\n        modules_tmp_path / \"var\" / \"site_app-instance\"\n    )\n\n\ndef test_installed_package_paths(\n    modules_tmp_path, modules_tmp_path_prefix, purge_module, monkeypatch\n):\n    installed_path = modules_tmp_path / \"path\"\n    installed_path.mkdir()\n    monkeypatch.syspath_prepend(installed_path)\n\n    app = installed_path / \"installed_package\"\n    app.mkdir()\n    (app / \"__init__.py\").write_text(\"import flask\\napp = flask.Flask(__name__)\\n\")\n    purge_module(\"installed_package\")\n\n    from installed_package import app\n\n    assert app.instance_path == os.fspath(\n        modules_tmp_path / \"var\" / \"installed_package-instance\"\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_prefix_package_paths_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_instance_config.py_test_prefix_package_paths_", "embedding": null, "metadata": {"file_path": "tests/test_instance_config.py", "file_name": "test_instance_config.py", "file_type": "text/x-python", "category": "test", "start_line": 99, "end_line": 112, "span_ids": ["test_prefix_package_paths"], "tokens": 103}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_prefix_package_paths(\n    modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages\n):\n    app = site_packages / \"site_package\"\n    app.mkdir()\n    (app / \"__init__.py\").write_text(\"import flask\\napp = flask.Flask(__name__)\\n\")\n    purge_module(\"site_package\")\n\n    import site_package\n\n    assert site_package.app.instance_path == os.fspath(\n        modules_tmp_path / \"var\" / \"site_package-instance\"\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_datetime_test_bad_request_debug_message": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_datetime_test_bad_request_debug_message", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 27, "span_ids": ["imports", "test_bad_request_debug_message"], "tokens": 148}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import datetime\nimport decimal\nimport io\nimport uuid\n\nimport pytest\nfrom werkzeug.http import http_date\n\nimport flask\nfrom flask import json\nfrom flask.json.provider import DefaultJSONProvider\n\n\n@pytest.mark.parametrize(\"debug\", (True, False))\ndef test_bad_request_debug_message(app, client, debug):\n    app.config[\"DEBUG\"] = debug\n    app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = False\n\n    @app.route(\"/json\", methods=[\"POST\"])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post(\"/json\", data=None, content_type=\"application/json\")\n    assert rv.status_code == 400\n    contains = b\"Failed to decode JSON object\" in rv.data\n    assert contains == debug", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_bad_requests_test_json_dump_to_file": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_bad_requests_test_json_dump_to_file", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 30, "end_line": 64, "span_ids": ["test_json_as_unicode", "test_json_bad_requests", "test_json_custom_mimetypes", "test_json_dump_to_file"], "tokens": 260}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_json_bad_requests(app, client):\n    @app.route(\"/json\", methods=[\"POST\"])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json()))\n\n    rv = client.post(\"/json\", data=\"malformed\", content_type=\"application/json\")\n    assert rv.status_code == 400\n\n\ndef test_json_custom_mimetypes(app, client):\n    @app.route(\"/json\", methods=[\"POST\"])\n    def return_json():\n        return flask.request.get_json()\n\n    rv = client.post(\"/json\", data='\"foo\"', content_type=\"application/x+json\")\n    assert rv.data == b\"foo\"\n\n\n@pytest.mark.parametrize(\n    \"test_value,expected\", [(True, '\"\\\\u2603\"'), (False, '\"\\u2603\"')]\n)\ndef test_json_as_unicode(test_value, expected, app, app_ctx):\n    app.json.ensure_ascii = test_value\n    rv = app.json.dumps(\"\\N{SNOWMAN}\")\n    assert rv == expected\n\n\ndef test_json_dump_to_file(app, app_ctx):\n    test_data = {\"name\": \"Flask\"}\n    out = io.StringIO()\n\n    flask.json.dump(test_data, out)\n    out.seek(0)\n    rv = flask.json.load(out)\n    assert rv == test_data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_basic_types_test_jsonify_basic_types": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_basic_types_test_jsonify_basic_types", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 67, "end_line": 75, "span_ids": ["test_jsonify_basic_types"], "tokens": 110}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    \"test_value\", [0, -1, 1, 23, 3.14, \"s\", \"longer string\", True, False, None]\n)\ndef test_jsonify_basic_types(test_value, app, client):\n    url = \"/jsonify_basic_types\"\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == \"application/json\"\n    assert flask.json.loads(rv.data) == test_value", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_dicts_test_jsonify_dicts": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_dicts_test_jsonify_dicts", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 78, "end_line": 102, "span_ids": ["test_jsonify_dicts"], "tokens": 163}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_jsonify_dicts(app, client):\n    d = {\n        \"a\": 0,\n        \"b\": 23,\n        \"c\": 3.14,\n        \"d\": \"t\",\n        \"e\": \"Hi\",\n        \"f\": True,\n        \"g\": False,\n        \"h\": [\"test list\", 10, False],\n        \"i\": {\"test\": \"dict\"},\n    }\n\n    @app.route(\"/kw\")\n    def return_kwargs():\n        return flask.jsonify(**d)\n\n    @app.route(\"/dict\")\n    def return_dict():\n        return flask.jsonify(d)\n\n    for url in \"/kw\", \"/dict\":\n        rv = client.get(url)\n        assert rv.mimetype == \"application/json\"\n        assert flask.json.loads(rv.data) == d", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_arrays_test_jsonify_arrays.for_url_in_args_unpack_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_arrays_test_jsonify_arrays.for_url_in_args_unpack_", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 105, "end_line": 130, "span_ids": ["test_jsonify_arrays"], "tokens": 147}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_jsonify_arrays(app, client):\n    \"\"\"Test jsonify of lists and args unpacking.\"\"\"\n    a_list = [\n        0,\n        42,\n        3.14,\n        \"t\",\n        \"hello\",\n        True,\n        False,\n        [\"test list\", 2, False],\n        {\"test\": \"dict\"},\n    ]\n\n    @app.route(\"/args_unpack\")\n    def return_args_unpack():\n        return flask.jsonify(*a_list)\n\n    @app.route(\"/array\")\n    def return_array():\n        return flask.jsonify(a_list)\n\n    for url in \"/args_unpack\", \"/array\":\n        rv = client.get(url)\n        assert rv.mimetype == \"application/json\"\n        assert flask.json.loads(rv.data) == a_list", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_datetime_FixedOffset.dst": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_datetime_FixedOffset.dst", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 133, "end_line": 163, "span_ids": ["FixedOffset", "FixedOffset.__init__", "FixedOffset.dst", "FixedOffset.tzname", "FixedOffset.utcoffset", "test_jsonify_datetime"], "tokens": 202}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\n    \"value\", [datetime.datetime(1973, 3, 11, 6, 30, 45), datetime.date(1975, 1, 5)]\n)\ndef test_jsonify_datetime(app, client, value):\n    @app.route(\"/\")\n    def index():\n        return flask.jsonify(value=value)\n\n    r = client.get()\n    assert r.json[\"value\"] == http_date(value)\n\n\nclass FixedOffset(datetime.tzinfo):\n    \"\"\"Fixed offset in hours east from UTC.\n\n    This is a slight adaptation of the ``FixedOffset`` example found in\n    https://docs.python.org/2.7/library/datetime.html.\n    \"\"\"\n\n    def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name\n\n    def utcoffset(self, dt):\n        return self.__offset\n\n    def tzname(self, dt):\n        return self.__name\n\n    def dst(self, dt):\n        return datetime.timedelta()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_aware_datetimes_test_jsonify_aware_datetimes": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_aware_datetimes_test_jsonify_aware_datetimes", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 166, "end_line": 173, "span_ids": ["test_jsonify_aware_datetimes"], "tokens": 152}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.parametrize(\"tz\", ((\"UTC\", 0), (\"PST\", -8), (\"KST\", 9)))\ndef test_jsonify_aware_datetimes(tz):\n    \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name=\"GMT\")\n    expected = dt.astimezone(gmt).strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n    assert flask.json.dumps(dt) == expected", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_uuid_types_test_jsonify_uuid_types": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_jsonify_uuid_types_test_jsonify_uuid_types", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 176, "end_line": 188, "span_ids": ["test_jsonify_uuid_types"], "tokens": 109}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_jsonify_uuid_types(app, client):\n    \"\"\"Test jsonify with uuid.UUID types\"\"\"\n\n    test_uuid = uuid.UUID(bytes=b\"\\xde\\xad\\xbe\\xef\" * 4)\n    url = \"/uuid_test\"\n    app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n\n    rv = client.get(url)\n\n    rv_x = flask.json.loads(rv.data)[\"x\"]\n    assert rv_x == str(test_uuid)\n    rv_uuid = uuid.UUID(rv_x)\n    assert rv_uuid == test_uuid", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_decimal_test_json_attr": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_decimal_test_json_attr", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 191, "end_line": 207, "span_ids": ["test_json_attr", "test_json_decimal"], "tokens": 117}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_json_decimal():\n    rv = flask.json.dumps(decimal.Decimal(\"0.003\"))\n    assert rv == '\"0.003\"'\n\n\ndef test_json_attr(app, client):\n    @app.route(\"/add\", methods=[\"POST\"])\n    def add():\n        json = flask.request.get_json()\n        return str(json[\"a\"] + json[\"b\"])\n\n    rv = client.post(\n        \"/add\",\n        data=flask.json.dumps({\"a\": 1, \"b\": 2}),\n        content_type=\"application/json\",\n    )\n    assert rv.data == b\"3\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_tojson_filter_test_tojson_filter": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_tojson_filter_test_tojson_filter", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 210, "end_line": 220, "span_ids": ["test_tojson_filter"], "tokens": 135}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        \"const data = {{ data|tojson }};\",\n        data={\"name\": \"</script>\", \"time\": datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {\"name\": \"\\\\u003c/script\\\\u003e\",'\n        ' \"time\": \"Mon, 01 Feb 2021 07:15:00 GMT\"};'\n    )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_customization__has_encoding": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_customization__has_encoding", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 223, "end_line": 267, "span_ids": ["_has_encoding", "test_json_customization"], "tokens": 243}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_json_customization(app, client):\n    class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val\n\n    def default(o):\n        if isinstance(o, X):\n            return f\"<{o.val}>\"\n\n        return DefaultJSONProvider.default(o)\n\n    class CustomProvider(DefaultJSONProvider):\n        def object_hook(self, obj):\n            if len(obj) == 1 and \"_foo\" in obj:\n                return X(obj[\"_foo\"])\n\n            return obj\n\n        def loads(self, s, **kwargs):\n            kwargs.setdefault(\"object_hook\", self.object_hook)\n            return super().loads(s, **kwargs)\n\n    app.json = CustomProvider(app)\n    app.json.default = default\n\n    @app.route(\"/\", methods=[\"POST\"])\n    def index():\n        return flask.json.dumps(flask.request.get_json()[\"x\"])\n\n    rv = client.post(\n        \"/\",\n        data=flask.json.dumps({\"x\": {\"_foo\": 42}}),\n        content_type=\"application/json\",\n    )\n    assert rv.data == b'\"<42>\"'\n\n\ndef _has_encoding(name):\n    try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_key_sorting_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json.py_test_json_key_sorting_", "embedding": null, "metadata": {"file_path": "tests/test_json.py", "file_name": "test_json.py", "file_type": "text/x-python", "category": "test", "start_line": 270, "end_line": 347, "span_ids": ["test_html_method", "test_json_key_sorting"], "tokens": 506}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_json_key_sorting(app, client):\n    app.debug = True\n    assert app.json.sort_keys\n    d = dict.fromkeys(range(20), \"foo\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.jsonify(values=d)\n\n    rv = client.get(\"/\")\n    lines = [x.strip() for x in rv.data.strip().decode(\"utf-8\").splitlines()]\n    sorted_by_str = [\n        \"{\",\n        '\"values\": {',\n        '\"0\": \"foo\",',\n        '\"1\": \"foo\",',\n        '\"10\": \"foo\",',\n        '\"11\": \"foo\",',\n        '\"12\": \"foo\",',\n        '\"13\": \"foo\",',\n        '\"14\": \"foo\",',\n        '\"15\": \"foo\",',\n        '\"16\": \"foo\",',\n        '\"17\": \"foo\",',\n        '\"18\": \"foo\",',\n        '\"19\": \"foo\",',\n        '\"2\": \"foo\",',\n        '\"3\": \"foo\",',\n        '\"4\": \"foo\",',\n        '\"5\": \"foo\",',\n        '\"6\": \"foo\",',\n        '\"7\": \"foo\",',\n        '\"8\": \"foo\",',\n        '\"9\": \"foo\"',\n        \"}\",\n        \"}\",\n    ]\n    sorted_by_int = [\n        \"{\",\n        '\"values\": {',\n        '\"0\": \"foo\",',\n        '\"1\": \"foo\",',\n        '\"2\": \"foo\",',\n        '\"3\": \"foo\",',\n        '\"4\": \"foo\",',\n        '\"5\": \"foo\",',\n        '\"6\": \"foo\",',\n        '\"7\": \"foo\",',\n        '\"8\": \"foo\",',\n        '\"9\": \"foo\",',\n        '\"10\": \"foo\",',\n        '\"11\": \"foo\",',\n        '\"12\": \"foo\",',\n        '\"13\": \"foo\",',\n        '\"14\": \"foo\",',\n        '\"15\": \"foo\",',\n        '\"16\": \"foo\",',\n        '\"17\": \"foo\",',\n        '\"18\": \"foo\",',\n        '\"19\": \"foo\"',\n        \"}\",\n        \"}\",\n    ]\n\n    try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str\n\n\ndef test_html_method():\n    class ObjectWithHTML:\n        def __html__(self):\n            return \"<p>test</p>\"\n\n    result = json.dumps(ObjectWithHTML())\n    assert result == '\"<p>test</p>\"'", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_from_datetime_import_date_test_dump_load_unchanged": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_from_datetime_import_date_test_dump_load_unchanged", "embedding": null, "metadata": {"file_path": "tests/test_json_tag.py", "file_name": "test_json_tag.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 29, "span_ids": ["imports", "test_dump_load_unchanged"], "tokens": 175}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from datetime import datetime\nfrom datetime import timezone\nfrom uuid import uuid4\n\nimport pytest\nfrom markupsafe import Markup\n\nfrom flask.json.tag import JSONTag\nfrom flask.json.tag import TaggedJSONSerializer\n\n\n@pytest.mark.parametrize(\n    \"data\",\n    (\n        {\" t\": (1, 2, 3)},\n        {\" t__\": b\"a\"},\n        {\" di\": \" di\"},\n        {\"x\": (1, 2, 3), \"y\": 4},\n        (1, 2, 3),\n        [(1, 2, 3)],\n        b\"\\xff\",\n        Markup(\"<html>\"),\n        uuid4(),\n        datetime.now(tz=timezone.utc).replace(microsecond=0),\n    ),\n)\ndef test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_test_duplicate_tag_test_custom_tag": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_test_duplicate_tag_test_custom_tag", "embedding": null, "metadata": {"file_path": "tests/test_json_tag.py", "file_name": "test_json_tag.py", "file_type": "text/x-python", "category": "test", "start_line": 32, "end_line": 63, "span_ids": ["test_custom_tag", "test_duplicate_tag"], "tokens": 202}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_duplicate_tag():\n    class TagDict(JSONTag):\n        key = \" d\"\n\n    s = TaggedJSONSerializer()\n    pytest.raises(KeyError, s.register, TagDict)\n    s.register(TagDict, force=True, index=0)\n    assert isinstance(s.tags[\" d\"], TagDict)\n    assert isinstance(s.order[0], TagDict)\n\n\ndef test_custom_tag():\n    class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data\n\n    class TagFoo(JSONTag):\n        __slots__ = ()\n        key = \" f\"\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value)\n\n    s = TaggedJSONSerializer()\n    s.register(TagFoo)\n    assert s.loads(s.dumps(Foo(\"bar\"))).data == \"bar\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_test_tag_interface_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_json_tag.py_test_tag_interface_", "embedding": null, "metadata": {"file_path": "tests/test_json_tag.py", "file_name": "test_json_tag.py", "file_type": "text/x-python", "category": "test", "start_line": 66, "end_line": 87, "span_ids": ["test_tag_interface", "test_tag_order"], "tokens": 135}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_tag_interface():\n    t = JSONTag(None)\n    pytest.raises(NotImplementedError, t.check, None)\n    pytest.raises(NotImplementedError, t.to_json, None)\n    pytest.raises(NotImplementedError, t.to_python, None)\n\n\ndef test_tag_order():\n    class Tag1(JSONTag):\n        key = \" 1\"\n\n    class Tag2(JSONTag):\n        key = \" 2\"\n\n    s = TaggedJSONSerializer()\n\n    s.register(Tag1, index=-1)\n    assert isinstance(s.order[-2], Tag1)\n\n    s.register(Tag2, index=None)\n    assert isinstance(s.order[-1], Tag2)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_logging.py_logging_reset_logging": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_logging.py_logging_reset_logging", "embedding": null, "metadata": {"file_path": "tests/test_logging.py", "file_name": "test_logging.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 33, "span_ids": ["imports", "reset_logging"], "tokens": 152}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import logging\nimport sys\nfrom io import StringIO\n\nimport pytest\n\nfrom flask.logging import default_handler\nfrom flask.logging import has_level_handler\nfrom flask.logging import wsgi_errors_stream\n\n\n@pytest.fixture(autouse=True)\ndef reset_logging(pytestconfig):\n    root_handlers = logging.root.handlers[:]\n    logging.root.handlers = []\n    root_level = logging.root.level\n\n    logger = logging.getLogger(\"flask_test\")\n    logger.handlers = []\n    logger.setLevel(logging.NOTSET)\n\n    logging_plugin = pytestconfig.pluginmanager.unregister(name=\"logging-plugin\")\n\n    yield\n\n    logging.root.handlers[:] = root_handlers\n    logging.root.setLevel(root_level)\n\n    logger.handlers = []\n    logger.setLevel(logging.NOTSET)\n\n    if logging_plugin:\n        pytestconfig.pluginmanager.register(logging_plugin, \"logging-plugin\")", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_logging.py_test_logger_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_logging.py_test_logger_", "embedding": null, "metadata": {"file_path": "tests/test_logging.py", "file_name": "test_logging.py", "file_type": "text/x-python", "category": "test", "start_line": 36, "end_line": 99, "span_ids": ["test_existing_handler", "test_has_level_handler", "test_log_view_exception", "test_logger", "test_logger_debug", "test_wsgi_errors_stream"], "tokens": 360}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_logger(app):\n    assert app.logger.name == \"flask_test\"\n    assert app.logger.level == logging.NOTSET\n    assert app.logger.handlers == [default_handler]\n\n\ndef test_logger_debug(app):\n    app.debug = True\n    assert app.logger.level == logging.DEBUG\n    assert app.logger.handlers == [default_handler]\n\n\ndef test_existing_handler(app):\n    logging.root.addHandler(logging.StreamHandler())\n    assert app.logger.level == logging.NOTSET\n    assert not app.logger.handlers\n\n\ndef test_wsgi_errors_stream(app, client):\n    @app.route(\"/\")\n    def index():\n        app.logger.error(\"test\")\n        return \"\"\n\n    stream = StringIO()\n    client.get(\"/\", errors_stream=stream)\n    assert \"ERROR in test_logging: test\" in stream.getvalue()\n\n    assert wsgi_errors_stream._get_current_object() is sys.stderr\n\n    with app.test_request_context(errors_stream=stream):\n        assert wsgi_errors_stream._get_current_object() is stream\n\n\ndef test_has_level_handler():\n    logger = logging.getLogger(\"flask.app\")\n    assert not has_level_handler(logger)\n\n    handler = logging.StreamHandler()\n    logging.root.addHandler(handler)\n    assert has_level_handler(logger)\n\n    logger.propagate = False\n    assert not has_level_handler(logger)\n    logger.propagate = True\n\n    handler.setLevel(logging.ERROR)\n    assert not has_level_handler(logger)\n\n\ndef test_log_view_exception(app, client):\n    @app.route(\"/\")\n    def index():\n        raise Exception(\"test\")\n\n    app.testing = False\n    stream = StringIO()\n    rv = client.get(\"/\", errors_stream=stream)\n    assert rv.status_code == 500\n    assert rv.data\n    err = stream.getvalue()\n    assert \"Exception on / [GET]\" in err\n    assert \"Exception: test\" in err", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_regression.py_flask_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_regression.py_flask_", "embedding": null, "metadata": {"file_path": "tests/test_regression.py", "file_name": "test_regression.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 31, "span_ids": ["imports", "test_aborting"], "tokens": 156}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import flask\n\n\ndef test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route(\"/\")\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for(\"test\")))\n\n    @app.route(\"/test\")\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get(\"/\")\n        location_parts = rv.headers[\"Location\"].rpartition(\"/\")\n\n        if location_parts[0]:\n            # For older Werkzeug that used absolute redirects.\n            assert location_parts[0] == \"http://localhost\"\n\n        assert location_parts[2] == \"test\"\n        rv = c.get(\"/test\")\n        assert rv.data == b\"42\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_warnings_test_teardown_with_handled_exception": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_warnings_test_teardown_with_handled_exception", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 60, "span_ids": ["imports", "test_teardown_on_pop", "test_teardown_with_handled_exception", "test_teardown_with_previous_exception"], "tokens": 239}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import warnings\n\nimport pytest\n\nimport flask\nfrom flask.globals import app_ctx\nfrom flask.sessions import SecureCookieSessionInterface\nfrom flask.sessions import SessionInterface\n\ntry:\n    from greenlet import greenlet\nexcept ImportError:\n    greenlet = None\n\n\ndef test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None]\n\n\ndef test_teardown_with_previous_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    try:\n        raise Exception(\"dummy\")\n    except Exception:\n        pass\n\n    with app.test_request_context():\n        assert buffer == []\n    assert buffer == [None]\n\n\ndef test_teardown_with_handled_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception(\"dummy\")\n        except Exception:\n            pass\n    assert buffer == [None]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_proper_test_request_context_test_proper_test_request_context.with_app_test_request_con_4": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_proper_test_request_context_test_proper_test_request_context.with_app_test_request_con_4", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 63, "end_line": 104, "span_ids": ["test_proper_test_request_context"], "tokens": 247}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_proper_test_request_context(app):\n    app.config.update(SERVER_NAME=\"localhost.localdomain:5000\")\n\n    @app.route(\"/\")\n    def index():\n        return None\n\n    @app.route(\"/\", subdomain=\"foo\")\n    def sub():\n        return None\n\n    with app.test_request_context(\"/\"):\n        assert (\n            flask.url_for(\"index\", _external=True)\n            == \"http://localhost.localdomain:5000/\"\n        )\n\n    with app.test_request_context(\"/\"):\n        assert (\n            flask.url_for(\"sub\", _external=True)\n            == \"http://foo.localhost.localdomain:5000/\"\n        )\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\n            \"ignore\", \"Current server name\", UserWarning, \"flask.app\"\n        )\n        with app.test_request_context(\n            \"/\", environ_overrides={\"HTTP_HOST\": \"localhost\"}\n        ):\n            pass\n\n    app.config.update(SERVER_NAME=\"localhost\")\n    with app.test_request_context(\"/\", environ_overrides={\"SERVER_NAME\": \"localhost\"}):\n        pass\n\n    app.config.update(SERVER_NAME=\"localhost:80\")\n    with app.test_request_context(\n        \"/\", environ_overrides={\"SERVER_NAME\": \"localhost:80\"}\n    ):\n        pass", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_context_binding_test_manual_context_binding": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_context_binding_test_manual_context_binding", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 107, "end_line": 145, "span_ids": ["test_context_binding", "test_context_test", "test_manual_context_binding"], "tokens": 221}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_context_binding(app):\n    @app.route(\"/\")\n    def index():\n        return f\"Hello {flask.request.args['name']}!\"\n\n    @app.route(\"/meh\")\n    def meh():\n        return flask.request.url\n\n    with app.test_request_context(\"/?name=World\"):\n        assert index() == \"Hello World!\"\n    with app.test_request_context(\"/meh\"):\n        assert meh() == \"http://localhost/meh\"\n    assert not flask.request\n\n\ndef test_context_test(app):\n    assert not flask.request\n    assert not flask.has_request_context()\n    ctx = app.test_request_context()\n    ctx.push()\n    try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop()\n\n\ndef test_manual_context_binding(app):\n    @app.route(\"/\")\n    def index():\n        return f\"Hello {flask.request.args['name']}!\"\n\n    ctx = app.test_request_context(\"/?name=World\")\n    ctx.push()\n    assert index() == \"Hello World!\"\n    ctx.pop()\n    with pytest.raises(RuntimeError):\n        index()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_TestGreenletContextCopying_TestGreenletContextCopying.test_greenlet_context_copying.assert_result_42": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_TestGreenletContextCopying_TestGreenletContextCopying.test_greenlet_context_copying.assert_result_42", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 148, "end_line": 177, "span_ids": ["TestGreenletContextCopying", "TestGreenletContextCopying.test_greenlet_context_copying"], "tokens": 191}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.skipif(greenlet is None, reason=\"greenlet not installed\")\nclass TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route(\"/\")\n        def index():\n            flask.session[\"fizz\"] = \"buzz\"\n            ctx = app_ctx.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with ctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == \"/\"\n                    assert flask.request.args[\"foo\"] == \"bar\"\n                    assert flask.session.get(\"fizz\") == \"buzz\"\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return \"Hello World!\"\n\n        rv = client.get(\"/?foo=bar\")\n        assert rv.data == b\"Hello World!\"\n\n        result = greenlets[0].run()\n        assert result == 42", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_TestGreenletContextCopying.test_greenlet_context_copying_api_TestGreenletContextCopying.test_greenlet_context_copying_api": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_TestGreenletContextCopying.test_greenlet_context_copying_api_TestGreenletContextCopying.test_greenlet_context_copying_api", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 179, "end_line": 202, "span_ids": ["TestGreenletContextCopying.test_greenlet_context_copying_api"], "tokens": 154}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "@pytest.mark.skipif(greenlet is None, reason=\"greenlet not installed\")\nclass TestGreenletContextCopying:\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route(\"/\")\n        def index():\n            flask.session[\"fizz\"] = \"buzz\"\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == \"/\"\n                assert flask.request.args[\"foo\"] == \"bar\"\n                assert flask.session.get(\"fizz\") == \"buzz\"\n                return 42\n\n            greenlets.append(greenlet(g))\n            return \"Hello World!\"\n\n        rv = client.get(\"/?foo=bar\")\n        assert rv.data == b\"Hello World!\"\n\n        result = greenlets[0].run()\n        assert result == 42", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_session_error_pops_context_test_session_error_pops_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_session_error_pops_context_test_session_error_pops_context", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 205, "end_line": 226, "span_ids": ["test_session_error_pops_context"], "tokens": 118}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_error_pops_context():\n    class SessionError(Exception):\n        pass\n\n    class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError()\n\n    class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface()\n\n    app = CustomFlask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        # shouldn't get here\n        AssertionError()\n\n    response = app.test_client().get(\"/\")\n    assert response.status_code == 500\n    assert not flask.request\n    assert not flask.current_app", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_session_dynamic_cookie_name_test_session_dynamic_cookie_name.assert_test_client_get__4": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_session_dynamic_cookie_name_test_session_dynamic_cookie_name.assert_test_client_get__4", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 229, "end_line": 277, "span_ids": ["test_session_dynamic_cookie_name"], "tokens": 377}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_dynamic_cookie_name():\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string \"dynamic_cookie\"\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith(\"dynamic_cookie\"):\n                return \"dynamic_cookie_name\"\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface()\n\n    app = CustomFlask(__name__)\n    app.secret_key = \"secret_key\"\n\n    @app.route(\"/set\", methods=[\"POST\"])\n    def set():\n        flask.session[\"value\"] = flask.request.form[\"value\"]\n        return \"value set\"\n\n    @app.route(\"/get\")\n    def get():\n        v = flask.session.get(\"value\", \"None\")\n        return v\n\n    @app.route(\"/set_dynamic_cookie\", methods=[\"POST\"])\n    def set_dynamic_cookie():\n        flask.session[\"value\"] = flask.request.form[\"value\"]\n        return \"value set\"\n\n    @app.route(\"/get_dynamic_cookie\")\n    def get_dynamic_cookie():\n        v = flask.session.get(\"value\", \"None\")\n        return v\n\n    test_client = app.test_client()\n\n    # first set the cookie in both /set urls but each with a different value\n    assert test_client.post(\"/set\", data={\"value\": \"42\"}).data == b\"value set\"\n    assert (\n        test_client.post(\"/set_dynamic_cookie\", data={\"value\": \"616\"}).data\n        == b\"value set\"\n    )\n\n    # now check that the relevant values come back - meaning that different\n    # cookies are being used for the urls that end with \"dynamic cookie\"\n    assert test_client.get(\"/get\").data == b\"42\"\n    assert test_client.get(\"/get_dynamic_cookie\").data == b\"616\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_bad_environ_raises_bad_request_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_reqctx.py_test_bad_environ_raises_bad_request_", "embedding": null, "metadata": {"file_path": "tests/test_reqctx.py", "file_name": "test_reqctx.py", "file_type": "text/x-python", "category": "test", "start_line": 280, "end_line": 326, "span_ids": ["test_bad_environ_raises_bad_request", "test_environ_for_valid_idna_completes", "test_normal_environ_completes"], "tokens": 276}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_bad_environ_raises_bad_request():\n    app = flask.Flask(__name__)\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # use a non-printable character in the Host - this is key to this test\n    environ[\"HTTP_HOST\"] = \"\\x8a\"\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n    assert response.status_code == 400\n\n\ndef test_environ_for_valid_idna_completes():\n    app = flask.Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello World!\"\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # these characters are all IDNA-compatible\n    environ[\"HTTP_HOST\"] = \"\u0105\u015b\u017a\u00e4\u00fc\u0436\u0160\u00df\u044f.com\"\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n\n    assert response.status_code == 200\n\n\ndef test_normal_environ_completes():\n    app = flask.Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello World!\"\n\n    response = app.test_client().get(\"/\", headers={\"host\": \"xn--on-0ia.com\"})\n    assert response.status_code == 200", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_from___future___import_an_test_max_content_length": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_from___future___import_an_test_max_content_length", "embedding": null, "metadata": {"file_path": "tests/test_request.py", "file_name": "test_request.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 22, "span_ids": ["imports", "test_max_content_length"], "tokens": 115}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nfrom flask import Flask\nfrom flask import Request\nfrom flask import request\nfrom flask.testing import FlaskClient\n\n\ndef test_max_content_length(app: Flask, client: FlaskClient) -> None:\n    app.config[\"MAX_CONTENT_LENGTH\"] = 50\n\n    @app.post(\"/\")\n    def index():\n        request.form[\"myfile\"]\n        AssertionError()\n\n    @app.errorhandler(413)\n    def catcher(error):\n        return \"42\"\n\n    rv = client.post(\"/\", data={\"myfile\": \"foo\" * 50})\n    assert rv.data == b\"42\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_test_limit_config_test_limit_config.with_app_app_context__1": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_test_limit_config_test_limit_config.with_app_app_context__1", "embedding": null, "metadata": {"file_path": "tests/test_request.py", "file_name": "test_request.py", "file_type": "text/x-python", "category": "test", "start_line": 25, "end_line": 54, "span_ids": ["test_limit_config"], "tokens": 214}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_limit_config(app: Flask):\n    app.config[\"MAX_CONTENT_LENGTH\"] = 100\n    app.config[\"MAX_FORM_MEMORY_SIZE\"] = 50\n    app.config[\"MAX_FORM_PARTS\"] = 3\n    r = Request({})\n\n    # no app context, use Werkzeug defaults\n    assert r.max_content_length is None\n    assert r.max_form_memory_size == 500_000\n    assert r.max_form_parts == 1_000\n\n    # in app context, use config\n    with app.app_context():\n        assert r.max_content_length == 100\n        assert r.max_form_memory_size == 50\n        assert r.max_form_parts == 3\n\n    # regardless of app context, use override\n    r.max_content_length = 90\n    r.max_form_memory_size = 30\n    r.max_form_parts = 4\n\n    assert r.max_content_length == 90\n    assert r.max_form_memory_size == 30\n    assert r.max_form_parts == 4\n\n    with app.app_context():\n        assert r.max_content_length == 90\n        assert r.max_form_memory_size == 30\n        assert r.max_form_parts == 4", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_test_trusted_hosts_config_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_request.py_test_trusted_hosts_config_", "embedding": null, "metadata": {"file_path": "tests/test_request.py", "file_name": "test_request.py", "file_type": "text/x-python", "category": "test", "start_line": 57, "end_line": 71, "span_ids": ["test_trusted_hosts_config"], "tokens": 120}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_trusted_hosts_config(app: Flask) -> None:\n    app.config[\"TRUSTED_HOSTS\"] = [\"example.test\", \".other.test\"]\n\n    @app.get(\"/\")\n    def index() -> str:\n        return \"\"\n\n    client = app.test_client()\n    r = client.get(base_url=\"http://example.test\")\n    assert r.status_code == 200\n    r = client.get(base_url=\"http://a.other.test\")\n    assert r.status_code == 200\n    r = client.get(base_url=\"http://bad.test\")\n    assert r.status_code == 400", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_session_interface.py_flask_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_session_interface.py_flask_", "embedding": null, "metadata": {"file_path": "tests/test_session_interface.py", "file_name": "test_session_interface.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 29, "span_ids": ["imports", "test_open_session_with_endpoint"], "tokens": 154}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import flask\nfrom flask.globals import app_ctx\nfrom flask.sessions import SessionInterface\n\n\ndef test_open_session_with_endpoint():\n    \"\"\"If request.endpoint (or other URL matching behavior) is needed\n    while loading the session, RequestContext.match_request() can be\n    called manually.\n    \"\"\"\n\n    class MySessionInterface(SessionInterface):\n        def save_session(self, app, session, response):\n            pass\n\n        def open_session(self, app, request):\n            app_ctx.match_request()\n            assert request.endpoint is not None\n\n    app = flask.Flask(__name__)\n    app.session_interface = MySessionInterface()\n\n    @app.get(\"/\")\n    def index():\n        return \"Hello, World!\"\n\n    response = app.test_client().get(\"/\")\n    assert response.status_code == 200", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_flask_test_template_rendered": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_flask_test_template_rendered", "embedding": null, "metadata": {"file_path": "tests/test_signals.py", "file_name": "test_signals.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 22, "span_ids": ["imports", "test_template_rendered"], "tokens": 125}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import flask\n\n\ndef test_template_rendered(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"simple_template.html\", whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        recorded.append((template, context))\n\n    flask.template_rendered.connect(record, app)\n    try:\n        client.get(\"/\")\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == \"simple_template.html\"\n        assert context[\"whiskey\"] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_before_render_template_test_before_render_template": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_before_render_template_test_before_render_template", "embedding": null, "metadata": {"file_path": "tests/test_signals.py", "file_name": "test_signals.py", "file_type": "text/x-python", "category": "test", "start_line": 25, "end_line": 47, "span_ids": ["test_before_render_template"], "tokens": 159}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_before_render_template():\n    app = flask.Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"simple_template.html\", whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        context[\"whiskey\"] = 43\n        recorded.append((template, context))\n\n    flask.before_render_template.connect(record, app)\n    try:\n        rv = app.test_client().get(\"/\")\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == \"simple_template.html\"\n        assert context[\"whiskey\"] == 43\n        assert rv.data == b\"<h1>43</h1>\"\n    finally:\n        flask.before_render_template.disconnect(record, app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_request_signals_test_request_signals.try_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_request_signals_test_request_signals.try_", "embedding": null, "metadata": {"file_path": "tests/test_signals.py", "file_name": "test_signals.py", "file_type": "text/x-python", "category": "test", "start_line": 50, "end_line": 92, "span_ids": ["test_request_signals"], "tokens": 219}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_request_signals():\n    app = flask.Flask(__name__)\n    calls = []\n\n    def before_request_signal(sender):\n        calls.append(\"before-signal\")\n\n    def after_request_signal(sender, response):\n        assert response.data == b\"stuff\"\n        calls.append(\"after-signal\")\n\n    @app.before_request\n    def before_request_handler():\n        calls.append(\"before-handler\")\n\n    @app.after_request\n    def after_request_handler(response):\n        calls.append(\"after-handler\")\n        response.data = \"stuff\"\n        return response\n\n    @app.route(\"/\")\n    def index():\n        calls.append(\"handler\")\n        return \"ignored anyway\"\n\n    flask.request_started.connect(before_request_signal, app)\n    flask.request_finished.connect(after_request_signal, app)\n\n    try:\n        rv = app.test_client().get(\"/\")\n        assert rv.data == b\"stuff\"\n\n        assert calls == [\n            \"before-signal\",\n            \"before-handler\",\n            \"handler\",\n            \"after-handler\",\n            \"after-signal\",\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_request_exception_signal_test_request_exception_signal": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_request_exception_signal_test_request_exception_signal", "embedding": null, "metadata": {"file_path": "tests/test_signals.py", "file_name": "test_signals.py", "file_type": "text/x-python", "category": "test", "start_line": 95, "end_line": 112, "span_ids": ["test_request_exception_signal"], "tokens": 111}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_request_exception_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    def record(sender, exception):\n        recorded.append(exception)\n\n    flask.got_request_exception.connect(record, app)\n    try:\n        assert app.test_client().get(\"/\").status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_appcontext_signals_test_appcontext_signals": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_appcontext_signals_test_appcontext_signals", "embedding": null, "metadata": {"file_path": "tests/test_signals.py", "file_name": "test_signals.py", "file_type": "text/x-python", "category": "test", "start_line": 115, "end_line": 136, "span_ids": ["test_appcontext_signals"], "tokens": 136}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_appcontext_signals(app, client):\n    recorded = []\n\n    def record_push(sender, **kwargs):\n        recorded.append(\"push\")\n\n    def record_pop(sender, **kwargs):\n        recorded.append(\"pop\")\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello\"\n\n    flask.appcontext_pushed.connect(record_push, app)\n    flask.appcontext_popped.connect(record_pop, app)\n    try:\n        rv = client.get(\"/\")\n        assert rv.data == b\"Hello\"\n        assert recorded == [\"push\", \"pop\"]\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_flash_signal_test_flash_signal": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_flash_signal_test_flash_signal", "embedding": null, "metadata": {"file_path": "tests/test_signals.py", "file_name": "test_signals.py", "file_type": "text/x-python", "category": "test", "start_line": 139, "end_line": 160, "span_ids": ["test_flash_signal"], "tokens": 137}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_flash_signal(app):\n    @app.route(\"/\")\n    def index():\n        flask.flash(\"This is a flash message\", category=\"notice\")\n        return flask.redirect(\"/other\")\n\n    recorded = []\n\n    def record(sender, message, category):\n        recorded.append((message, category))\n\n    flask.message_flashed.connect(record, app)\n    try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get(\"/\")\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == \"This is a flash message\"\n            assert category == \"notice\"\n    finally:\n        flask.message_flashed.disconnect(record, app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_appcontext_tearing_down_signal_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_signals.py_test_appcontext_tearing_down_signal_", "embedding": null, "metadata": {"file_path": "tests/test_signals.py", "file_name": "test_signals.py", "file_type": "text/x-python", "category": "test", "start_line": 163, "end_line": 182, "span_ids": ["test_appcontext_tearing_down_signal"], "tokens": 122}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_appcontext_tearing_down_signal(app, client):\n    app.testing = False\n    recorded = []\n\n    def record_teardown(sender, exc):\n        recorded.append(exc)\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    flask.appcontext_tearing_down.connect(record_teardown, app)\n    try:\n        rv = client.get(\"/\")\n        assert rv.status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_subclassing.py_from_io_import_StringIO_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_subclassing.py_from_io_import_StringIO_", "embedding": null, "metadata": {"file_path": "tests/test_subclassing.py", "file_name": "test_subclassing.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 22, "span_ids": ["imports", "test_suppressed_exception_logging"], "tokens": 106}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from io import StringIO\n\nimport flask\n\n\ndef test_suppressed_exception_logging():\n    class SuppressedFlask(flask.Flask):\n        def log_exception(self, exc_info):\n            pass\n\n    out = StringIO()\n    app = SuppressedFlask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        raise Exception(\"test\")\n\n    rv = app.test_client().get(\"/\", errors_stream=out)\n    assert rv.status_code == 500\n    assert b\"Internal Server Error\" in rv.data\n    assert not out.getvalue()", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_logging_test_request_less_rendering": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_logging_test_request_less_rendering", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 50, "span_ids": ["imports", "test_context_processing", "test_original_win", "test_request_less_rendering", "test_simple_stream"], "tokens": 261}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import logging\n\nimport pytest\nimport werkzeug.serving\nfrom jinja2 import TemplateNotFound\nfrom markupsafe import Markup\n\nimport flask\n\n\ndef test_context_processing(app, client):\n    @app.context_processor\n    def context_processor():\n        return {\"injected_value\": 42}\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"context_template.html\", value=23)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"<p>23|42\"\n\n\ndef test_original_win(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template_string(\"{{ config }}\", config=42)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"42\"\n\n\ndef test_simple_stream(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.stream_template_string(\"{{ config }}\", config=42)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"42\"\n\n\ndef test_request_less_rendering(app, app_ctx):\n    app.config[\"WORLD_NAME\"] = \"Special World\"\n\n    @app.context_processor\n    def context_processor():\n        return dict(foo=42)\n\n    rv = flask.render_template_string(\"Hello {{ config.WORLD_NAME }} {{ foo }}\")\n    assert rv == \"Hello Special World 42\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_standard_context_test_standard_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_standard_context_test_standard_context", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 53, "end_line": 68, "span_ids": ["test_standard_context"], "tokens": 104}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_standard_context(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.g.foo = 23\n        flask.session[\"test\"] = \"aha\"\n        return flask.render_template_string(\n            \"\"\"\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        \"\"\"\n        )\n\n    rv = client.get(\"/?foo=42\")\n    assert rv.data.split() == [b\"42\", b\"23\", b\"False\", b\"aha\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_escaping_test_escaping": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_escaping_test_escaping", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 71, "end_line": 88, "span_ids": ["test_escaping"], "tokens": 113}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_escaping(app, client):\n    text = \"<p>Hello World!\"\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\n            \"escaping_template.html\", text=text, html=Markup(text)\n        )\n\n    lines = client.get(\"/\").data.splitlines()\n    assert lines == [\n        b\"&lt;p&gt;Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"&lt;p&gt;Hello World!\",\n        b\"<p>Hello World!\",\n    ]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_no_escaping_test_macros": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_no_escaping_test_macros", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 91, "end_line": 120, "span_ids": ["test_escaping_without_template_filename", "test_macros", "test_no_escaping"], "tokens": 215}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_no_escaping(app, client):\n    text = \"<p>Hello World!\"\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\n            \"non_escaping_template.txt\", text=text, html=Markup(text)\n        )\n\n    lines = client.get(\"/\").data.splitlines()\n    assert lines == [\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"&lt;p&gt;Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n    ]\n\n\ndef test_escaping_without_template_filename(app, client, req_ctx):\n    assert flask.render_template_string(\"{{ foo }}\", foo=\"<test>\") == \"&lt;test&gt;\"\n    assert flask.render_template(\"mail.txt\", foo=\"<test>\") == \"<test> Mail\"\n\n\ndef test_macros(app, req_ctx):\n    macro = flask.get_template_attribute(\"_macro.html\", \"hello\")\n    assert macro(\"World\") == \"Hello World!\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_filter_test_template_filter.assert_app_jinja_env_filt_11": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_filter_test_template_filter.assert_app_jinja_env_filt_11", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 123, "end_line": 154, "span_ids": ["test_template_filter"], "tokens": 303}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n\n    @app.template_filter\n    def my_reverse_2(s):\n        return s[::-1]\n\n    assert \"my_reverse_2\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse_2\"] == my_reverse_2\n    assert app.jinja_env.filters[\"my_reverse_2\"](\"abcd\") == \"dcba\"\n\n    @app.template_filter(\"my_reverse_custom_name_3\")\n    def my_reverse_3(s):\n        return s[::-1]\n\n    assert \"my_reverse_custom_name_3\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse_custom_name_3\"] == my_reverse_3\n    assert app.jinja_env.filters[\"my_reverse_custom_name_3\"](\"abcd\") == \"dcba\"\n\n    @app.template_filter(name=\"my_reverse_custom_name_4\")\n    def my_reverse_4(s):\n        return s[::-1]\n\n    assert \"my_reverse_custom_name_4\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse_custom_name_4\"] == my_reverse_4\n    assert app.jinja_env.filters[\"my_reverse_custom_name_4\"](\"abcd\") == \"dcba\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_filter_test_add_template_filter_with_name_and_template": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_filter_test_add_template_filter_with_name_and_template", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 157, "end_line": 238, "span_ids": ["test_add_template_filter", "test_add_template_filter_with_name", "test_add_template_filter_with_name_and_template", "test_add_template_filter_with_template", "test_template_filter_with_name", "test_template_filter_with_name_and_template", "test_template_filter_with_template"], "tokens": 518}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_add_template_filter(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse)\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n\n\ndef test_template_filter_with_name(app):\n    @app.template_filter(\"strrev\")\n    def my_reverse(s):\n        return s[::-1]\n\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"\n\n\ndef test_add_template_filter_with_name(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, \"strrev\")\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"\n\n\ndef test_template_filter_with_template(app, client):\n    @app.template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"\n\n\ndef test_add_template_filter_with_template(app, client):\n    def super_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(super_reverse)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"\n\n\ndef test_template_filter_with_name_and_template(app, client):\n    @app.template_filter(\"super_reverse\")\n    def my_reverse(s):\n        return s[::-1]\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"\n\n\ndef test_add_template_filter_with_name_and_template(app, client):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, \"super_reverse\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_test_test_template_test.assert_app_jinja_env_test_11": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_test_test_template_test.assert_app_jinja_env_test_11", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 241, "end_line": 272, "span_ids": ["test_template_test"], "tokens": 261}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_template_test(app):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == boolean\n    assert app.jinja_env.tests[\"boolean\"](False)\n\n    @app.template_test\n    def boolean_2(value):\n        return isinstance(value, bool)\n\n    assert \"boolean_2\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean_2\"] == boolean_2\n    assert app.jinja_env.tests[\"boolean_2\"](False)\n\n    @app.template_test(\"my_boolean_custom_name\")\n    def boolean_3(value):\n        return isinstance(value, bool)\n\n    assert \"my_boolean_custom_name\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"my_boolean_custom_name\"] == boolean_3\n    assert app.jinja_env.tests[\"my_boolean_custom_name\"](False)\n\n    @app.template_test(name=\"my_boolean_custom_name_2\")\n    def boolean_4(value):\n        return isinstance(value, bool)\n\n    assert \"my_boolean_custom_name_2\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"my_boolean_custom_name_2\"] == boolean_4\n    assert app.jinja_env.tests[\"my_boolean_custom_name_2\"](False)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_test_test_add_template_test_with_name_and_template": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_test_test_add_template_test_with_name_and_template", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 275, "end_line": 356, "span_ids": ["test_add_template_test", "test_add_template_test_with_name", "test_add_template_test_with_name_and_template", "test_add_template_test_with_template", "test_template_test_with_name", "test_template_test_with_name_and_template", "test_template_test_with_template"], "tokens": 480}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == boolean\n    assert app.jinja_env.tests[\"boolean\"](False)\n\n\ndef test_template_test_with_name(app):\n    @app.template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)\n\n\ndef test_add_template_test_with_name(app):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, \"boolean\")\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)\n\n\ndef test_template_test_with_template(app, client):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data\n\n\ndef test_add_template_test_with_template(app, client):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data\n\n\ndef test_template_test_with_name_and_template(app, client):\n    @app.template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data\n\n\ndef test_add_template_test_with_name_and_template(app, client):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, \"boolean\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_global_test_add_template_global.assert_rv_get_stuff_3": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_add_template_global_test_add_template_global.assert_rv_get_stuff_3", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 359, "end_line": 402, "span_ids": ["test_add_template_global"], "tokens": 416}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_add_template_global(app, app_ctx):\n    @app.template_global()\n    def get_stuff():\n        return 42\n\n    assert \"get_stuff\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"get_stuff\"] == get_stuff\n    assert app.jinja_env.globals[\"get_stuff\"](), 42\n\n    rv = flask.render_template_string(\"{{ get_stuff() }}\")\n    assert rv == \"42\"\n\n    @app.template_global\n    def get_stuff_1():\n        return \"get_stuff_1\"\n\n    assert \"get_stuff_1\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"get_stuff_1\"] == get_stuff_1\n    assert app.jinja_env.globals[\"get_stuff_1\"](), \"get_stuff_1\"\n\n    rv = flask.render_template_string(\"{{ get_stuff_1() }}\")\n    assert rv == \"get_stuff_1\"\n\n    @app.template_global(\"my_get_stuff_custom_name_2\")\n    def get_stuff_2():\n        return \"get_stuff_2\"\n\n    assert \"my_get_stuff_custom_name_2\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_2\"] == get_stuff_2\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_2\"](), \"get_stuff_2\"\n\n    rv = flask.render_template_string(\"{{ my_get_stuff_custom_name_2() }}\")\n    assert rv == \"get_stuff_2\"\n\n    @app.template_global(name=\"my_get_stuff_custom_name_3\")\n    def get_stuff_3():\n        return \"get_stuff_3\"\n\n    assert \"my_get_stuff_custom_name_3\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_3\"] == get_stuff_3\n    assert app.jinja_env.globals[\"my_get_stuff_custom_name_3\"](), \"get_stuff_3\"\n\n    rv = flask.render_template_string(\"{{ my_get_stuff_custom_name_3() }}\")\n    assert rv == \"get_stuff_3\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_custom_template_loader_test_custom_template_loader": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_custom_template_loader_test_custom_template_loader", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 405, "end_line": 420, "span_ids": ["test_custom_template_loader"], "tokens": 100}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_custom_template_loader(client):\n    class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({\"index.html\": \"Hello Custom World!\"})\n\n    app = MyFlask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"index.html\")\n\n    c = app.test_client()\n    rv = c.get(\"/\")\n    assert rv.data == b\"Hello Custom World!\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_iterable_loader_test_iterable_loader": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_iterable_loader_test_iterable_loader", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 423, "end_line": 440, "span_ids": ["test_iterable_loader"], "tokens": 109}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_iterable_loader(app, client):\n    @app.context_processor\n    def context_processor():\n        return {\"whiskey\": \"Jameson\"}\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\n            [\n                \"no_template.xml\",  # should skip this one\n                \"simple_template.html\",  # should render this\n                \"context_template.html\",\n            ],\n            value=23,\n        )\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"<h1>Jameson</h1>\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_templates_auto_reload_test_templates_auto_reload_debug_run": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_templates_auto_reload_test_templates_auto_reload_debug_run", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 443, "end_line": 485, "span_ids": ["test_templates_auto_reload", "test_templates_auto_reload_debug_run"], "tokens": 332}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config[\"TEMPLATES_AUTO_RELOAD\"] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config[\"TEMPLATES_AUTO_RELOAD\"] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is None\n    app = flask.Flask(__name__)\n    app.config[\"DEBUG\"] = True\n    assert app.config[\"TEMPLATES_AUTO_RELOAD\"] is None\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is False\n    app = flask.Flask(__name__)\n    app.config[\"DEBUG\"] = True\n    app.config[\"TEMPLATES_AUTO_RELOAD\"] = False\n    assert app.jinja_env.auto_reload is False\n    # debug is True, config option is True\n    app = flask.Flask(__name__)\n    app.config[\"DEBUG\"] = True\n    app.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n    assert app.jinja_env.auto_reload is True\n\n\ndef test_templates_auto_reload_debug_run(app, monkeypatch):\n    def run_simple_mock(*args, **kwargs):\n        pass\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n\n    app.run()\n    assert not app.jinja_env.auto_reload\n\n    app.run(debug=True)\n    assert app.jinja_env.auto_reload", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_loader_debugging_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_templating.py_test_template_loader_debugging_", "embedding": null, "metadata": {"file_path": "tests/test_templating.py", "file_name": "test_templating.py", "file_type": "text/x-python", "category": "test", "start_line": 488, "end_line": 533, "span_ids": ["test_custom_jinja_env", "test_template_loader_debugging"], "tokens": 317}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_template_loader_debugging(test_apps, monkeypatch):\n    from blueprintapp import app\n\n    called = []\n\n    class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert \"1: trying loader of application 'blueprintapp'\" in text\n            assert (\n                \"2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)\"\n            ) in text\n            assert (\n                \"trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)\"\n            ) in text\n            assert \"Error: the template could not be found\" in text\n            assert (\n                \"looked up from an endpoint that belongs to the blueprint 'frontend'\"\n            ) in text\n            assert \"See https://flask.palletsprojects.com/blueprints/#templates\" in text\n\n    with app.test_client() as c:\n        monkeypatch.setitem(app.config, \"EXPLAIN_TEMPLATE_LOADING\", True)\n        monkeypatch.setattr(\n            logging.getLogger(\"blueprintapp\"), \"handlers\", [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get(\"/missing\")\n\n        assert \"missing_template.html\" in str(excinfo.value)\n\n    assert len(called) == 1\n\n\ndef test_custom_jinja_env():\n    class CustomEnvironment(flask.templating.Environment):\n        pass\n\n    class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment\n\n    app = CustomFlask(__name__)\n    assert isinstance(app.jinja_env, CustomEnvironment)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_importlib.metadata_test_environ_base_default": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_importlib.metadata_test_environ_base_default", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 54, "span_ids": ["imports", "test_environ_base_default", "test_environ_defaults", "test_environ_defaults_from_config"], "tokens": 310}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import importlib.metadata\n\nimport click\nimport pytest\n\nimport flask\nfrom flask import appcontext_popped\nfrom flask.cli import ScriptInfo\nfrom flask.globals import _cv_app\nfrom flask.json import jsonify\nfrom flask.testing import EnvironBuilder\nfrom flask.testing import FlaskCliRunner\n\n\ndef test_environ_defaults_from_config(app, client):\n    app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n    app.config[\"APPLICATION_ROOT\"] = \"/foo\"\n\n    @app.route(\"/\")\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == \"http://example.com:1234/foo/\"\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"http://example.com:1234/foo/\"\n\n\ndef test_environ_defaults(app, client, app_ctx, req_ctx):\n    @app.route(\"/\")\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == \"http://localhost/\"\n    with client:\n        rv = client.get(\"/\")\n        assert rv.data == b\"http://localhost/\"\n\n\ndef test_environ_base_default(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.g.remote_addr = flask.request.remote_addr\n        flask.g.user_agent = flask.request.user_agent.string\n        return \"\"\n\n    with client:\n        client.get(\"/\")\n        assert flask.g.remote_addr == \"127.0.0.1\"\n        assert flask.g.user_agent == (\n            f\"Werkzeug/{importlib.metadata.version('werkzeug')}\"\n        )", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_environ_base_modified_test_environ_base_modified": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_environ_base_modified_test_environ_base_modified", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 57, "end_line": 70, "span_ids": ["test_environ_base_modified"], "tokens": 110}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_environ_base_modified(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.g.remote_addr = flask.request.remote_addr\n        flask.g.user_agent = flask.request.user_agent.string\n        return \"\"\n\n    client.environ_base[\"REMOTE_ADDR\"] = \"192.168.0.22\"\n    client.environ_base[\"HTTP_USER_AGENT\"] = \"Foo\"\n\n    with client:\n        client.get(\"/\")\n        assert flask.g.remote_addr == \"192.168.0.22\"\n        assert flask.g.user_agent == \"Foo\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_open_environ_test_client_open_environ": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_open_environ_test_client_open_environ", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 73, "end_line": 87, "span_ids": ["test_client_open_environ"], "tokens": 125}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_client_open_environ(app, client, request):\n    @app.route(\"/index\")\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path=\"/index\", method=\"GET\")\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b\"127.0.0.1\"\n\n    environ = builder.get_environ()\n    client.environ_base[\"REMOTE_ADDR\"] = \"127.0.0.2\"\n    rv = client.open(environ)\n    assert rv.data == b\"127.0.0.2\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_specify_url_scheme_test_environbuilder_json_dumps": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_specify_url_scheme_test_environbuilder_json_dumps", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 90, "end_line": 114, "span_ids": ["test_environbuilder_json_dumps", "test_path_is_url", "test_specify_url_scheme"], "tokens": 187}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_specify_url_scheme(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context(url_scheme=\"https\")\n    assert ctx.request.url == \"https://localhost/\"\n\n    rv = client.get(\"/\", url_scheme=\"https\")\n    assert rv.data == b\"https://localhost/\"\n\n\ndef test_path_is_url(app):\n    eb = EnvironBuilder(app, \"https://example.com/\")\n    assert eb.url_scheme == \"https\"\n    assert eb.host == \"example.com\"\n    assert eb.script_root == \"\"\n    assert eb.path == \"/\"\n\n\ndef test_environbuilder_json_dumps(app):\n    \"\"\"EnvironBuilder.json_dumps() takes settings from the app.\"\"\"\n    app.json.ensure_ascii = False\n    eb = EnvironBuilder(app, json=\"\\u20ac\")\n    assert eb.input_stream.read().decode(\"utf8\") == '\"\\u20ac\"'", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_blueprint_with_subdomain_test_blueprint_with_subdomain": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_blueprint_with_subdomain_test_blueprint_with_subdomain", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 117, "end_line": 138, "span_ids": ["test_blueprint_with_subdomain"], "tokens": 163}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_blueprint_with_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n    app.config[\"APPLICATION_ROOT\"] = \"/foo\"\n    client = app.test_client()\n\n    bp = flask.Blueprint(\"company\", __name__, subdomain=\"xxx\")\n\n    @bp.route(\"/\")\n    def index():\n        return flask.request.url\n\n    app.register_blueprint(bp)\n\n    ctx = app.test_request_context(\"/\", subdomain=\"xxx\")\n    assert ctx.request.url == \"http://xxx.example.com:1234/foo/\"\n\n    with ctx:\n        assert ctx.request.blueprint == bp.name\n\n    rv = client.get(\"/\", subdomain=\"xxx\")\n    assert rv.data == b\"http://xxx.example.com:1234/foo/\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_redirect_session_test_session_transactions": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_redirect_session_test_session_transactions", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 141, "end_line": 172, "span_ids": ["test_redirect_session", "test_session_transactions"], "tokens": 205}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_redirect_session(app, client, app_ctx):\n    @app.route(\"/redirect\")\n    def index():\n        flask.session[\"redirect\"] = True\n        return flask.redirect(\"/target\")\n\n    @app.route(\"/target\")\n    def get_session():\n        flask.session[\"target\"] = True\n        return \"\"\n\n    with client:\n        client.get(\"/redirect\", follow_redirects=True)\n        assert flask.session[\"redirect\"] is True\n        assert flask.session[\"target\"] is True\n\n\ndef test_session_transactions(app, client):\n    @app.route(\"/\")\n    def index():\n        return str(flask.session[\"foo\"])\n\n    with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess[\"foo\"] = [42]\n            assert len(sess) == 1\n        rv = client.get(\"/\")\n        assert rv.data == b\"[42]\"\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess[\"foo\"] == [42]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_session_transactions_no_null_sessions_test_session_transaction_needs_cookies": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_session_transactions_no_null_sessions_test_session_transaction_needs_cookies", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 175, "end_line": 198, "span_ids": ["test_session_transaction_needs_cookies", "test_session_transactions_keep_context", "test_session_transactions_no_null_sessions"], "tokens": 152}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_session_transactions_no_null_sessions():\n    app = flask.Flask(__name__)\n\n    with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert \"Session backend did not open a session\" in str(e.value)\n\n\ndef test_session_transactions_keep_context(app, client, req_ctx):\n    client.get(\"/\")\n    req = flask.request._get_current_object()\n    assert req is not None\n    with client.session_transaction():\n        assert req is flask.request._get_current_object()\n\n\ndef test_session_transaction_needs_cookies(app):\n    c = app.test_client(use_cookies=False)\n\n    with pytest.raises(TypeError, match=\"Cookies are disabled.\"):\n        with c.session_transaction():\n            pass", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_test_client_context_binding_test_test_client_context_binding.with_pytest_raises_Runtim": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_test_client_context_binding_test_test_client_context_binding.with_pytest_raises_Runtim", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 201, "end_line": 227, "span_ids": ["test_test_client_context_binding"], "tokens": 151}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route(\"/\")\n    def index():\n        flask.g.value = 42\n        return \"Hello World!\"\n\n    @app.route(\"/other\")\n    def other():\n        raise ZeroDivisionError\n\n    with client:\n        resp = client.get(\"/\")\n        assert flask.g.value == 42\n        assert resp.data == b\"Hello World!\"\n        assert resp.status_code == 200\n\n    with client:\n        resp = client.get(\"/other\")\n        assert not hasattr(flask.g, \"value\")\n        assert b\"Internal Server Error\" in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23\n\n    with pytest.raises(RuntimeError):\n        flask.g.value  # noqa: B018", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_reuse_client_test_full_url_request": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_reuse_client_test_full_url_request", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 230, "end_line": 249, "span_ids": ["test_full_url_request", "test_reuse_client"], "tokens": 128}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_reuse_client(client):\n    c = client\n\n    with c:\n        assert client.get(\"/\").status_code == 404\n\n    with c:\n        assert client.get(\"/\").status_code == 404\n\n\ndef test_full_url_request(app, client):\n    @app.route(\"/action\", methods=[\"POST\"])\n    def action():\n        return \"x\"\n\n    with client:\n        rv = client.post(\"http://domain.com/action?vodka=42\", data={\"gin\": 43})\n        assert rv.status_code == 200\n        assert \"gin\" in flask.request.form\n        assert \"vodka\" in flask.request.args", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_json_request_and_response_test_json_request_and_response": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_json_request_and_response_test_json_request_and_response", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 252, "end_line": 268, "span_ids": ["test_json_request_and_response"], "tokens": 133}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_json_request_and_response(app, client):\n    @app.route(\"/echo\", methods=[\"POST\"])\n    def echo():\n        return jsonify(flask.request.get_json())\n\n    with client:\n        json_data = {\"drink\": {\"gin\": 1, \"tonic\": True}, \"price\": 10}\n        rv = client.post(\"/echo\", json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_json_no_app_context_test_client_json_no_app_context": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_json_no_app_context_test_client_json_no_app_context", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 271, "end_line": 288, "span_ids": ["test_client_json_no_app_context"], "tokens": 122}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_client_json_no_app_context(app, client):\n    @app.route(\"/hello\", methods=[\"POST\"])\n    def hello():\n        return f\"Hello, {flask.request.json['name']}!\"\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post(\"/hello\", json={\"name\": \"Flask\"})\n\n    assert rv.get_data(as_text=True) == \"Hello, Flask!\"\n    assert ns.count == 1", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_subdomain_test_subdomain": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_subdomain_test_subdomain", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 291, "end_line": 307, "span_ids": ["test_subdomain"], "tokens": 110}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"example.com\"\n    client = app.test_client()\n\n    @app.route(\"/\", subdomain=\"<company_id>\")\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for(\"view\", company_id=\"xxx\")\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b\"xxx\" == response.data", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_nosubdomain_test_cli_custom_obj": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_nosubdomain_test_cli_custom_obj", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 310, "end_line": 368, "span_ids": ["test_cli_custom_obj", "test_cli_invoke", "test_cli_runner_class", "test_nosubdomain"], "tokens": 327}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_nosubdomain(app, client):\n    app.config[\"SERVER_NAME\"] = \"example.com\"\n\n    @app.route(\"/<company_id>\")\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for(\"view\", company_id=\"xxx\")\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b\"xxx\" == response.data\n\n\ndef test_cli_runner_class(app):\n    runner = app.test_cli_runner()\n    assert isinstance(runner, FlaskCliRunner)\n\n    class SubRunner(FlaskCliRunner):\n        pass\n\n    app.test_cli_runner_class = SubRunner\n    runner = app.test_cli_runner()\n    assert isinstance(runner, SubRunner)\n\n\ndef test_cli_invoke(app):\n    @app.cli.command(\"hello\")\n    def hello_command():\n        click.echo(\"Hello, World!\")\n\n    runner = app.test_cli_runner()\n    # invoke with command name\n    result = runner.invoke(args=[\"hello\"])\n    assert \"Hello\" in result.output\n    # invoke with command object\n    result = runner.invoke(hello_command)\n    assert \"Hello\" in result.output\n\n\ndef test_cli_custom_obj(app):\n    class NS:\n        called = False\n\n    def create_app():\n        NS.called = True\n        return app\n\n    @app.cli.command(\"hello\")\n    def hello_command():\n        click.echo(\"Hello, World!\")\n\n    script_info = ScriptInfo(create_app=create_app)\n    runner = app.test_cli_runner()\n    runner.invoke(hello_command, obj=script_info)\n    assert NS.called", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_pop_all_preserved_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_testing.py_test_client_pop_all_preserved_", "embedding": null, "metadata": {"file_path": "tests/test_testing.py", "file_name": "test_testing.py", "file_type": "text/x-python", "category": "test", "start_line": 371, "end_line": 386, "span_ids": ["test_client_pop_all_preserved"], "tokens": 121}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_client_pop_all_preserved(app, req_ctx, client):\n    @app.route(\"/\")\n    def index():\n        # stream_with_context pushes a third context, preserved by response\n        return flask.stream_with_context(\"hello\")\n\n    # req_ctx fixture pushed an initial context\n    with client:\n        # request pushes a second request context, preserved by client\n        rv = client.get(\"/\")\n\n    # close the response, releasing the context held by stream_with_context\n    rv.close()\n    # only req_ctx fixture should still be pushed\n    assert _cv_app.get(None) is req_ctx", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_pytest_test_error_handler_no_match.assert_client_get_abort": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_pytest_test_error_handler_no_match.assert_client_get_abort", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 58, "span_ids": ["imports", "test_error_handler_no_match"], "tokens": 318}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\nfrom werkzeug.exceptions import Forbidden\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.exceptions import InternalServerError\nfrom werkzeug.exceptions import NotFound\n\nimport flask\n\n\ndef test_error_handler_no_match(app, client):\n    class CustomException(Exception):\n        pass\n\n    @app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return \"custom\"\n\n    with pytest.raises(TypeError) as exc_info:\n        app.register_error_handler(CustomException(), None)\n\n    assert \"CustomException() is an instance, not a class.\" in str(exc_info.value)\n\n    with pytest.raises(ValueError) as exc_info:\n        app.register_error_handler(list, None)\n\n    assert \"'list' is not a subclass of Exception.\" in str(exc_info.value)\n\n    @app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n\n        if e.original_exception is not None:\n            return f\"wrapped {type(e.original_exception).__name__}\"\n\n        return \"direct\"\n\n    with pytest.raises(ValueError) as exc_info:\n        app.register_error_handler(999, None)\n\n    assert \"Use a subclass of HTTPException\" in str(exc_info.value)\n\n    @app.route(\"/custom\")\n    def custom_test():\n        raise CustomException()\n\n    @app.route(\"/keyerror\")\n    def key_error():\n        raise KeyError()\n\n    @app.route(\"/abort\")\n    def do_abort():\n        flask.abort(500)\n\n    app.testing = False\n    assert client.get(\"/custom\").data == b\"custom\"\n    assert client.get(\"/keyerror\").data == b\"wrapped KeyError\"\n    assert client.get(\"/abort\").data == b\"direct\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_subclass_test_error_handler_subclass.assert_c_get_child_regi": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_subclass_test_error_handler_subclass.assert_c_get_child_regi", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 61, "end_line": 97, "span_ids": ["test_error_handler_subclass"], "tokens": 192}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return \"parent\"\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return \"child-registered\"\n\n    @app.route(\"/parent\")\n    def parent_test():\n        raise ParentException()\n\n    @app.route(\"/child-unregistered\")\n    def unregistered_test():\n        raise ChildExceptionUnregistered()\n\n    @app.route(\"/child-registered\")\n    def registered_test():\n        raise ChildExceptionRegistered()\n\n    c = app.test_client()\n\n    assert c.get(\"/parent\").data == b\"parent\"\n    assert c.get(\"/child-unregistered\").data == b\"parent\"\n    assert c.get(\"/child-registered\").data == b\"child-registered\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_http_subclass_test_error_handler_http_subclass.assert_c_get_forbidden__2": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_http_subclass_test_error_handler_http_subclass.assert_c_get_forbidden__2", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 100, "end_line": 133, "span_ids": ["test_error_handler_http_subclass"], "tokens": 199}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_error_handler_http_subclass(app):\n    class ForbiddenSubclassRegistered(Forbidden):\n        pass\n\n    class ForbiddenSubclassUnregistered(Forbidden):\n        pass\n\n    @app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return \"forbidden\"\n\n    @app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return \"forbidden-registered\"\n\n    @app.route(\"/forbidden\")\n    def forbidden_test():\n        raise Forbidden()\n\n    @app.route(\"/forbidden-registered\")\n    def registered_test():\n        raise ForbiddenSubclassRegistered()\n\n    @app.route(\"/forbidden-unregistered\")\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered()\n\n    c = app.test_client()\n\n    assert c.get(\"/forbidden\").data == b\"forbidden\"\n    assert c.get(\"/forbidden-unregistered\").data == b\"forbidden\"\n    assert c.get(\"/forbidden-registered\").data == b\"forbidden-registered\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_blueprint_test_error_handler_blueprint": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_error_handler_blueprint_test_error_handler_blueprint", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 136, "end_line": 160, "span_ids": ["test_error_handler_blueprint"], "tokens": 142}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_error_handler_blueprint(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return \"bp-error\"\n\n    @bp.route(\"/error\")\n    def bp_test():\n        raise InternalServerError()\n\n    @app.errorhandler(500)\n    def app_exception_handler(e):\n        return \"app-error\"\n\n    @app.route(\"/error\")\n    def app_test():\n        raise InternalServerError()\n\n    app.register_blueprint(bp, url_prefix=\"/bp\")\n\n    c = app.test_client()\n\n    assert c.get(\"/error\").data == b\"app-error\"\n    assert c.get(\"/bp/error\").data == b\"bp-error\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_default_error_handler_test_default_error_handler.assert_c_get_slash_fo": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_test_default_error_handler_test_default_error_handler.assert_c_get_slash_fo", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 163, "end_line": 214, "span_ids": ["test_default_error_handler"], "tokens": 314}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_default_error_handler():\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return \"bp-default\"\n\n    @bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return \"bp-forbidden\"\n\n    @bp.route(\"/undefined\")\n    def bp_registered_test():\n        raise NotFound()\n\n    @bp.route(\"/forbidden\")\n    def bp_forbidden_test():\n        raise Forbidden()\n\n    app = flask.Flask(__name__)\n\n    @app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return \"default\"\n\n    @app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return \"forbidden\"\n\n    @app.route(\"/forbidden\")\n    def forbidden():\n        raise Forbidden()\n\n    @app.route(\"/slash/\")\n    def slash():\n        return \"slash\"\n\n    app.register_blueprint(bp, url_prefix=\"/bp\")\n\n    c = app.test_client()\n    assert c.get(\"/bp/undefined\").data == b\"bp-default\"\n    assert c.get(\"/bp/forbidden\").data == b\"bp-forbidden\"\n    assert c.get(\"/undefined\").data == b\"default\"\n    assert c.get(\"/forbidden\").data == b\"forbidden\"\n    # Don't handle RequestRedirect raised when adding slash.\n    assert c.get(\"/slash\", follow_redirects=True).data == b\"slash\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers_TestGenericHandlers.report_error": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers_TestGenericHandlers.report_error", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 217, "end_line": 250, "span_ids": ["TestGenericHandlers", "TestGenericHandlers.Custom", "TestGenericHandlers.app", "TestGenericHandlers.report_error"], "tokens": 164}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestGenericHandlers:\n    \"\"\"Test how very generic handlers are dispatched to.\"\"\"\n\n    class Custom(Exception):\n        pass\n\n    @pytest.fixture()\n    def app(self, app):\n        @app.route(\"/custom\")\n        def do_custom():\n            raise self.Custom()\n\n        @app.route(\"/error\")\n        def do_error():\n            raise KeyError()\n\n        @app.route(\"/abort\")\n        def do_abort():\n            flask.abort(500)\n\n        @app.route(\"/raise\")\n        def do_raise():\n            raise InternalServerError()\n\n        app.config[\"PROPAGATE_EXCEPTIONS\"] = False\n        return app\n\n    def report_error(self, e):\n        original = getattr(e, \"original_exception\", None)\n\n        if original is not None:\n            return f\"wrapped {type(original).__name__}\"\n\n        return f\"direct {type(e).__name__}\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_class_or_code_TestGenericHandlers.test_handle_class_or_code": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_class_or_code_TestGenericHandlers.test_handle_class_or_code", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 252, "end_line": 267, "span_ids": ["TestGenericHandlers.test_handle_class_or_code"], "tokens": 155}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestGenericHandlers:\n\n    @pytest.mark.parametrize(\"to_handle\", (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        \"\"\"``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        \"\"\"\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get(\"/custom\").data == b\"wrapped Custom\"\n        assert client.get(\"/error\").data == b\"wrapped KeyError\"\n        assert client.get(\"/abort\").data == b\"direct InternalServerError\"\n        assert client.get(\"/raise\").data == b\"direct InternalServerError\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_generic_http_TestGenericHandlers.test_handle_generic_http": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_generic_http_TestGenericHandlers.test_handle_generic_http", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 269, "end_line": 281, "span_ids": ["TestGenericHandlers.test_handle_generic_http"], "tokens": 106}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestGenericHandlers:\n\n    def test_handle_generic_http(self, app, client):\n        \"\"\"``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        \"\"\"\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get(\"/error\").data == b\"500\"\n        assert client.get(\"/abort\").data == b\"500\"\n        assert client.get(\"/not-found\").data == b\"404\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_generic_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_user_error_handler.py_TestGenericHandlers.test_handle_generic_", "embedding": null, "metadata": {"file_path": "tests/test_user_error_handler.py", "file_name": "test_user_error_handler.py", "file_type": "text/x-python", "category": "test", "start_line": 283, "end_line": 296, "span_ids": ["TestGenericHandlers.test_handle_generic"], "tokens": 109}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "class TestGenericHandlers:\n\n    def test_handle_generic(self, app, client):\n        \"\"\"Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        \"\"\"\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get(\"/custom\").data == b\"direct Custom\"\n        assert client.get(\"/error\").data == b\"direct KeyError\"\n        assert client.get(\"/abort\").data == b\"direct InternalServerError\"\n        assert client.get(\"/not-found\").data == b\"direct NotFound\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_pytest_test_view_patching": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_pytest_test_view_patching", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 1, "end_line": 59, "span_ids": ["common_test", "imports", "test_basic_view", "test_method_based_view", "test_view_patching"], "tokens": 304}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "import pytest\nfrom werkzeug.http import parse_set_header\n\nimport flask.views\n\n\ndef common_test(app):\n    c = app.test_client()\n\n    assert c.get(\"/\").data == b\"GET\"\n    assert c.post(\"/\").data == b\"POST\"\n    assert c.put(\"/\").status_code == 405\n    meths = parse_set_header(c.open(\"/\", method=\"OPTIONS\").headers[\"Allow\"])\n    assert sorted(meths) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n\n\ndef test_basic_view(app):\n    class Index(flask.views.View):\n        methods = [\"GET\", \"POST\"]\n\n        def dispatch_request(self):\n            return flask.request.method\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    common_test(app)\n\n\ndef test_method_based_view(app):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n        def post(self):\n            return \"POST\"\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n\n    common_test(app)\n\n\ndef test_view_patching(app):\n    class Index(flask.views.MethodView):\n        def get(self):\n            raise ZeroDivisionError\n\n        def post(self):\n            raise ZeroDivisionError\n\n    class Other(Index):\n        def get(self):\n            return \"GET\"\n\n        def post(self):\n            return \"POST\"\n\n    view = Index.as_view(\"index\")\n    view.view_class = Other\n    app.add_url_rule(\"/\", view_func=view)\n    common_test(app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_inheritance_test_view_inheritance": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_inheritance_test_view_inheritance", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 62, "end_line": 77, "span_ids": ["test_view_inheritance"], "tokens": 111}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_view_inheritance(app, client):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n        def post(self):\n            return \"POST\"\n\n    class BetterIndex(Index):\n        def delete(self):\n            return \"DELETE\"\n\n    app.add_url_rule(\"/\", view_func=BetterIndex.as_view(\"index\"))\n\n    meths = parse_set_header(client.open(\"/\", method=\"OPTIONS\").headers[\"Allow\"])\n    assert sorted(meths) == [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_decorators_test_view_decorators": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_decorators_test_view_decorators", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 80, "end_line": 98, "span_ids": ["test_view_decorators"], "tokens": 138}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_view_decorators(app, client):\n    def add_x_parachute(f):\n        def new_function(*args, **kwargs):\n            resp = flask.make_response(f(*args, **kwargs))\n            resp.headers[\"X-Parachute\"] = \"awesome\"\n            return resp\n\n        return new_function\n\n    class Index(flask.views.View):\n        decorators = [add_x_parachute]\n\n        def dispatch_request(self):\n            return \"Awesome\"\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    rv = client.get(\"/\")\n    assert rv.headers[\"X-Parachute\"] == \"awesome\"\n    assert rv.data == b\"Awesome\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_provide_automatic_options_attr_test_view_provide_automatic_options_attr.assert_OPTIONS_in_rv_al": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_view_provide_automatic_options_attr_test_view_provide_automatic_options_attr.assert_OPTIONS_in_rv_al", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 101, "end_line": 138, "span_ids": ["test_view_provide_automatic_options_attr"], "tokens": 221}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_view_provide_automatic_options_attr():\n    app = flask.Flask(__name__)\n\n    class Index1(flask.views.View):\n        provide_automatic_options = False\n\n        def dispatch_request(self):\n            return \"Hello World!\"\n\n    app.add_url_rule(\"/\", view_func=Index1.as_view(\"index\"))\n    c = app.test_client()\n    rv = c.open(\"/\", method=\"OPTIONS\")\n    assert rv.status_code == 405\n\n    app = flask.Flask(__name__)\n\n    class Index2(flask.views.View):\n        methods = [\"OPTIONS\"]\n        provide_automatic_options = True\n\n        def dispatch_request(self):\n            return \"Hello World!\"\n\n    app.add_url_rule(\"/\", view_func=Index2.as_view(\"index\"))\n    c = app.test_client()\n    rv = c.open(\"/\", method=\"OPTIONS\")\n    assert sorted(rv.allow) == [\"OPTIONS\"]\n\n    app = flask.Flask(__name__)\n\n    class Index3(flask.views.View):\n        def dispatch_request(self):\n            return \"Hello World!\"\n\n    app.add_url_rule(\"/\", view_func=Index3.as_view(\"index\"))\n    c = app.test_client()\n    rv = c.open(\"/\", method=\"OPTIONS\")\n    assert \"OPTIONS\" in rv.allow", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_implicit_head_test_implicit_head": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_implicit_head_test_implicit_head", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 141, "end_line": 152, "span_ids": ["test_implicit_head"], "tokens": 111}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_implicit_head(app, client):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return flask.Response(\"Blub\", headers={\"X-Method\": flask.request.method})\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    rv = client.get(\"/\")\n    assert rv.data == b\"Blub\"\n    assert rv.headers[\"X-Method\"] == \"GET\"\n    rv = client.head(\"/\")\n    assert rv.data == b\"\"\n    assert rv.headers[\"X-Method\"] == \"HEAD\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_explicit_head_test_explicit_head": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_explicit_head_test_explicit_head", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 155, "end_line": 168, "span_ids": ["test_explicit_head"], "tokens": 104}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_explicit_head(app, client):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n        def head(self):\n            return flask.Response(\"\", headers={\"X-Method\": \"HEAD\"})\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    rv = client.get(\"/\")\n    assert rv.data == b\"GET\"\n    rv = client.head(\"/\")\n    assert rv.data == b\"\"\n    assert rv.headers[\"X-Method\"] == \"HEAD\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_endpoint_override_test_endpoint_override": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_endpoint_override_test_endpoint_override", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 171, "end_line": 186, "span_ids": ["test_endpoint_override"], "tokens": 101}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_endpoint_override(app):\n    app.debug = True\n\n    class Index(flask.views.View):\n        methods = [\"GET\", \"POST\"]\n\n        def dispatch_request(self):\n            return flask.request.method\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n\n    with pytest.raises(AssertionError):\n        app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n\n    # But these tests should still pass. We just log a warning.\n    common_test(app)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_methods_var_inheritance_test_methods_var_inheritance": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_methods_var_inheritance_test_methods_var_inheritance", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 189, "end_line": 204, "span_ids": ["test_methods_var_inheritance"], "tokens": 122}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_methods_var_inheritance(app, client):\n    class BaseView(flask.views.MethodView):\n        methods = [\"GET\", \"PROPFIND\"]\n\n    class ChildView(BaseView):\n        def get(self):\n            return \"GET\"\n\n        def propfind(self):\n            return \"PROPFIND\"\n\n    app.add_url_rule(\"/\", view_func=ChildView.as_view(\"index\"))\n\n    assert client.get(\"/\").data == b\"GET\"\n    assert client.open(\"/\", method=\"PROPFIND\").data == b\"PROPFIND\"\n    assert ChildView.methods == {\"PROPFIND\", \"GET\"}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_multiple_inheritance_test_multiple_inheritance": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_multiple_inheritance_test_multiple_inheritance", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 207, "end_line": 223, "span_ids": ["test_multiple_inheritance"], "tokens": 119}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_multiple_inheritance(app, client):\n    class GetView(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n    class DeleteView(flask.views.MethodView):\n        def delete(self):\n            return \"DELETE\"\n\n    class GetDeleteView(GetView, DeleteView):\n        pass\n\n    app.add_url_rule(\"/\", view_func=GetDeleteView.as_view(\"index\"))\n\n    assert client.get(\"/\").data == b\"GET\"\n    assert client.delete(\"/\").data == b\"DELETE\"\n    assert sorted(GetDeleteView.methods) == [\"DELETE\", \"GET\"]", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_remove_method_from_parent_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/test_views.py_test_remove_method_from_parent_", "embedding": null, "metadata": {"file_path": "tests/test_views.py", "file_name": "test_views.py", "file_type": "text/x-python", "category": "test", "start_line": 226, "end_line": 261, "span_ids": ["test_init_once", "test_remove_method_from_parent"], "tokens": 213}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "def test_remove_method_from_parent(app, client):\n    class GetView(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n    class OtherView(flask.views.MethodView):\n        def post(self):\n            return \"POST\"\n\n    class View(GetView, OtherView):\n        methods = [\"GET\"]\n\n    app.add_url_rule(\"/\", view_func=View.as_view(\"index\"))\n\n    assert client.get(\"/\").data == b\"GET\"\n    assert client.post(\"/\").status_code == 405\n    assert sorted(View.methods) == [\"GET\"]\n\n\ndef test_init_once(app, client):\n    n = 0\n\n    class CountInit(flask.views.View):\n        init_every_request = False\n\n        def __init__(self):\n            nonlocal n\n            n += 1\n\n        def dispatch_request(self):\n            return str(n)\n\n    app.add_url_rule(\"/\", view_func=CountInit.as_view(\"index\"))\n    assert client.get(\"/\").data == b\"1\"\n    assert client.get(\"/\").data == b\"1\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_app_decorators.py_from___future___import_an_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_app_decorators.py_from___future___import_an_", "embedding": null, "metadata": {"file_path": "tests/type_check/typing_app_decorators.py", "file_name": "typing_app_decorators.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 33, "span_ids": ["after_async", "after_sync", "before_async", "before_sync", "imports", "teardown_async", "teardown_sync"], "tokens": 123}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nfrom flask import Flask\nfrom flask import Response\n\napp = Flask(__name__)\n\n\n@app.after_request\ndef after_sync(response: Response) -> Response:\n    return Response()\n\n\n@app.after_request\nasync def after_async(response: Response) -> Response:\n    return Response()\n\n\n@app.before_request\ndef before_sync() -> None: ...\n\n\n@app.before_request\nasync def before_async() -> None: ...\n\n\n@app.teardown_appcontext\ndef teardown_sync(exc: BaseException | None) -> None: ...\n\n\n@app.teardown_appcontext\nasync def teardown_async(exc: BaseException | None) -> None: ...", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_error_handler.py_from___future___import_an_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_error_handler.py_from___future___import_an_", "embedding": null, "metadata": {"file_path": "tests/type_check/typing_error_handler.py", "file_name": "typing_error_handler.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 34, "span_ids": ["handle_400", "handle_accept_base", "handle_custom", "handle_multiple", "imports"], "tokens": 133}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nfrom http import HTTPStatus\n\nfrom werkzeug.exceptions import BadRequest\nfrom werkzeug.exceptions import NotFound\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.errorhandler(400)\n@app.errorhandler(HTTPStatus.BAD_REQUEST)\n@app.errorhandler(BadRequest)\ndef handle_400(e: BadRequest) -> str:\n    return \"\"\n\n\n@app.errorhandler(ValueError)\ndef handle_custom(e: ValueError) -> str:\n    return \"\"\n\n\n@app.errorhandler(ValueError)\ndef handle_accept_base(e: Exception) -> str:\n    return \"\"\n\n\n@app.errorhandler(BadRequest)\n@app.errorhandler(404)\ndef handle_multiple(e: BadRequest | NotFound) -> str:\n    return \"\"", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_route.py_from___future___import_an_": {"__data__": {"id_": "/mnt/task_runtime/shiyl_workspace/workspace/DeepRepoQA/dataset/repos/flask/tests/type_check/typing_route.py_from___future___import_an_", "embedding": null, "metadata": {"file_path": "tests/type_check/typing_route.py", "file_name": "typing_route.py", "file_type": "text/x-python", "category": "implementation", "start_line": 1, "end_line": 113, "span_ids": ["RenderTemplateView", "RenderTemplateView.__init__", "RenderTemplateView.dispatch_request", "StatusJSON", "async_route", "hello_bytes", "hello_generator", "hello_generator_expression", "hello_iterator", "hello_json", "hello_json_dict", "hello_json_list", "hello_str", "impl:2", "imports", "return_template", "return_template_stream", "tuple_headers", "tuple_status", "tuple_status_enum", "typed_dict"], "tokens": 595}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date", "start_line", "end_line", "tokens"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "text": "from __future__ import annotations\n\nimport typing as t\nfrom http import HTTPStatus\n\nfrom flask import Flask\nfrom flask import jsonify\nfrom flask import stream_template\nfrom flask.templating import render_template\nfrom flask.views import View\nfrom flask.wrappers import Response\n\napp = Flask(__name__)\n\n\n@app.route(\"/str\")\ndef hello_str() -> str:\n    return \"<p>Hello, World!</p>\"\n\n\n@app.route(\"/bytes\")\ndef hello_bytes() -> bytes:\n    return b\"<p>Hello, World!</p>\"\n\n\n@app.route(\"/json\")\ndef hello_json() -> Response:\n    return jsonify(\"Hello, World!\")\n\n\n@app.route(\"/json/dict\")\ndef hello_json_dict() -> dict[str, t.Any]:\n    return {\"response\": \"Hello, World!\"}\n\n\n@app.route(\"/json/dict\")\ndef hello_json_list() -> list[t.Any]:\n    return [{\"message\": \"Hello\"}, {\"message\": \"World\"}]\n\n\nclass StatusJSON(t.TypedDict):\n    status: str\n\n\n@app.route(\"/typed-dict\")\ndef typed_dict() -> StatusJSON:\n    return {\"status\": \"ok\"}\n\n\n@app.route(\"/generator\")\ndef hello_generator() -> t.Generator[str, None, None]:\n    def show() -> t.Generator[str, None, None]:\n        for x in range(100):\n            yield f\"data:{x}\\n\\n\"\n\n    return show()\n\n\n@app.route(\"/generator-expression\")\ndef hello_generator_expression() -> t.Iterator[bytes]:\n    return (f\"data:{x}\\n\\n\".encode() for x in range(100))\n\n\n@app.route(\"/iterator\")\ndef hello_iterator() -> t.Iterator[str]:\n    return iter([f\"data:{x}\\n\\n\" for x in range(100)])\n\n\n@app.route(\"/status\")\n@app.route(\"/status/<int:code>\")\ndef tuple_status(code: int = 200) -> tuple[str, int]:\n    return \"hello\", code\n\n\n@app.route(\"/status-enum\")\ndef tuple_status_enum() -> tuple[str, int]:\n    return \"hello\", HTTPStatus.OK\n\n\n@app.route(\"/headers\")\ndef tuple_headers() -> tuple[str, dict[str, str]]:\n    return \"Hello, World!\", {\"Content-Type\": \"text/plain\"}\n\n\n@app.route(\"/template\")\n@app.route(\"/template/<name>\")\ndef return_template(name: str | None = None) -> str:\n    return render_template(\"index.html\", name=name)\n\n\n@app.route(\"/template\")\ndef return_template_stream() -> t.Iterator[str]:\n    return stream_template(\"index.html\", name=\"Hello\")\n\n\n@app.route(\"/async\")\nasync def async_route() -> str:\n    return \"Hello\"\n\n\nclass RenderTemplateView(View):\n    def __init__(self: RenderTemplateView, template_name: str) -> None:\n        self.template_name = template_name\n\n    def dispatch_request(self: RenderTemplateView) -> str:\n        return render_template(self.template_name)\n\n\napp.add_url_rule(\n    \"/about\",\n    view_func=RenderTemplateView.as_view(\"about_page\", template_name=\"about.html\"),\n)", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}}